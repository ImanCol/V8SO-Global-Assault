using System;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;
using UnityEngine.SceneManagement;
using UnityEngine.Profiling;
using Unity.Jobs;
using Unity.Collections;
using Unity.Burst;

public delegate VigObject _VEHICLE_INIT(XOBF_DB param1, int param2, uint param3); //needs parameters
public delegate VigObject _SPECIAL_INIT(XOBF_DB param1, int param2);
public delegate VigObject _OBJECT_INIT(XOBF_DB param1, int param2, uint param3);

public struct VehicleData
{
    public short[] DAT_00; //0x00
    public byte DAT_0C; //0x0C
    public _VEHICLE vehicleID; //0x0D
    public sbyte DAT_0E; //0x0E
    public sbyte DAT_0F; //0x0F
    public byte DAT_10; //0x10
    public byte DAT_11; //0x11
    public byte DAT_12; //0x12
    public byte DAT_13; //0x13
    public byte DAT_15; //0x15
    public ushort maxHalfHealth; //0x18
    public int lightness; //0x1C
    public Vector3Int DAT_24; //0x24
    public short DAT_2A; //0x2A
    public byte[] DAT_2C; //0x2C
}

public enum _GAME_MODE
{
    Quest,
    Arcade,
    Alone,
    Survival,
    Demo,
    Versus,
    Coop,
    Quest2,
    Unk1,
    Unk2
}

public enum _SCREEN_MODE
{
    Whole,
    Horizontal,
    Vertical,
    Unknown
}

public enum _DITHERING
{
    None,
    Standard, 
    PSX
}

public class BSP
{
    public int DAT_00; //0x00
    public int DAT_04; //0x04
    public List<VigTuple> LDAT_04; //0x04
    public BSP DAT_08; //0x08
    public BSP DAT_0C; //0x0C
}

public class GameManager : MonoBehaviour
{
    public static GameManager instance;

    public static short[] SQRT =
    {
        4096, 4127, 4159, 4190, 4222, 4252, 4283, 4314, 4344, 4374, 4404,
        4434, 4463, 4492, 4521, 4550, 4579, 4608, 4636, 4664, 4692, 4720,
        4748, 4775, 4802, 4830, 4857, 4884, 4910, 4937, 4964, 4990, 5016,
        5042, 5068, 5094, 5120, 5145, 5170, 5196, 5221, 5246, 5271, 5296,
        5320, 5345, 5369, 5394, 5418, 5442, 5466, 5490, 5514, 5538, 5561,
        5585, 5608, 5632, 5655, 5678, 5701, 5724, 5747, 5769, 5792, 5815,
        5837, 5860, 5882, 5904, 5926, 5948, 5970, 5992, 6014, 6036, 6058,
        6079, 6101, 6122, 6144, 6165, 6186, 6207, 6228, 6249, 6270, 6291,
        6312, 6333, 6353, 6374, 6394, 6415, 6435, 6456, 6476, 6496, 6516,
        6536, 6556, 6576, 6596, 6616, 6636, 6656, 6675, 6695, 6714, 6734,
        6753, 6773, 6792, 6811, 6830, 6850, 6869, 6888, 6907, 6926, 6945,
        6963, 6982, 7001, 7020, 7038, 7057, 7075, 7094, 7112, 7131, 7149,
        7168, 7186, 7204, 7222, 7240, 7258, 7276, 7294, 7312, 7330, 7348,
        7366, 7384, 7401, 7419, 7437, 7454, 7472, 7489, 7507, 7524, 7542,
        7559, 7576, 7594, 7611, 7628, 7645, 7662, 7680, 7697, 7714, 7731,
        7747, 7764, 7781, 7798, 7815, 7832, 7848, 7865, 7882, 7898, 7915,
        7931, 7948, 7964, 7981, 7997, 8014, 8030, 8046, 8062, 8079, 8095,
        8111, 8127, 8143, 8159, 8175
    };
    public static short[] UNK4 =
    {
        4096, 4064, 4033, 4003, 3973, 3944, 3916, 3888, 3861, 3835, 3809,
        3783, 3758, 3734, 3710, 3686, 3663, 3640, 3618, 3596, 3575, 3554,
        3533, 3513, 3493, 3473, 3454, 3435, 3416, 3397, 3379, 3361, 3344,
        3327, 3310, 3293, 3276, 3260, 3244, 3228, 3213, 3197, 3182, 3167,
        3153, 3138, 3124, 3110, 3096, 3082, 3069, 3055, 3042, 3029, 3016,
        3003, 2991, 2978, 2966, 2954, 2942, 2930, 2919, 2907, 2896, 2885,
        2873, 2862, 2852, 2841, 2830, 2820, 2809, 2799, 2789, 2779, 2769,
        2759, 2749, 2740, 2730, 2721, 2711, 2702, 2693, 2684, 2675, 2666,
        2657, 2649, 2640, 2631, 2623, 2615, 2606, 2598, 2590, 2582, 2574,
        2566, 2558, 2550, 2543, 2535, 2528, 2520, 2513, 2505, 2498, 2491,
        2484, 2477, 2469, 2462, 2456, 2449, 2442, 2435, 2428, 2422, 2415,
        2409, 2402, 2396, 2389, 2383, 2377, 2371, 2364, 2358, 2352, 2346,
        2340, 2334, 2328, 2322, 2317, 2311, 2305, 2299, 2294, 2288, 2283,
        2277, 2272, 2266, 2261, 2255, 2250, 2245, 2239, 2234, 2229, 2224,
        2219, 2214, 2209, 2204, 2199, 2194, 2189, 2184, 2179, 2174, 2170,
        2165, 2160, 2155, 2151, 2146, 2142, 2137, 2133, 2128, 2124, 2119,
        2115, 2110, 2106, 2102, 2097, 2093, 2089, 2084, 2080, 2076, 2072,
        2068, 2064, 2060, 2056, 2052
    };
    public static short[] DAT_65C90 =
    {
        0, 4096, 6, 4096, 13, 4096, 19, 4096, 25, 4096, 31, 4096, 38, 4096,
        44, 4096, 50, 4096, 57, 4096, 63, 4096, 69, 4095, 75, 4095, 82, 4095,
        88, 4095, 94, 4095, 101, 4095, 107, 4095, 113, 4094, 119, 4094, 126,
        4094, 132, 4094, 138, 4094, 144, 4093, 151, 4093, 157, 4093, 163, 4093,
        170, 4092, 176, 4092, 182, 4092, 188, 4092, 195, 4091, 201, 4091, 207,
        4091, 214, 4090, 220, 4090, 226, 4090, 232, 4089, 239, 4089, 245, 4089,
        251, 4088, 257, 4088, 264, 4088, 270, 4087, 276, 4087, 283, 4086, 289,
        4086, 295, 4085, 301, 4085, 308, 4084, 314, 4084, 320, 4083, 326, 4083,
        333, 4082, 339, 4082, 345, 4081, 351, 4081, 358, 4080, 364, 4080, 370,
        4079, 376, 4079, 383, 4078, 389, 4077, 395, 4077, 401, 4076, 408, 4076,
        414, 4075, 420, 4074, 426, 4074, 433, 4073, 439, 4072, 445, 4072, 451,
        4071, 458, 4070, 464, 4070, 470, 4069, 476, 4068, 483, 4067, 489, 4067,
        495, 4066, 501, 4065, 508, 4064, 514, 4064, 520, 4063, 526, 4062, 533,
        4061, 539, 4060, 545, 4060, 551, 4059, 557, 4058, 564, 4057, 570, 4056,
        576, 4055, 582, 4054, 589, 4053, 595, 4053, 601, 4052, 607, 4051, 613,
        4050, 620, 4049, 626, 4048, 632, 4047, 638, 4046, 644, 4045, 651, 4044,
        657, 4043, 663, 4042, 669, 4041, 675, 4040, 682, 4039, 688, 4038, 694,
        4037, 700, 4036, 706, 4035, 713, 4034, 719, 4032, 725, 4031, 731, 4030,
        737, 4029, 744, 4028, 750, 4027, 756, 4026, 762, 4024, 768, 4023, 774,
        4022, 781, 4021, 787, 4020, 793, 4019, 799, 4017, 805, 4016, 811, 4015,
        818, 4014, 824, 4012, 830, 4011, 836, 4010, 842, 4008, 848, 4007, 854,
        4006, 861, 4005, 867, 4003, 873, 4002, 879, 4001, 885, 3999, 891, 3998,
        897, 3996, 904, 3995, 910, 3994, 916, 3992, 922, 3991, 928, 3989, 934,
        3988, 940, 3987, 946, 3985, 953, 3984, 959, 3982, 965, 3981, 971, 3979,
        977, 3978, 983, 3976, 989, 3975, 995, 3973, 1001, 3972, 1007, 3970, 1014,
        3969, 1020, 3967, 1026, 3965, 1032, 3964, 1038, 3962, 1044, 3961, 1050,
        3959, 1056, 3958, 1062, 3956, 1068, 3954, 1074, 3953, 1080, 3951, 1086,
        3949, 1092, 3948, 1099, 3946, 1105, 3944, 1111, 3943, 1117, 3941, 1123,
        3939, 1129, 3937, 1135, 3936, 1141, 3934, 1147, 3932, 1153, 3930, 1159,
        3929, 1165, 3927, 1171, 3925, 1177, 3923, 1183, 3921, 1189, 3920, 1195,
        3918, 1201, 3916, 1207, 3914, 1213, 3912, 1219, 3910, 1225, 3909, 1231,
        3907, 1237, 3905, 1243, 3903, 1249, 3901, 1255, 3899, 1261, 3897, 1267,
        3895, 1273, 3893, 1279, 3891, 1285, 3889, 1291, 3887, 1297, 3885, 1303,
        3883, 1309, 3881, 1315, 3879, 1321, 3877, 1327, 3875, 1332, 3873, 1338,
        3871, 1344, 3869, 1350, 3867, 1356, 3865, 1362, 3863, 1368, 3861, 1374,
        3859, 1380, 3857, 1386, 3854, 1392, 3852, 1398, 3850, 1404, 3848, 1409,
        3846, 1415, 3844, 1421, 3842, 1427, 3839, 1433, 3837, 1439, 3835, 1445,
        3833, 1451, 3831, 1457, 3828, 1462, 3826, 1468, 3824, 1474, 3822, 1480,
        3819, 1486, 3817, 1492, 3815, 1498, 3812, 1503, 3810, 1509, 3808, 1515,
        3805, 1521, 3803, 1527, 3801, 1533, 3798, 1538, 3796, 1544, 3794, 1550,
        3791, 1556, 3789, 1562, 3787, 1567, 3784, 1573, 3782, 1579, 3779, 1585,
        3777, 1591, 3775, 1596, 3772, 1602, 3770, 1608, 3767, 1614, 3765, 1620,
        3762, 1625, 3760, 1631, 3757, 1637, 3755, 1643, 3752, 1648, 3750, 1654,
        3747, 1660, 3745, 1666, 3742, 1671, 3739, 1677, 3737, 1683, 3734, 1689,
        3732, 1694, 3729, 1700, 3727, 1706, 3724, 1711, 3721, 1717, 3719, 1723,
        3716, 1729, 3713, 1734, 3711, 1740, 3708, 1746, 3705, 1751, 3703, 1757,
        3700, 1763, 3697, 1768, 3695, 1774, 3692, 1780, 3689, 1785, 3686, 1791,
        3684, 1797, 3681, 1802, 3678, 1808, 3675, 1813, 3673, 1819, 3670, 1825,
        3667, 1830, 3664, 1836, 3661, 1842, 3659, 1847, 3656, 1853, 3653, 1858,
        3650, 1864, 3647, 1870, 3644, 1875, 3642, 1881, 3639, 1886, 3636, 1892,
        3633, 1898, 3630, 1903, 3627, 1909, 3624, 1914, 3621, 1920, 3618, 1925,
        3615, 1931, 3612, 1936, 3609, 1942, 3606, 1947, 3603, 1953, 3600, 1958,
        3597, 1964, 3594, 1970, 3591, 1975, 3588, 1981, 3585, 1986, 3582, 1992,
        3579, 1997, 3576, 2002, 3573, 2008, 3570, 2013, 3567, 2019, 3564, 2024,
        3561, 2030, 3558, 2035, 3555, 2041, 3551, 2046, 3548, 2052, 3545, 2057,
        3542, 2062, 3539, 2068, 3536, 2073, 3532, 2079, 3529, 2084, 3526, 2090,
        3523, 2095, 3520, 2100, 3516, 2106, 3513, 2111, 3510, 2117, 3507, 2122,
        3504, 2127, 3500, 2133, 3497, 2138, 3494, 2143, 3490, 2149, 3487, 2154,
        3484, 2159, 3481, 2165, 3477, 2170, 3474, 2175, 3471, 2181, 3467, 2186,
        3464, 2191, 3461, 2197, 3457, 2202, 3454, 2207, 3450, 2213, 3447, 2218,
        3444, 2223, 3440, 2228, 3437, 2234, 3433, 2239, 3430, 2244, 3426, 2249,
        3423, 2255, 3420, 2260, 3416, 2265, 3413, 2270, 3409, 2276, 3406, 2281,
        3402, 2286, 3399, 2291, 3395, 2296, 3392, 2302, 3388, 2307, 3385, 2312,
        3381, 2317, 3378, 2322, 3374, 2328, 3370, 2333, 3367, 2338, 3363, 2343,
        3360, 2348, 3356, 2353, 3352, 2359, 3349, 2364, 3345, 2369, 3342, 2374,
        3338, 2379, 3334, 2384, 3331, 2389, 3327, 2394, 3323, 2399, 3320, 2405,
        3316, 2410, 3312, 2415, 3309, 2420, 3305, 2425, 3301, 2430, 3297, 2435,
        3294, 2440, 3290, 2445, 3286, 2450, 3282, 2455, 3279, 2460, 3275, 2465,
        3271, 2470, 3267, 2475, 3264, 2480, 3260, 2485, 3256, 2490, 3252, 2495,
        3248, 2500, 3244, 2505, 3241, 2510, 3237, 2515, 3233, 2520, 3229, 2525,
        3225, 2530, 3221, 2535, 3217, 2540, 3214, 2545, 3210, 2550, 3206, 2555,
        3202, 2559, 3198, 2564, 3194, 2569, 3190, 2574, 3186, 2579, 3182, 2584,
        3178, 2589, 3174, 2594, 3170, 2598, 3166, 2603, 3162, 2608, 3158, 2613,
        3154, 2618, 3150, 2623, 3146, 2628, 3142, 2632, 3138, 2637, 3134, 2642,
        3130, 2647, 3126, 2652, 3122, 2656, 3118, 2661, 3114, 2666, 3110, 2671,
        3106, 2675, 3102, 2680, 3097, 2685, 3093, 2690, 3089, 2694, 3085, 2699,
        3081, 2704, 3077, 2709, 3073, 2713, 3068, 2718, 3064, 2723, 3060, 2727,
        3056, 2732, 3052, 2737, 3048, 2741, 3043, 2746, 3039, 2751, 3035, 2755,
        3031, 2760, 3026, 2765, 3022, 2769, 3018, 2774, 3014, 2779, 3009, 2783,
        3005, 2788, 3001, 2792, 2997, 2797, 2992, 2802, 2988, 2806, 2984, 2811,
        2979, 2815, 2975, 2820, 2971, 2824, 2967, 2829, 2962, 2833, 2958, 2838,
        2953, 2843, 2949, 2847, 2945, 2852, 2940, 2856, 2936, 2861, 2932, 2865,
        2927, 2870, 2923, 2874, 2918, 2878, 2914, 2883, 2910, 2887, 2905, 2892,
        2901, 2896, 2896, 2901, 2892, 2905, 2887, 2910, 2883, 2914, 2878, 2918,
        2874, 2923, 2870, 2927, 2865, 2932, 2861, 2936, 2856, 2940, 2852, 2945,
        2847, 2949, 2843, 2953, 2838, 2958, 2833, 2962, 2829, 2967, 2824, 2971,
        2820, 2975, 2815, 2979, 2811, 2984, 2806, 2988, 2802, 2992, 2797, 2997,
        2792, 3001, 2788, 3005, 2783, 3009, 2779, 3014, 2774, 3018, 2769, 3022,
        2765, 3026, 2760, 3031, 2755, 3035, 2751, 3039, 2746, 3043, 2741, 3048,
        2737, 3052, 2732, 3056, 2727, 3060, 2723, 3064, 2718, 3068, 2713, 3073,
        2709, 3077, 2704, 3081, 2699, 3085, 2694, 3089, 2690, 3093, 2685, 3097,
        2680, 3102, 2675, 3106, 2671, 3110, 2666, 3114, 2661, 3118, 2656, 3122,
        2652, 3126, 2647, 3130, 2642, 3134, 2637, 3138, 2632, 3142, 2628, 3146,
        2623, 3150, 2618, 3154, 2613, 3158, 2608, 3162, 2603, 3166, 2598, 3170,
        2594, 3174, 2589, 3178, 2584, 3182, 2579, 3186, 2574, 3190, 2569, 3194,
        2564, 3198, 2559, 3202, 2555, 3206, 2550, 3210, 2545, 3214, 2540, 3217,
        2535, 3221, 2530, 3225, 2525, 3229, 2520, 3233, 2515, 3237, 2510, 3241,
        2505, 3244, 2500, 3248, 2495, 3252, 2490, 3256, 2485, 3260, 2480, 3264,
        2475, 3267, 2470, 3271, 2465, 3275, 2460, 3279, 2455, 3282, 2450, 3286,
        2445, 3290, 2440, 3294, 2435, 3297, 2430, 3301, 2425, 3305, 2420, 3309,
        2415, 3312, 2410, 3316, 2405, 3320, 2399, 3323, 2394, 3327, 2389, 3331,
        2384, 3334, 2379, 3338, 2374, 3342, 2369, 3345, 2364, 3349, 2359, 3352,
        2353, 3356, 2348, 3360, 2343, 3363, 2338, 3367, 2333, 3370, 2328, 3374,
        2322, 3378, 2317, 3381, 2312, 3385, 2307, 3388, 2302, 3392, 2296, 3395,
        2291, 3399, 2286, 3402, 2281, 3406, 2276, 3409, 2270, 3413, 2265, 3416,
        2260, 3420, 2255, 3423, 2249, 3426, 2244, 3430, 2239, 3433, 2234, 3437,
        2228, 3440, 2223, 3444, 2218, 3447, 2213, 3450, 2207, 3454, 2202, 3457,
        2197, 3461, 2191, 3464, 2186, 3467, 2181, 3471, 2175, 3474, 2170, 3477,
        2165, 3481, 2159, 3484, 2154, 3487, 2149, 3490, 2143, 3494, 2138, 3497,
        2133, 3500, 2127, 3504, 2122, 3507, 2117, 3510, 2111, 3513, 2106, 3516,
        2100, 3520, 2095, 3523, 2090, 3526, 2084, 3529, 2079, 3532, 2073, 3536,
        2068, 3539, 2062, 3542, 2057, 3545, 2052, 3548, 2046, 3551, 2041, 3555,
        2035, 3558, 2030, 3561, 2024, 3564, 2019, 3567, 2013, 3570, 2008, 3573,
        2002, 3576, 1997, 3579, 1992, 3582, 1986, 3585, 1981, 3588, 1975, 3591,
        1970, 3594, 1964, 3597, 1958, 3600, 1953, 3603, 1947, 3606, 1942, 3609,
        1936, 3612, 1931, 3615, 1925, 3618, 1920, 3621, 1914, 3624, 1909, 3627,
        1903, 3630, 1898, 3633, 1892, 3636, 1886, 3639, 1881, 3642, 1875, 3644,
        1870, 3647, 1864, 3650, 1858, 3653, 1853, 3656, 1847, 3659, 1842, 3661,
        1836, 3664, 1830, 3667, 1825, 3670, 1819, 3673, 1813, 3675, 1808, 3678,
        1802, 3681, 1797, 3684, 1791, 3686, 1785, 3689, 1780, 3692, 1774, 3695,
        1768, 3697, 1763, 3700, 1757, 3703, 1751, 3705, 1746, 3708, 1740, 3711,
        1734, 3713, 1729, 3716, 1723, 3719, 1717, 3721, 1711, 3724, 1706, 3727,
        1700, 3729, 1694, 3732, 1689, 3734, 1683, 3737, 1677, 3739, 1671, 3742,
        1666, 3745, 1660, 3747, 1654, 3750, 1648, 3752, 1643, 3755, 1637, 3757,
        1631, 3760, 1625, 3762, 1620, 3765, 1614, 3767, 1608, 3770, 1602, 3772,
        1596, 3775, 1591, 3777, 1585, 3779, 1579, 3782, 1573, 3784, 1567, 3787,
        1562, 3789, 1556, 3791, 1550, 3794, 1544, 3796, 1538, 3798, 1533, 3801,
        1527, 3803, 1521, 3805, 1515, 3808, 1509, 3810, 1503, 3812, 1498, 3815,
        1492, 3817, 1486, 3819, 1480, 3822, 1474, 3824, 1468, 3826, 1462, 3828,
        1457, 3831, 1451, 3833, 1445, 3835, 1439, 3837, 1433, 3839, 1427, 3842,
        1421, 3844, 1415, 3846, 1409, 3848, 1404, 3850, 1398, 3852, 1392, 3854,
        1386, 3857, 1380, 3859, 1374, 3861, 1368, 3863, 1362, 3865, 1356, 3867,
        1350, 3869, 1344, 3871, 1338, 3873, 1332, 3875, 1327, 3877, 1321, 3879,
        1315, 3881, 1309, 3883, 1303, 3885, 1297, 3887, 1291, 3889, 1285, 3891,
        1279, 3893, 1273, 3895, 1267, 3897, 1261, 3899, 1255, 3901, 1249, 3903,
        1243, 3905, 1237, 3907, 1231, 3909, 1225, 3910, 1219, 3912, 1213, 3914,
        1207, 3916, 1201, 3918, 1195, 3920, 1189, 3921, 1183, 3923, 1177, 3925,
        1171, 3927, 1165, 3929, 1159, 3930, 1153, 3932, 1147, 3934, 1141, 3936,
        1135, 3937, 1129, 3939, 1123, 3941, 1117, 3943, 1111, 3944, 1105, 3946,
        1099, 3948, 1092, 3949, 1086, 3951, 1080, 3953, 1074, 3954, 1068, 3956,
        1062, 3958, 1056, 3959, 1050, 3961, 1044, 3962, 1038, 3964, 1032, 3965,
        1026, 3967, 1020, 3969, 1014, 3970, 1007, 3972, 1001, 3973, 995, 3975,
        989, 3976, 983, 3978, 977, 3979, 971, 3981, 965, 3982, 959, 3984, 953,
        3985, 946, 3987, 940, 3988, 934, 3989, 928, 3991, 922, 3992, 916, 3994,
        910, 3995, 904, 3996, 897, 3998, 891, 3999, 885, 4001, 879, 4002, 873,
        4003, 867, 4005, 861, 4006, 854, 4007, 848, 4008, 842, 4010, 836, 4011,
        830, 4012, 824, 4014, 818, 4015, 811, 4016, 805, 4017, 799, 4019, 793,
        4020, 787, 4021, 781, 4022, 774, 4023, 768, 4024, 762, 4026, 756, 4027,
        750, 4028, 744, 4029, 737, 4030, 731, 4031, 725, 4032, 719, 4034, 713,
        4035, 706, 4036, 700, 4037, 694, 4038, 688, 4039, 682, 4040, 675, 4041,
        669, 4042, 663, 4043, 657, 4044, 651, 4045, 644, 4046, 638, 4047, 632,
        4048, 626, 4049, 620, 4050, 613, 4051, 607, 4052, 601, 4053, 595, 4053,
        589, 4054, 582, 4055, 576, 4056, 570, 4057, 564, 4058, 557, 4059, 551,
        4060, 545, 4060, 539, 4061, 533, 4062, 526, 4063, 520, 4064, 514, 4064,
        508, 4065, 501, 4066, 495, 4067, 489, 4067, 483, 4068, 476, 4069, 470,
        4070, 464, 4070, 458, 4071, 451, 4072, 445, 4072, 439, 4073, 433, 4074,
        426, 4074, 420, 4075, 414, 4076, 408, 4076, 401, 4077, 395, 4077, 389,
        4078, 383, 4079, 376, 4079, 370, 4080, 364, 4080, 358, 4081, 351, 4081,
        345, 4082, 339, 4082, 333, 4083, 326, 4083, 320, 4084, 314, 4084, 308,
        4085, 301, 4085, 295, 4086, 289, 4086, 283, 4087, 276, 4087, 270, 4088,
        264, 4088, 257, 4088, 251, 4089, 245, 4089, 239, 4089, 232, 4090, 226,
        4090, 220, 4090, 214, 4091, 207, 4091, 201, 4091, 195, 4092, 188, 4092,
        182, 4092, 176, 4092, 170, 4093, 163, 4093, 157, 4093, 151, 4093, 144,
        4094, 138, 4094, 132, 4094, 126, 4094, 119, 4094, 113, 4095, 107, 4095,
        101, 4095, 94, 4095, 88, 4095, 82, 4095, 75, 4095, 69, 4096, 63, 4096,
        57, 4096, 50, 4096, 44, 4096, 38, 4096, 31, 4096, 25, 4096, 19, 4096,
        13, 4096, 6, 4096, 0, 4096, -6, 4096, -13, 4096, -19, 4096, -25, 4096,
        -31, 4096, -38, 4096, -44, 4096, -50, 4096, -57, 4096, -63, 4095, -69,
        4095, -75, 4095, -82, 4095, -88, 4095, -94, 4095, -101, 4095, -107,
        4094, -113, 4094, -119, 4094, -126, 4094, -132, 4094, -138, 4093, -144,
        4093, -151, 4093, -157, 4093, -163, 4092, -170, 4092, -176, 4092, -182,
        4092, -188, 4091, -195, 4091, -201, 4091, -207, 4090, -214, 4090, -220,
        4090, -226, 4089, -232, 4089, -239, 4089, -245, 4088, -251, 4088, -257,
        4088, -264, 4087, -270, 4087, -276, 4086, -283, 4086, -289, 4085, -295,
        4085, -301, 4084, -308, 4084, -314, 4083, -320, 4083, -326, 4082, -333,
        4082, -339, 4081, -345, 4081, -351, 4080, -358, 4080, -364, 4079, -370,
        4079, -376, 4078, -383, 4077, -389, 4077, -395, 4076, -401, 4076, -408,
        4075, -414, 4074, -420, 4074, -426, 4073, -433, 4072, -439, 4072, -445,
        4071, -451, 4070, -458, 4070, -464, 4069, -470, 4068, -476, 4067, -483,
        4067, -489, 4066, -495, 4065, -501, 4064, -508, 4064, -514, 4063, -520,
        4062, -526, 4061, -533, 4060, -539, 4060, -545, 4059, -551, 4058, -557,
        4057, -564, 4056, -570, 4055, -576, 4054, -582, 4053, -589, 4053, -595,
        4052, -601, 4051, -607, 4050, -613, 4049, -620, 4048, -626, 4047, -632,
        4046, -638, 4045, -644, 4044, -651, 4043, -657, 4042, -663, 4041, -669,
        4040, -675, 4039, -682, 4038, -688, 4037, -694, 4036, -700, 4035, -706,
        4034, -713, 4032, -719, 4031, -725, 4030, -731, 4029, -737, 4028, -744,
        4027, -750, 4026, -756, 4024, -762, 4023, -768, 4022, -774, 4021, -781,
        4020, -787, 4019, -793, 4017, -799, 4016, -805, 4015, -811, 4014, -818,
        4012, -824, 4011, -830, 4010, -836, 4008, -842, 4007, -848, 4006, -854,
        4005, -861, 4003, -867, 4002, -873, 4001, -879, 3999, -885, 3998, -891,
        3996, -897, 3995, -904, 3994, -910, 3992, -916, 3991, -922, 3989, -928,
        3988, -934, 3987, -940, 3985, -946, 3984, -953, 3982, -959, 3981, -965,
        3979, -971, 3978, -977, 3976, -983, 3975, -989, 3973, -995, 3972, -1001,
        3970, -1007, 3969, -1014, 3967, -1020, 3965, -1026, 3964, -1032, 3962,
        -1038, 3961, -1044, 3959, -1050, 3958, -1056, 3956, -1062, 3954, -1068,
        3953, -1074, 3951, -1080, 3949, -1086, 3948, -1092, 3946, -1099, 3944,
        -1105, 3943, -1111, 3941, -1117, 3939, -1123, 3937, -1129, 3936, -1135,
        3934, -1141, 3932, -1147, 3930, -1153, 3929, -1159, 3927, -1165, 3925,
        -1171, 3923, -1177, 3921, -1183, 3920, -1189, 3918, -1195, 3916, -1201,
        3914, -1207, 3912, -1213, 3910, -1219, 3909, -1225, 3907, -1231, 3905,
        -1237, 3903, -1243, 3901, -1249, 3899, -1255, 3897, -1261, 3895, -1267,
        3893, -1273, 3891, -1279, 3889, -1285, 3887, -1291, 3885, -1297, 3883,
        -1303, 3881, -1309, 3879, -1315, 3877, -1321, 3875, -1327, 3873, -1332,
        3871, -1338, 3869, -1344, 3867, -1350, 3865, -1356, 3863, -1362, 3861,
        -1368, 3859, -1374, 3857, -1380, 3854, -1386, 3852, -1392, 3850, -1398,
        3848, -1404, 3846, -1409, 3844, -1415, 3842, -1421, 3839, -1427, 3837,
        -1433, 3835, -1439, 3833, -1445, 3831, -1451, 3828, -1457, 3826, -1462,
        3824, -1468, 3822, -1474, 3819, -1480, 3817, -1486, 3815, -1492, 3812,
        -1498, 3810, -1503, 3808, -1509, 3805, -1515, 3803, -1521, 3801, -1527,
        3798, -1533, 3796, -1538, 3794, -1544, 3791, -1550, 3789, -1556, 3787,
        -1562, 3784, -1567, 3782, -1573, 3779, -1579, 3777, -1585, 3775, -1591,
        3772, -1596, 3770, -1602, 3767, -1608, 3765, -1614, 3762, -1620, 3760,
        -1625, 3757, -1631, 3755, -1637, 3752, -1643, 3750, -1648, 3747, -1654,
        3745, -1660, 3742, -1666, 3739, -1671, 3737, -1677, 3734, -1683, 3732,
        -1689, 3729, -1694, 3727, -1700, 3724, -1706, 3721, -1711, 3719, -1717,
        3716, -1723, 3713, -1729, 3711, -1734, 3708, -1740, 3705, -1746, 3703,
        -1751, 3700, -1757, 3697, -1763, 3695, -1768, 3692, -1774, 3689, -1780,
        3686, -1785, 3684, -1791, 3681, -1797, 3678, -1802, 3675, -1808, 3673,
        -1813, 3670, -1819, 3667, -1825, 3664, -1830, 3661, -1836, 3659, -1842,
        3656, -1847, 3653, -1853, 3650, -1858, 3647, -1864, 3644, -1870, 3642,
        -1875, 3639, -1881, 3636, -1886, 3633, -1892, 3630, -1898, 3627, -1903,
        3624, -1909, 3621, -1914, 3618, -1920, 3615, -1925, 3612, -1931, 3609,
        -1936, 3606, -1942, 3603, -1947, 3600, -1953, 3597, -1958, 3594, -1964,
        3591, -1970, 3588, -1975, 3585, -1981, 3582, -1986, 3579, -1992, 3576,
        -1997, 3573, -2002, 3570, -2008, 3567, -2013, 3564, -2019, 3561, -2024,
        3558, -2030, 3555, -2035, 3551, -2041, 3548, -2046, 3545, -2052, 3542,
        -2057, 3539, -2062, 3536, -2068, 3532, -2073, 3529, -2079, 3526, -2084,
        3523, -2090, 3520, -2095, 3516, -2100, 3513, -2106, 3510, -2111, 3507,
        -2117, 3504, -2122, 3500, -2127, 3497, -2133, 3494, -2138, 3490, -2143,
        3487, -2149, 3484, -2154, 3481, -2159, 3477, -2165, 3474, -2170, 3471,
        -2175, 3467, -2181, 3464, -2186, 3461, -2191, 3457, -2197, 3454, -2202,
        3450, -2207, 3447, -2213, 3444, -2218, 3440, -2223, 3437, -2228, 3433,
        -2234, 3430, -2239, 3426, -2244, 3423, -2249, 3420, -2255, 3416, -2260,
        3413, -2265, 3409, -2270, 3406, -2276, 3402, -2281, 3399, -2286, 3395,
        -2291, 3392, -2296, 3388, -2302, 3385, -2307, 3381, -2312, 3378, -2317,
        3374, -2322, 3370, -2328, 3367, -2333, 3363, -2338, 3360, -2343, 3356,
        -2348, 3352, -2353, 3349, -2359, 3345, -2364, 3342, -2369, 3338, -2374,
        3334, -2379, 3331, -2384, 3327, -2389, 3323, -2394, 3320, -2399, 3316,
        -2405, 3312, -2410, 3309, -2415, 3305, -2420, 3301, -2425, 3297, -2430,
        3294, -2435, 3290, -2440, 3286, -2445, 3282, -2450, 3279, -2455, 3275,
        -2460, 3271, -2465, 3267, -2470, 3264, -2475, 3260, -2480, 3256, -2485,
        3252, -2490, 3248, -2495, 3244, -2500, 3241, -2505, 3237, -2510, 3233,
        -2515, 3229, -2520, 3225, -2525, 3221, -2530, 3217, -2535, 3214, -2540,
        3210, -2545, 3206, -2550, 3202, -2555, 3198, -2559, 3194, -2564, 3190,
        -2569, 3186, -2574, 3182, -2579, 3178, -2584, 3174, -2589, 3170, -2594,
        3166, -2598, 3162, -2603, 3158, -2608, 3154, -2613, 3150, -2618, 3146,
        -2623, 3142, -2628, 3138, -2632, 3134, -2637, 3130, -2642, 3126, -2647,
        3122, -2652, 3118, -2656, 3114, -2661, 3110, -2666, 3106, -2671, 3102,
        -2675, 3097, -2680, 3093, -2685, 3089, -2690, 3085, -2694, 3081, -2699,
        3077, -2704, 3073, -2709, 3068, -2713, 3064, -2718, 3060, -2723, 3056,
        -2727, 3052, -2732, 3048, -2737, 3043, -2741, 3039, -2746, 3035, -2751,
        3031, -2755, 3026, -2760, 3022, -2765, 3018, -2769, 3014, -2774, 3009,
        -2779, 3005, -2783, 3001, -2788, 2997, -2792, 2992, -2797, 2988, -2802,
        2984, -2806, 2979, -2811, 2975, -2815, 2971, -2820, 2967, -2824, 2962,
        -2829, 2958, -2833, 2953, -2838, 2949, -2843, 2945, -2847, 2940, -2852,
        2936, -2856, 2932, -2861, 2927, -2865, 2923, -2870, 2918, -2874, 2914,
        -2878, 2910, -2883, 2905, -2887, 2901, -2892, 2896, -2896, 2892, -2901,
        2887, -2905, 2883, -2910, 2878, -2914, 2874, -2918, 2870, -2923, 2865,
        -2927, 2861, -2932, 2856, -2936, 2852, -2940, 2847, -2945, 2843, -2949,
        2838, -2953, 2833, -2958, 2829, -2962, 2824, -2967, 2820, -2971, 2815,
        -2975, 2811, -2979, 2806, -2984, 2802, -2988, 2797, -2992, 2792, -2997,
        2788, -3001, 2783, -3005, 2779, -3009, 2774, -3014, 2769, -3018, 2765,
        -3022, 2760, -3026, 2755, -3031, 2751, -3035, 2746, -3039, 2741, -3043,
        2737, -3048, 2732, -3052, 2727, -3056, 2723, -3060, 2718, -3064, 2713,
        -3068, 2709, -3073, 2704, -3077, 2699, -3081, 2694, -3085, 2690, -3089,
        2685, -3093, 2680, -3097, 2675, -3102, 2671, -3106, 2666, -3110, 2661,
        -3114, 2656, -3118, 2652, -3122, 2647, -3126, 2642, -3130, 2637, -3134,
        2632, -3138, 2628, -3142, 2623, -3146, 2618, -3150, 2613, -3154, 2608,
        -3158, 2603, -3162, 2598, -3166, 2594, -3170, 2589, -3174, 2584, -3178,
        2579, -3182, 2574, -3186, 2569, -3190, 2564, -3194, 2559, -3198, 2555,
        -3202, 2550, -3206, 2545, -3210, 2540, -3214, 2535, -3217, 2530, -3221,
        2525, -3225, 2520, -3229, 2515, -3233, 2510, -3237, 2505, -3241, 2500,
        -3244, 2495, -3248, 2490, -3252, 2485, -3256, 2480, -3260, 2475, -3264,
        2470, -3267, 2465, -3271, 2460, -3275, 2455, -3279, 2450, -3282, 2445,
        -3286, 2440, -3290, 2435, -3294, 2430, -3297, 2425, -3301, 2420, -3305,
        2415, -3309, 2410, -3312, 2405, -3316, 2399, -3320, 2394, -3323, 2389,
        -3327, 2384, -3331, 2379, -3334, 2374, -3338, 2369, -3342, 2364, -3345,
        2359, -3349, 2353, -3352, 2348, -3356, 2343, -3360, 2338, -3363, 2333,
        -3367, 2328, -3370, 2322, -3374, 2317, -3378, 2312, -3381, 2307, -3385,
        2302, -3388, 2296, -3392, 2291, -3395, 2286, -3399, 2281, -3402, 2276,
        -3406, 2270, -3409, 2265, -3413, 2260, -3416, 2255, -3420, 2249, -3423,
        2244, -3426, 2239, -3430, 2234, -3433, 2228, -3437, 2223, -3440, 2218,
        -3444, 2213, -3447, 2207, -3450, 2202, -3454, 2197, -3457, 2191, -3461,
        2186, -3464, 2181, -3467, 2175, -3471, 2170, -3474, 2165, -3477, 2159,
        -3481, 2154, -3484, 2149, -3487, 2143, -3490, 2138, -3494, 2133, -3497,
        2127, -3500, 2122, -3504, 2117, -3507, 2111, -3510, 2106, -3513, 2100,
        -3516, 2095, -3520, 2090, -3523, 2084, -3526, 2079, -3529, 2073, -3532,
        2068, -3536, 2062, -3539, 2057, -3542, 2052, -3545, 2046, -3548, 2041,
        -3551, 2035, -3555, 2030, -3558, 2024, -3561, 2019, -3564, 2013, -3567,
        2008, -3570, 2002, -3573, 1997, -3576, 1992, -3579, 1986, -3582, 1981,
        -3585, 1975, -3588, 1970, -3591, 1964, -3594, 1958, -3597, 1953, -3600,
        1947, -3603, 1942, -3606, 1936, -3609, 1931, -3612, 1925, -3615, 1920,
        -3618, 1914, -3621, 1909, -3624, 1903, -3627, 1898, -3630, 1892, -3633,
        1886, -3636, 1881, -3639, 1875, -3642, 1870, -3644, 1864, -3647, 1858,
        -3650, 1853, -3653, 1847, -3656, 1842, -3659, 1836, -3661, 1830, -3664,
        1825, -3667, 1819, -3670, 1813, -3673, 1808, -3675, 1802, -3678, 1797,
        -3681, 1791, -3684, 1785, -3686, 1780, -3689, 1774, -3692, 1768, -3695,
        1763, -3697, 1757, -3700, 1751, -3703, 1746, -3705, 1740, -3708, 1734,
        -3711, 1729, -3713, 1723, -3716, 1717, -3719, 1711, -3721, 1706, -3724,
        1700, -3727, 1694, -3729, 1689, -3732, 1683, -3734, 1677, -3737, 1671,
        -3739, 1666, -3742, 1660, -3745, 1654, -3747, 1648, -3750, 1643, -3752,
        1637, -3755, 1631, -3757, 1625, -3760, 1620, -3762, 1614, -3765, 1608,
        -3767, 1602, -3770, 1596, -3772, 1591, -3775, 1585, -3777, 1579, -3779,
        1573, -3782, 1567, -3784, 1562, -3787, 1556, -3789, 1550, -3791, 1544,
        -3794, 1538, -3796, 1533, -3798, 1527, -3801, 1521, -3803, 1515, -3805,
        1509, -3808, 1503, -3810, 1498, -3812, 1492, -3815, 1486, -3817, 1480,
        -3819, 1474, -3822, 1468, -3824, 1462, -3826, 1457, -3828, 1451, -3831,
        1445, -3833, 1439, -3835, 1433, -3837, 1427, -3839, 1421, -3842, 1415,
        -3844, 1409, -3846, 1404, -3848, 1398, -3850, 1392, -3852, 1386, -3854,
        1380, -3857, 1374, -3859, 1368, -3861, 1362, -3863, 1356, -3865, 1350,
        -3867, 1344, -3869, 1338, -3871, 1332, -3873, 1327, -3875, 1321, -3877,
        1315, -3879, 1309, -3881, 1303, -3883, 1297, -3885, 1291, -3887, 1285,
        -3889, 1279, -3891, 1273, -3893, 1267, -3895, 1261, -3897, 1255, -3899,
        1249, -3901, 1243, -3903, 1237, -3905, 1231, -3907, 1225, -3909, 1219,
        -3910, 1213, -3912, 1207, -3914, 1201, -3916, 1195, -3918, 1189, -3920,
        1183, -3921, 1177, -3923, 1171, -3925, 1165, -3927, 1159, -3929, 1153,
        -3930, 1147, -3932, 1141, -3934, 1135, -3936, 1129, -3937, 1123, -3939,
        1117, -3941, 1111, -3943, 1105, -3944, 1099, -3946, 1092, -3948, 1086,
        -3949, 1080, -3951, 1074, -3953, 1068, -3954, 1062, -3956, 1056, -3958,
        1050, -3959, 1044, -3961, 1038, -3962, 1032, -3964, 1026, -3965, 1020,
        -3967, 1014, -3969, 1007, -3970, 1001, -3972, 995, -3973, 989, -3975,
        983, -3976, 977, -3978, 971, -3979, 965, -3981, 959, -3982, 953, -3984,
        946, -3985, 940, -3987, 934, -3988, 928, -3989, 922, -3991, 916, -3992,
        910, -3994, 904, -3995, 897, -3996, 891, -3998, 885, -3999, 879, -4001,
        873, -4002, 867, -4003, 861, -4005, 854, -4006, 848, -4007, 842, -4008,
        836, -4010, 830, -4011, 824, -4012, 818, -4014, 811, -4015, 805, -4016,
        799, -4017, 793, -4019, 787, -4020, 781, -4021, 774, -4022, 768, -4023,
        762, -4024, 756, -4026, 750, -4027, 744, -4028, 737, -4029, 731, -4030,
        725, -4031, 719, -4032, 713, -4034, 706, -4035, 700, -4036, 694, -4037,
        688, -4038, 682, -4039, 675, -4040, 669, -4041, 663, -4042, 657, -4043,
        651, -4044, 644, -4045, 638, -4046, 632, -4047, 626, -4048, 620, -4049,
        613, -4050, 607, -4051, 601, -4052, 595, -4053, 589, -4053, 582, -4054,
        576, -4055, 570, -4056, 564, -4057, 557, -4058, 551, -4059, 545, -4060,
        539, -4060, 533, -4061, 526, -4062, 520, -4063, 514, -4064, 508, -4064,
        501, -4065, 495, -4066, 489, -4067, 483, -4067, 476, -4068, 470, -4069,
        464, -4070, 458, -4070, 451, -4071, 445, -4072, 439, -4072, 433, -4073,
        426, -4074, 420, -4074, 414, -4075, 408, -4076, 401, -4076, 395, -4077,
        389, -4077, 383, -4078, 376, -4079, 370, -4079, 364, -4080, 358, -4080,
        351, -4081, 345, -4081, 339, -4082, 333, -4082, 326, -4083, 320, -4083,
        314, -4084, 308, -4084, 301, -4085, 295, -4085, 289, -4086, 283, -4086,
        276, -4087, 270, -4087, 264, -4088, 257, -4088, 251, -4088, 245, -4089,
        239, -4089, 232, -4089, 226, -4090, 220, -4090, 214, -4090, 207, -4091,
        201, -4091, 195, -4091, 188, -4092, 182, -4092, 176, -4092, 170, -4092,
        163, -4093, 157, -4093, 151, -4093, 144, -4093, 138, -4094, 132, -4094,
        126, -4094, 119, -4094, 113, -4094, 107, -4095, 101, -4095, 94, -4095,
        88, -4095, 82, -4095, 75, -4095, 69, -4095, 63, -4096, 57, -4096, 50,
        -4096, 44, -4096, 38, -4096, 31, -4096, 25, -4096, 19, -4096, 13,
        -4096, 6, -4096, 0, -4096, -6, -4096, -13, -4096, -19, -4096, -25, -4096,
        -31, -4096, -38, -4096, -44, -4096, -50, -4096, -57, -4096, -63, -4096,
        -69, -4095, -75, -4095, -82, -4095, -88, -4095, -94, -4095, -101, -4095,
        -107, -4095, -113, -4094, -119, -4094, -126, -4094, -132, -4094, -138,
        -4094, -144, -4093, -151, -4093, -157, -4093, -163, -4093, -170, -4092,
        -176, -4092, -182, -4092, -188, -4092, -195, -4091, -201, -4091, -207,
        -4091, -214, -4090, -220, -4090, -226, -4090, -232, -4089, -239, -4089,
        -245, -4089, -251, -4088, -257, -4088, -264, -4088, -270, -4087, -276,
        -4087, -283, -4086, -289, -4086, -295, -4085, -301, -4085, -308, -4084,
        -314, -4084, -320, -4083, -326, -4083, -333, -4082, -339, -4082, -345,
        -4081, -351, -4081, -358, -4080, -364, -4080, -370, -4079, -376, -4079,
        -383, -4078, -389, -4077, -395, -4077, -401, -4076, -408, -4076, -414,
        -4075, -420, -4074, -426, -4074, -433, -4073, -439, -4072, -445, -4072,
        -451, -4071, -458, -4070, -464, -4070, -470, -4069, -476, -4068, -483,
        -4067, -489, -4067, -495, -4066, -501, -4065, -508, -4064, -514, -4064,
        -520, -4063, -526, -4062, -533, -4061, -539, -4060, -545, -4060, -551,
        -4059, -557, -4058, -564, -4057, -570, -4056, -576, -4055, -582, -4054,
        -589, -4053, -595, -4053, -601, -4052, -607, -4051, -613, -4050, -620,
        -4049, -626, -4048, -632, -4047, -638, -4046, -644, -4045, -651, -4044,
        -657, -4043, -663, -4042, -669, -4041, -675, -4040, -682, -4039, -688,
        -4038, -694, -4037, -700, -4036, -706, -4035, -713, -4034, -719, -4032,
        -725, -4031, -731, -4030, -737, -4029, -744, -4028, -750, -4027, -756,
        -4026, -762, -4024, -768, -4023, -774, -4022, -781, -4021, -787, -4020,
        -793, -4019, -799, -4017, -805, -4016, -811, -4015, -818, -4014, -824,
        -4012, -830, -4011, -836, -4010, -842, -4008, -848, -4007, -854, -4006,
        -861, -4005, -867, -4003, -873, -4002, -879, -4001, -885, -3999, -891,
        -3998, -897, -3996, -904, -3995, -910, -3994, -916, -3992, -922, -3991,
        -928, -3989, -934, -3988, -940, -3987, -946, -3985, -953, -3984, -959,
        -3982, -965, -3981, -971, -3979, -977, -3978, -983, -3976, -989, -3975,
        -995, -3973, -1001, -3972, -1007, -3970, -1014, -3969, -1020, -3967,
        -1026, -3965, -1032, -3964, -1038, -3962, -1044, -3961, -1050, -3959,
        -1056, -3958, -1062, -3956, -1068, -3954, -1074, -3953, -1080, -3951,
        -1086, -3949, -1092, -3948, -1099, -3946, -1105, -3944, -1111, -3943,
        -1117, -3941, -1123, -3939, -1129, -3937, -1135, -3936, -1141, -3934,
        -1147, -3932, -1153, -3930, -1159, -3929, -1165, -3927, -1171, -3925,
        -1177, -3923, -1183, -3921, -1189, -3920, -1195, -3918, -1201, -3916,
        -1207, -3914, -1213, -3912, -1219, -3910, -1225, -3909, -1231, -3907,
        -1237, -3905, -1243, -3903, -1249, -3901, -1255, -3899, -1261, -3897,
        -1267, -3895, -1273, -3893, -1279, -3891, -1285, -3889, -1291, -3887,
        -1297, -3885, -1303, -3883, -1309, -3881, -1315, -3879, -1321, -3877,
        -1327, -3875, -1332, -3873, -1338, -3871, -1344, -3869, -1350, -3867,
        -1356, -3865, -1362, -3863, -1368, -3861, -1374, -3859, -1380, -3857,
        -1386, -3854, -1392, -3852, -1398, -3850, -1404, -3848, -1409, -3846,
        -1415, -3844, -1421, -3842, -1427, -3839, -1433, -3837, -1439, -3835,
        -1445, -3833, -1451, -3831, -1457, -3828, -1462, -3826, -1468, -3824,
        -1474, -3822, -1480, -3819, -1486, -3817, -1492, -3815, -1498, -3812,
        -1503, -3810, -1509, -3808, -1515, -3805, -1521, -3803, -1527, -3801,
        -1533, -3798, -1538, -3796, -1544, -3794, -1550, -3791, -1556, -3789,
        -1562, -3787, -1567, -3784, -1573, -3782, -1579, -3779, -1585, -3777,
        -1591, -3775, -1596, -3772, -1602, -3770, -1608, -3767, -1614, -3765,
        -1620, -3762, -1625, -3760, -1631, -3757, -1637, -3755, -1643, -3752,
        -1648, -3750, -1654, -3747, -1660, -3745, -1666, -3742, -1671, -3739,
        -1677, -3737, -1683, -3734, -1689, -3732, -1694, -3729, -1700, -3727,
        -1706, -3724, -1711, -3721, -1717, -3719, -1723, -3716, -1729, -3713,
        -1734, -3711, -1740, -3708, -1746, -3705, -1751, -3703, -1757, -3700,
        -1763, -3697, -1768, -3695, -1774, -3692, -1780, -3689, -1785, -3686,
        -1791, -3684, -1797, -3681, -1802, -3678, -1808, -3675, -1813, -3673,
        -1819, -3670, -1825, -3667, -1830, -3664, -1836, -3661, -1842, -3659,
        -1847, -3656, -1853, -3653, -1858, -3650, -1864, -3647, -1870, -3644,
        -1875, -3642, -1881, -3639, -1886, -3636, -1892, -3633, -1898, -3630,
        -1903, -3627, -1909, -3624, -1914, -3621, -1920, -3618, -1925, -3615,
        -1931, -3612, -1936, -3609, -1942, -3606, -1947, -3603, -1953, -3600,
        -1958, -3597, -1964, -3594, -1970, -3591, -1975, -3588, -1981, -3585,
        -1986, -3582, -1992, -3579, -1997, -3576, -2002, -3573, -2008, -3570,
        -2013, -3567, -2019, -3564, -2024, -3561, -2030, -3558, -2035, -3555,
        -2041, -3551, -2046, -3548, -2052, -3545, -2057, -3542, -2062, -3539,
        -2068, -3536, -2073, -3532, -2079, -3529, -2084, -3526, -2090, -3523,
        -2095, -3520, -2100, -3516, -2106, -3513, -2111, -3510, -2117, -3507,
        -2122, -3504, -2127, -3500, -2133, -3497, -2138, -3494, -2143, -3490,
        -2149, -3487, -2154, -3484, -2159, -3481, -2165, -3477, -2170, -3474,
        -2175, -3471, -2181, -3467, -2186, -3464, -2191, -3461, -2197, -3457,
        -2202, -3454, -2207, -3450, -2213, -3447, -2218, -3444, -2223, -3440,
        -2228, -3437, -2234, -3433, -2239, -3430, -2244, -3426, -2249, -3423,
        -2255, -3420, -2260, -3416, -2265, -3413, -2270, -3409, -2276, -3406,
        -2281, -3402, -2286, -3399, -2291, -3395, -2296, -3392, -2302, -3388,
        -2307, -3385, -2312, -3381, -2317, -3378, -2322, -3374, -2328, -3370,
        -2333, -3367, -2338, -3363, -2343, -3360, -2348, -3356, -2353, -3352,
        -2359, -3349, -2364, -3345, -2369, -3342, -2374, -3338, -2379, -3334,
        -2384, -3331, -2389, -3327, -2394, -3323, -2399, -3320, -2405, -3316,
        -2410, -3312, -2415, -3309, -2420, -3305, -2425, -3301, -2430, -3297,
        -2435, -3294, -2440, -3290, -2445, -3286, -2450, -3282, -2455, -3279,
        -2460, -3275, -2465, -3271, -2470, -3267, -2475, -3264, -2480, -3260,
        -2485, -3256, -2490, -3252, -2495, -3248, -2500, -3244, -2505, -3241,
        -2510, -3237, -2515, -3233, -2520, -3229, -2525, -3225, -2530, -3221,
        -2535, -3217, -2540, -3214, -2545, -3210, -2550, -3206, -2555, -3202,
        -2559, -3198, -2564, -3194, -2569, -3190, -2574, -3186, -2579, -3182,
        -2584, -3178, -2589, -3174, -2594, -3170, -2598, -3166, -2603, -3162,
        -2608, -3158, -2613, -3154, -2618, -3150, -2623, -3146, -2628, -3142,
        -2632, -3138, -2637, -3134, -2642, -3130, -2647, -3126, -2652, -3122,
        -2656, -3118, -2661, -3114, -2666, -3110, -2671, -3106, -2675, -3102,
        -2680, -3097, -2685, -3093, -2690, -3089, -2694, -3085, -2699, -3081,
        -2704, -3077, -2709, -3073, -2713, -3068, -2718, -3064, -2723, -3060,
        -2727, -3056, -2732, -3052, -2737, -3048, -2741, -3043, -2746, -3039,
        -2751, -3035, -2755, -3031, -2760, -3026, -2765, -3022, -2769, -3018,
        -2774, -3014, -2779, -3009, -2783, -3005, -2788, -3001, -2792, -2997,
        -2797, -2992, -2802, -2988, -2806, -2984, -2811, -2979, -2815, -2975,
        -2820, -2971, -2824, -2967, -2829, -2962, -2833, -2958, -2838, -2953,
        -2843, -2949, -2847, -2945, -2852, -2940, -2856, -2936, -2861, -2932,
        -2865, -2927, -2870, -2923, -2874, -2918, -2878, -2914, -2883, -2910,
        -2887, -2905, -2892, -2901, -2896, -2896, -2901, -2892, -2905, -2887,
        -2910, -2883, -2914, -2878, -2918, -2874, -2923, -2870, -2927, -2865,
        -2932, -2861, -2936, -2856, -2940, -2852, -2945, -2847, -2949, -2843,
        -2953, -2838, -2958, -2833, -2962, -2829, -2967, -2824, -2971, -2820,
        -2975, -2815, -2979, -2811, -2984, -2806, -2988, -2802, -2992, -2797,
        -2997, -2792, -3001, -2788, -3005, -2783, -3009, -2779, -3014, -2774,
        -3018, -2769, -3022, -2765, -3026, -2760, -3031, -2755, -3035, -2751,
        -3039, -2746, -3043, -2741, -3048, -2737, -3052, -2732, -3056, -2727,
        -3060, -2723, -3064, -2718, -3068, -2713, -3073, -2709, -3077, -2704,
        -3081, -2699, -3085, -2694, -3089, -2690, -3093, -2685, -3097, -2680,
        -3102, -2675, -3106, -2671, -3110, -2666, -3114, -2661, -3118, -2656,
        -3122, -2652, -3126, -2647, -3130, -2642, -3134, -2637, -3138, -2632,
        -3142, -2628, -3146, -2623, -3150, -2618, -3154, -2613, -3158, -2608,
        -3162, -2603, -3166, -2598, -3170, -2594, -3174, -2589, -3178, -2584,
        -3182, -2579, -3186, -2574, -3190, -2569, -3194, -2564, -3198, -2559,
        -3202, -2555, -3206, -2550, -3210, -2545, -3214, -2540, -3217, -2535,
        -3221, -2530, -3225, -2525, -3229, -2520, -3233, -2515, -3237, -2510,
        -3241, -2505, -3244, -2500, -3248, -2495, -3252, -2490, -3256, -2485,
        -3260, -2480, -3264, -2475, -3267, -2470, -3271, -2465, -3275, -2460,
        -3279, -2455, -3282, -2450, -3286, -2445, -3290, -2440, -3294, -2435,
        -3297, -2430, -3301, -2425, -3305, -2420, -3309, -2415, -3312, -2410,
        -3316, -2405, -3320, -2399, -3323, -2394, -3327, -2389, -3331, -2384,
        -3334, -2379, -3338, -2374, -3342, -2369, -3345, -2364, -3349, -2359,
        -3352, -2353, -3356, -2348, -3360, -2343, -3363, -2338, -3367, -2333,
        -3370, -2328, -3374, -2322, -3378, -2317, -3381, -2312, -3385, -2307,
        -3388, -2302, -3392, -2296, -3395, -2291, -3399, -2286, -3402, -2281,
        -3406, -2276, -3409, -2270, -3413, -2265, -3416, -2260, -3420, -2255,
        -3423, -2249, -3426, -2244, -3430, -2239, -3433, -2234, -3437, -2228,
        -3440, -2223, -3444, -2218, -3447, -2213, -3450, -2207, -3454, -2202,
        -3457, -2197, -3461, -2191, -3464, -2186, -3467, -2181, -3471, -2175,
        -3474, -2170, -3477, -2165, -3481, -2159, -3484, -2154, -3487, -2149,
        -3490, -2143, -3494, -2138, -3497, -2133, -3500, -2127, -3504, -2122,
        -3507, -2117, -3510, -2111, -3513, -2106, -3516, -2100, -3520, -2095,
        -3523, -2090, -3526, -2084, -3529, -2079, -3532, -2073, -3536, -2068,
        -3539, -2062, -3542, -2057, -3545, -2052, -3548, -2046, -3551, -2041,
        -3555, -2035, -3558, -2030, -3561, -2024, -3564, -2019, -3567, -2013,
        -3570, -2008, -3573, -2002, -3576, -1997, -3579, -1992, -3582, -1986,
        -3585, -1981, -3588, -1975, -3591, -1970, -3594, -1964, -3597, -1958,
        -3600, -1953, -3603, -1947, -3606, -1942, -3609, -1936, -3612, -1931,
        -3615, -1925, -3618, -1920, -3621, -1914, -3624, -1909, -3627, -1903,
        -3630, -1898, -3633, -1892, -3636, -1886, -3639, -1881, -3642, -1875,
        -3644, -1870, -3647, -1864, -3650, -1858, -3653, -1853, -3656, -1847,
        -3659, -1842, -3661, -1836, -3664, -1830, -3667, -1825, -3670, -1819,
        -3673, -1813, -3675, -1808, -3678, -1802, -3681, -1797, -3684, -1791,
        -3686, -1785, -3689, -1780, -3692, -1774, -3695, -1768, -3697, -1763,
        -3700, -1757, -3703, -1751, -3705, -1746, -3708, -1740, -3711, -1734,
        -3713, -1729, -3716, -1723, -3719, -1717, -3721, -1711, -3724, -1706,
        -3727, -1700, -3729, -1694, -3732, -1689, -3734, -1683, -3737, -1677,
        -3739, -1671, -3742, -1666, -3745, -1660, -3747, -1654, -3750, -1648,
        -3752, -1643, -3755, -1637, -3757, -1631, -3760, -1625, -3762, -1620,
        -3765, -1614, -3767, -1608, -3770, -1602, -3772, -1596, -3775, -1591,
        -3777, -1585, -3779, -1579, -3782, -1573, -3784, -1567, -3787, -1562,
        -3789, -1556, -3791, -1550, -3794, -1544, -3796, -1538, -3798, -1533,
        -3801, -1527, -3803, -1521, -3805, -1515, -3808, -1509, -3810, -1503,
        -3812, -1498, -3815, -1492, -3817, -1486, -3819, -1480, -3822, -1474,
        -3824, -1468, -3826, -1462, -3828, -1457, -3831, -1451, -3833, -1445,
        -3835, -1439, -3837, -1433, -3839, -1427, -3842, -1421, -3844, -1415,
        -3846, -1409, -3848, -1404, -3850, -1398, -3852, -1392, -3854, -1386,
        -3857, -1380, -3859, -1374, -3861, -1368, -3863, -1362, -3865, -1356,
        -3867, -1350, -3869, -1344, -3871, -1338, -3873, -1332, -3875, -1327,
        -3877, -1321, -3879, -1315, -3881, -1309, -3883, -1303, -3885, -1297,
        -3887, -1291, -3889, -1285, -3891, -1279, -3893, -1273, -3895, -1267,
        -3897, -1261, -3899, -1255, -3901, -1249, -3903, -1243, -3905, -1237,
        -3907, -1231, -3909, -1225, -3910, -1219, -3912, -1213, -3914, -1207,
        -3916, -1201, -3918, -1195, -3920, -1189, -3921, -1183, -3923, -1177,
        -3925, -1171, -3927, -1165, -3929, -1159, -3930, -1153, -3932, -1147,
        -3934, -1141, -3936, -1135, -3937, -1129, -3939, -1123, -3941, -1117,
        -3943, -1111, -3944, -1105, -3946, -1099, -3948, -1092, -3949, -1086,
        -3951, -1080, -3953, -1074, -3954, -1068, -3956, -1062, -3958, -1056,
        -3959, -1050, -3961, -1044, -3962, -1038, -3964, -1032, -3965, -1026,
        -3967, -1020, -3969, -1014, -3970, -1007, -3972, -1001, -3973, -995,
        -3975, -989, -3976, -983, -3978, -977, -3979, -971, -3981, -965, -3982,
        -959, -3984, -953, -3985, -946, -3987, -940, -3988, -934, -3989, -928,
        -3991, -922, -3992, -916, -3994, -910, -3995, -904, -3996, -897, -3998,
        -891, -3999, -885, -4001, -879, -4002, -873, -4003, -867, -4005, -861,
        -4006, -854, -4007, -848, -4008, -842, -4010, -836, -4011, -830, -4012,
        -824, -4014, -818, -4015, -811, -4016, -805, -4017, -799, -4019, -793,
        -4020, -787, -4021, -781, -4022, -774, -4023, -768, -4024, -762, -4026,
        -756, -4027, -750, -4028, -744, -4029, -737, -4030, -731, -4031, -725,
        -4032, -719, -4034, -713, -4035, -706, -4036, -700, -4037, -694, -4038,
        -688, -4039, -682, -4040, -675, -4041, -669, -4042, -663, -4043, -657,
        -4044, -651, -4045, -644, -4046, -638, -4047, -632, -4048, -626, -4049,
        -620, -4050, -613, -4051, -607, -4052, -601, -4053, -595, -4053, -589,
        -4054, -582, -4055, -576, -4056, -570, -4057, -564, -4058, -557, -4059,
        -551, -4060, -545, -4060, -539, -4061, -533, -4062, -526, -4063, -520,
        -4064, -514, -4064, -508, -4065, -501, -4066, -495, -4067, -489, -4067,
        -483, -4068, -476, -4069, -470, -4070, -464, -4070, -458, -4071, -451,
        -4072, -445, -4072, -439, -4073, -433, -4074, -426, -4074, -420, -4075,
        -414, -4076, -408, -4076, -401, -4077, -395, -4077, -389, -4078, -383,
        -4079, -376, -4079, -370, -4080, -364, -4080, -358, -4081, -351, -4081,
        -345, -4082, -339, -4082, -333, -4083, -326, -4083, -320, -4084, -314,
        -4084, -308, -4085, -301, -4085, -295, -4086, -289, -4086, -283, -4087,
        -276, -4087, -270, -4088, -264, -4088, -257, -4088, -251, -4089, -245,
        -4089, -239, -4089, -232, -4090, -226, -4090, -220, -4090, -214, -4091,
        -207, -4091, -201, -4091, -195, -4092, -188, -4092, -182, -4092, -176,
        -4092, -170, -4093, -163, -4093, -157, -4093, -151, -4093, -144, -4094,
        -138, -4094, -132, -4094, -126, -4094, -119, -4094, -113, -4095, -107,
        -4095, -101, -4095, -94, -4095, -88, -4095, -82, -4095, -75, -4095, -69,
        -4096, -63, -4096, -57, -4096, -50, -4096, -44, -4096, -38, -4096, -31,
        -4096, -25, -4096, -19, -4096, -13, -4096, -6, -4096, 0, -4096, 6, -4096,
        13, -4096, 19, -4096, 25, -4096, 31, -4096, 38, -4096, 44, -4096, 50,
        -4096, 57, -4096, 63, -4095, 69, -4095, 75, -4095, 82, -4095, 88, -4095,
        94, -4095, 101, -4095, 107, -4094, 113, -4094, 119, -4094, 126, -4094,
        132, -4094, 138, -4093, 144, -4093, 151, -4093, 157, -4093, 163, -4092,
        170, -4092, 176, -4092, 182, -4092, 188, -4091, 195, -4091, 201, -4091,
        207, -4090, 214, -4090, 220, -4090, 226, -4089, 232, -4089, 239, -4089,
        245, -4088, 251, -4088, 257, -4088, 264, -4087, 270, -4087, 276, -4086,
        283, -4086, 289, -4085, 295, -4085, 301, -4084, 308, -4084, 314, -4083,
        320, -4083, 326, -4082, 333, -4082, 339, -4081, 345, -4081, 351, -4080,
        358, -4080, 364, -4079, 370, -4079, 376, -4078, 383, -4077, 389, -4077,
        395, -4076, 401, -4076, 408, -4075, 414, -4074, 420, -4074, 426, -4073,
        433, -4072, 439, -4072, 445, -4071, 451, -4070, 458, -4070, 464, -4069,
        470, -4068, 476, -4067, 483, -4067, 489, -4066, 495, -4065, 501, -4064,
        508, -4064, 514, -4063, 520, -4062, 526, -4061, 533, -4060, 539, -4060,
        545, -4059, 551, -4058, 557, -4057, 564, -4056, 570, -4055, 576, -4054,
        582, -4053, 589, -4053, 595, -4052, 601, -4051, 607, -4050, 613, -4049,
        620, -4048, 626, -4047, 632, -4046, 638, -4045, 644, -4044, 651, -4043,
        657, -4042, 663, -4041, 669, -4040, 675, -4039, 682, -4038, 688, -4037,
        694, -4036, 700, -4035, 706, -4034, 713, -4032, 719, -4031, 725, -4030,
        731, -4029, 737, -4028, 744, -4027, 750, -4026, 756, -4024, 762, -4023,
        768, -4022, 774, -4021, 781, -4020, 787, -4019, 793, -4017, 799, -4016,
        805, -4015, 811, -4014, 818, -4012, 824, -4011, 830, -4010, 836, -4008,
        842, -4007, 848, -4006, 854, -4005, 861, -4003, 867, -4002, 873, -4001,
        879, -3999, 885, -3998, 891, -3996, 897, -3995, 904, -3994, 910, -3992,
        916, -3991, 922, -3989, 928, -3988, 934, -3987, 940, -3985, 946, -3984,
        953, -3982, 959, -3981, 965, -3979, 971, -3978, 977, -3976, 983, -3975,
        989, -3973, 995, -3972, 1001, -3970, 1007, -3969, 1014, -3967, 1020,
        -3965, 1026, -3964, 1032, -3962, 1038, -3961, 1044, -3959, 1050, -3958,
        1056, -3956, 1062, -3954, 1068, -3953, 1074, -3951, 1080, -3949, 1086,
        -3948, 1092, -3946, 1099, -3944, 1105, -3943, 1111, -3941, 1117, -3939,
        1123, -3937, 1129, -3936, 1135, -3934, 1141, -3932, 1147, -3930, 1153,
        -3929, 1159, -3927, 1165, -3925, 1171, -3923, 1177, -3921, 1183, -3920,
        1189, -3918, 1195, -3916, 1201, -3914, 1207, -3912, 1213, -3910, 1219,
        -3909, 1225, -3907, 1231, -3905, 1237, -3903, 1243, -3901, 1249, -3899,
        1255, -3897, 1261, -3895, 1267, -3893, 1273, -3891, 1279, -3889, 1285,
        -3887, 1291, -3885, 1297, -3883, 1303, -3881, 1309, -3879, 1315, -3877,
        1321, -3875, 1327, -3873, 1332, -3871, 1338, -3869, 1344, -3867, 1350,
        -3865, 1356, -3863, 1362, -3861, 1368, -3859, 1374, -3857, 1380, -3854,
        1386, -3852, 1392, -3850, 1398, -3848, 1404, -3846, 1409, -3844, 1415,
        -3842, 1421, -3839, 1427, -3837, 1433, -3835, 1439, -3833, 1445, -3831,
        1451, -3828, 1457, -3826, 1462, -3824, 1468, -3822, 1474, -3819, 1480,
        -3817, 1486, -3815, 1492, -3812, 1498, -3810, 1503, -3808, 1509, -3805,
        1515, -3803, 1521, -3801, 1527, -3798, 1533, -3796, 1538, -3794, 1544,
        -3791, 1550, -3789, 1556, -3787, 1562, -3784, 1567, -3782, 1573, -3779,
        1579, -3777, 1585, -3775, 1591, -3772, 1596, -3770, 1602, -3767, 1608,
        -3765, 1614, -3762, 1620, -3760, 1625, -3757, 1631, -3755, 1637, -3752,
        1643, -3750, 1648, -3747, 1654, -3745, 1660, -3742, 1666, -3739, 1671,
        -3737, 1677, -3734, 1683, -3732, 1689, -3729, 1694, -3727, 1700, -3724,
        1706, -3721, 1711, -3719, 1717, -3716, 1723, -3713, 1729, -3711, 1734,
        -3708, 1740, -3705, 1746, -3703, 1751, -3700, 1757, -3697, 1763, -3695,
        1768, -3692, 1774, -3689, 1780, -3686, 1785, -3684, 1791, -3681, 1797,
        -3678, 1802, -3675, 1808, -3673, 1813, -3670, 1819, -3667, 1825, -3664,
        1830, -3661, 1836, -3659, 1842, -3656, 1847, -3653, 1853, -3650, 1858,
        -3647, 1864, -3644, 1870, -3642, 1875, -3639, 1881, -3636, 1886, -3633,
        1892, -3630, 1898, -3627, 1903, -3624, 1909, -3621, 1914, -3618, 1920,
        -3615, 1925, -3612, 1931, -3609, 1936, -3606, 1942, -3603, 1947, -3600,
        1953, -3597, 1958, -3594, 1964, -3591, 1970, -3588, 1975, -3585, 1981,
        -3582, 1986, -3579, 1992, -3576, 1997, -3573, 2002, -3570, 2008, -3567,
        2013, -3564, 2019, -3561, 2024, -3558, 2030, -3555, 2035, -3551, 2041,
        -3548, 2046, -3545, 2052, -3542, 2057, -3539, 2062, -3536, 2068, -3532,
        2073, -3529, 2079, -3526, 2084, -3523, 2090, -3520, 2095, -3516, 2100,
        -3513, 2106, -3510, 2111, -3507, 2117, -3504, 2122, -3500, 2127, -3497,
        2133, -3494, 2138, -3490, 2143, -3487, 2149, -3484, 2154, -3481, 2159,
        -3477, 2165, -3474, 2170, -3471, 2175, -3467, 2181, -3464, 2186, -3461,
        2191, -3457, 2197, -3454, 2202, -3450, 2207, -3447, 2213, -3444, 2218,
        -3440, 2223, -3437, 2228, -3433, 2234, -3430, 2239, -3426, 2244, -3423,
        2249, -3420, 2255, -3416, 2260, -3413, 2265, -3409, 2270, -3406, 2276,
        -3402, 2281, -3399, 2286, -3395, 2291, -3392, 2296, -3388, 2302, -3385,
        2307, -3381, 2312, -3378, 2317, -3374, 2322, -3370, 2328, -3367, 2333,
        -3363, 2338, -3360, 2343, -3356, 2348, -3352, 2353, -3349, 2359, -3345,
        2364, -3342, 2369, -3338, 2374, -3334, 2379, -3331, 2384, -3327, 2389,
        -3323, 2394, -3320, 2399, -3316, 2405, -3312, 2410, -3309, 2415, -3305,
        2420, -3301, 2425, -3297, 2430, -3294, 2435, -3290, 2440, -3286, 2445,
        -3282, 2450, -3279, 2455, -3275, 2460, -3271, 2465, -3267, 2470, -3264,
        2475, -3260, 2480, -3256, 2485, -3252, 2490, -3248, 2495, -3244, 2500,
        -3241, 2505, -3237, 2510, -3233, 2515, -3229, 2520, -3225, 2525, -3221,
        2530, -3217, 2535, -3214, 2540, -3210, 2545, -3206, 2550, -3202, 2555,
        -3198, 2559, -3194, 2564, -3190, 2569, -3186, 2574, -3182, 2579, -3178,
        2584, -3174, 2589, -3170, 2594, -3166, 2598, -3162, 2603, -3158, 2608,
        -3154, 2613, -3150, 2618, -3146, 2623, -3142, 2628, -3138, 2632, -3134,
        2637, -3130, 2642, -3126, 2647, -3122, 2652, -3118, 2656, -3114, 2661,
        -3110, 2666, -3106, 2671, -3102, 2675, -3097, 2680, -3093, 2685, -3089,
        2690, -3085, 2694, -3081, 2699, -3077, 2704, -3073, 2709, -3068, 2713,
        -3064, 2718, -3060, 2723, -3056, 2727, -3052, 2732, -3048, 2737, -3043,
        2741, -3039, 2746, -3035, 2751, -3031, 2755, -3026, 2760, -3022, 2765,
        -3018, 2769, -3014, 2774, -3009, 2779, -3005, 2783, -3001, 2788, -2997,
        2792, -2992, 2797, -2988, 2802, -2984, 2806, -2979, 2811, -2975, 2815,
        -2971, 2820, -2967, 2824, -2962, 2829, -2958, 2833, -2953, 2838, -2949,
        2843, -2945, 2847, -2940, 2852, -2936, 2856, -2932, 2861, -2927, 2865,
        -2923, 2870, -2918, 2874, -2914, 2878, -2910, 2883, -2905, 2887, -2901,
        2892, -2896, 2896, -2892, 2901, -2887, 2905, -2883, 2910, -2878, 2914,
        -2874, 2918, -2870, 2923, -2865, 2927, -2861, 2932, -2856, 2936, -2852,
        2940, -2847, 2945, -2843, 2949, -2838, 2953, -2833, 2958, -2829, 2962,
        -2824, 2967, -2820, 2971, -2815, 2975, -2811, 2979, -2806, 2984, -2802,
        2988, -2797, 2992, -2792, 2997, -2788, 3001, -2783, 3005, -2779, 3009,
        -2774, 3014, -2769, 3018, -2765, 3022, -2760, 3026, -2755, 3031, -2751,
        3035, -2746, 3039, -2741, 3043, -2737, 3048, -2732, 3052, -2727, 3056,
        -2723, 3060, -2718, 3064, -2713, 3068, -2709, 3073, -2704, 3077, -2699,
        3081, -2694, 3085, -2690, 3089, -2685, 3093, -2680, 3097, -2675, 3102,
        -2671, 3106, -2666, 3110, -2661, 3114, -2656, 3118, -2652, 3122, -2647,
        3126, -2642, 3130, -2637, 3134, -2632, 3138, -2628, 3142, -2623, 3146,
        -2618, 3150, -2613, 3154, -2608, 3158, -2603, 3162, -2598, 3166, -2594,
        3170, -2589, 3174, -2584, 3178, -2579, 3182, -2574, 3186, -2569, 3190,
        -2564, 3194, -2559, 3198, -2555, 3202, -2550, 3206, -2545, 3210, -2540,
        3214, -2535, 3217, -2530, 3221, -2525, 3225, -2520, 3229, -2515, 3233,
        -2510, 3237, -2505, 3241, -2500, 3244, -2495, 3248, -2490, 3252, -2485,
        3256, -2480, 3260, -2475, 3264, -2470, 3267, -2465, 3271, -2460, 3275,
        -2455, 3279, -2450, 3282, -2445, 3286, -2440, 3290, -2435, 3294, -2430,
        3297, -2425, 3301, -2420, 3305, -2415, 3309, -2410, 3312, -2405, 3316,
        -2399, 3320, -2394, 3323, -2389, 3327, -2384, 3331, -2379, 3334, -2374,
        3338, -2369, 3342, -2364, 3345, -2359, 3349, -2353, 3352, -2348, 3356,
        -2343, 3360, -2338, 3363, -2333, 3367, -2328, 3370, -2322, 3374, -2317,
        3378, -2312, 3381, -2307, 3385, -2302, 3388, -2296, 3392, -2291, 3395,
        -2286, 3399, -2281, 3402, -2276, 3406, -2270, 3409, -2265, 3413, -2260,
        3416, -2255, 3420, -2249, 3423, -2244, 3426, -2239, 3430, -2234, 3433,
        -2228, 3437, -2223, 3440, -2218, 3444, -2213, 3447, -2207, 3450, -2202,
        3454, -2197, 3457, -2191, 3461, -2186, 3464, -2181, 3467, -2175, 3471,
        -2170, 3474, -2165, 3477, -2159, 3481, -2154, 3484, -2149, 3487, -2143,
        3490, -2138, 3494, -2133, 3497, -2127, 3500, -2122, 3504, -2117, 3507,
        -2111, 3510, -2106, 3513, -2100, 3516, -2095, 3520, -2090, 3523, -2084,
        3526, -2079, 3529, -2073, 3532, -2068, 3536, -2062, 3539, -2057, 3542,
        -2052, 3545, -2046, 3548, -2041, 3551, -2035, 3555, -2030, 3558, -2024,
        3561, -2019, 3564, -2013, 3567, -2008, 3570, -2002, 3573, -1997, 3576,
        -1992, 3579, -1986, 3582, -1981, 3585, -1975, 3588, -1970, 3591, -1964,
        3594, -1958, 3597, -1953, 3600, -1947, 3603, -1942, 3606, -1936, 3609,
        -1931, 3612, -1925, 3615, -1920, 3618, -1914, 3621, -1909, 3624, -1903,
        3627, -1898, 3630, -1892, 3633, -1886, 3636, -1881, 3639, -1875, 3642,
        -1870, 3644, -1864, 3647, -1858, 3650, -1853, 3653, -1847, 3656, -1842,
        3659, -1836, 3661, -1830, 3664, -1825, 3667, -1819, 3670, -1813, 3673,
        -1808, 3675, -1802, 3678, -1797, 3681, -1791, 3684, -1785, 3686, -1780,
        3689, -1774, 3692, -1768, 3695, -1763, 3697, -1757, 3700, -1751, 3703,
        -1746, 3705, -1740, 3708, -1734, 3711, -1729, 3713, -1723, 3716, -1717,
        3719, -1711, 3721, -1706, 3724, -1700, 3727, -1694, 3729, -1689, 3732,
        -1683, 3734, -1677, 3737, -1671, 3739, -1666, 3742, -1660, 3745, -1654,
        3747, -1648, 3750, -1643, 3752, -1637, 3755, -1631, 3757, -1625, 3760,
        -1620, 3762, -1614, 3765, -1608, 3767, -1602, 3770, -1596, 3772, -1591,
        3775, -1585, 3777, -1579, 3779, -1573, 3782, -1567, 3784, -1562, 3787,
        -1556, 3789, -1550, 3791, -1544, 3794, -1538, 3796, -1533, 3798, -1527,
        3801, -1521, 3803, -1515, 3805, -1509, 3808, -1503, 3810, -1498, 3812,
        -1492, 3815, -1486, 3817, -1480, 3819, -1474, 3822, -1468, 3824, -1462,
        3826, -1457, 3828, -1451, 3831, -1445, 3833, -1439, 3835, -1433, 3837,
        -1427, 3839, -1421, 3842, -1415, 3844, -1409, 3846, -1404, 3848, -1398,
        3850, -1392, 3852, -1386, 3854, -1380, 3857, -1374, 3859, -1368, 3861,
        -1362, 3863, -1356, 3865, -1350, 3867, -1344, 3869, -1338, 3871, -1332,
        3873, -1327, 3875, -1321, 3877, -1315, 3879, -1309, 3881, -1303, 3883,
        -1297, 3885, -1291, 3887, -1285, 3889, -1279, 3891, -1273, 3893, -1267,
        3895, -1261, 3897, -1255, 3899, -1249, 3901, -1243, 3903, -1237, 3905,
        -1231, 3907, -1225, 3909, -1219, 3910, -1213, 3912, -1207, 3914, -1201,
        3916, -1195, 3918, -1189, 3920, -1183, 3921, -1177, 3923, -1171, 3925,
        -1165, 3927, -1159, 3929, -1153, 3930, -1147, 3932, -1141, 3934, -1135,
        3936, -1129, 3937, -1123, 3939, -1117, 3941, -1111, 3943, -1105, 3944,
        -1099, 3946, -1092, 3948, -1086, 3949, -1080, 3951, -1074, 3953, -1068,
        3954, -1062, 3956, -1056, 3958, -1050, 3959, -1044, 3961, -1038, 3962,
        -1032, 3964, -1026, 3965, -1020, 3967, -1014, 3969, -1007, 3970, -1001,
        3972, -995, 3973, -989, 3975, -983, 3976, -977, 3978, -971, 3979, -965,
        3981, -959, 3982, -953, 3984, -946, 3985, -940, 3987, -934, 3988, -928,
        3989, -922, 3991, -916, 3992, -910, 3994, -904, 3995, -897, 3996, -891,
        3998, -885, 3999, -879, 4001, -873, 4002, -867, 4003, -861, 4005, -854,
        4006, -848, 4007, -842, 4008, -836, 4010, -830, 4011, -824, 4012, -818,
        4014, -811, 4015, -805, 4016, -799, 4017, -793, 4019, -787, 4020, -781,
        4021, -774, 4022, -768, 4023, -762, 4024, -756, 4026, -750, 4027, -744,
        4028, -737, 4029, -731, 4030, -725, 4031, -719, 4032, -713, 4034, -706,
        4035, -700, 4036, -694, 4037, -688, 4038, -682, 4039, -675, 4040, -669,
        4041, -663, 4042, -657, 4043, -651, 4044, -644, 4045, -638, 4046, -632,
        4047, -626, 4048, -620, 4049, -613, 4050, -607, 4051, -601, 4052, -595,
        4053, -589, 4053, -582, 4054, -576, 4055, -570, 4056, -564, 4057, -557,
        4058, -551, 4059, -545, 4060, -539, 4060, -533, 4061, -526, 4062, -520,
        4063, -514, 4064, -508, 4064, -501, 4065, -495, 4066, -489, 4067, -483,
        4067, -476, 4068, -470, 4069, -464, 4070, -458, 4070, -451, 4071, -445,
        4072, -439, 4072, -433, 4073, -426, 4074, -420, 4074, -414, 4075, -408,
        4076, -401, 4076, -395, 4077, -389, 4077, -383, 4078, -376, 4079, -370,
        4079, -364, 4080, -358, 4080, -351, 4081, -345, 4081, -339, 4082, -333,
        4082, -326, 4083, -320, 4083, -314, 4084, -308, 4084, -301, 4085, -295,
        4085, -289, 4086, -283, 4086, -276, 4087, -270, 4087, -264, 4088, -257,
        4088, -251, 4088, -245, 4089, -239, 4089, -232, 4089, -226, 4090, -220,
        4090, -214, 4090, -207, 4091, -201, 4091, -195, 4091, -188, 4092, -182,
        4092, -176, 4092, -170, 4092, -163, 4093, -157, 4093, -151, 4093, -144,
        4093, -138, 4094, -132, 4094, -126, 4094, -119, 4094, -113, 4094, -107,
        4095, -101, 4095, -94, 4095, -88, 4095, -82, 4095, -75, 4095, -69, 4095,
        -63, 4096, -57, 4096, -50, 4096, -44, 4096, -38, 4096, -31, 4096, -25,
        4096, -19, 4096, -13, 4096, -6, 4096
    };

    public static short[] DAT_69C90 =
    {
        0, 1, 2, 2, 3, 3, 4, 5, 5, 6, 7, 7, 8, 9, 9, 10, 10, 11, 12, 12, 13, 14,
        14, 15, 16, 16, 17, 17, 18, 19, 19, 20, 21, 21, 22, 23, 23, 24, 24, 25,
        26, 26, 27, 28, 28, 29, 30, 30, 31, 31, 32, 33, 33, 34, 35, 35, 36, 36,
        37, 38, 38, 39, 40, 40, 41, 42, 42, 43, 43, 44, 45, 45, 46, 47, 47, 48,
        49, 49, 50, 50, 51, 52, 52, 53, 54, 54, 55, 55, 56, 57, 57, 58, 59, 59,
        60, 61, 61, 62, 62, 63, 64, 64, 65, 66, 66, 67, 67, 68, 69, 69, 70, 71,
        71, 72, 73, 73, 74, 74, 75, 76, 76, 77, 78, 78, 79, 79, 80, 81, 81, 82,
        83, 83, 84, 84, 85, 86, 86, 87, 88, 88, 89, 89, 90, 91, 91, 92, 93, 93,
        94, 94, 95, 96, 96, 97, 98, 98, 99, 99, 100, 101, 101, 102, 103, 103, 104,
        104, 105, 106, 106, 107, 107, 108, 109, 109, 110, 111, 111, 112, 112, 113,
        114, 114, 115, 116, 116, 117, 117, 118, 119, 119, 120, 120, 121, 122, 122,
        123, 124, 124, 125, 125, 126, 127, 127, 128, 128, 129, 130, 130, 131, 131,
        132, 133, 133, 134, 135, 135, 136, 136, 137, 138, 138, 139, 139, 140, 141,
        141, 142, 142, 143, 144, 144, 145, 145, 146, 147, 147, 148, 148, 149, 150,
        150, 151, 152, 152, 153, 153, 154, 155, 155, 156, 156, 157, 158, 158, 159,
        159, 160, 161, 161, 162, 162, 163, 164, 164, 165, 165, 166, 166, 167, 168,
        168, 169, 169, 170, 171, 171, 172, 172, 173, 174, 174, 175, 175, 176, 177,
        177, 178, 178, 179, 180, 180, 181, 181, 182, 182, 183, 184, 184, 185, 185,
        186, 187, 187, 188, 188, 189, 190, 190, 191, 191, 192, 192, 193, 194, 194,
        195, 195, 196, 197, 197, 198, 198, 199, 199, 200, 201, 201, 202, 202, 203,
        203, 204, 205, 205, 206, 206, 207, 207, 208, 209, 209, 210, 210, 211, 211,
        212, 213, 213, 214, 214, 215, 215, 216, 217, 217, 218, 218, 219, 219, 220,
        221, 221, 222, 222, 223, 223, 224, 225, 225, 226, 226, 227, 227, 228, 228,
        229, 230, 230, 231, 231, 232, 232, 233, 234, 234, 235, 235, 236, 236, 237,
        237, 238, 239, 239, 240, 240, 241, 241, 242, 242, 243, 244, 244, 245, 245,
        246, 246, 247, 247, 248, 248, 249, 250, 250, 251, 251, 252, 252, 253, 253,
        254, 254, 255, 256, 256, 257, 257, 258, 258, 259, 259, 260, 260, 261, 262,
        262, 263, 263, 264, 264, 265, 265, 266, 266, 267, 267, 268, 269, 269, 270,
        270, 271, 271, 272, 272, 273, 273, 274, 274, 275, 275, 276, 276, 277, 278,
        278, 279, 279, 280, 280, 281, 281, 282, 282, 283, 283, 284, 284, 285, 285,
        286, 286, 287, 288, 288, 289, 289, 290, 290, 291, 291, 292, 292, 293, 293,
        294, 294, 295, 295, 296, 296, 297, 297, 298, 298, 299, 299, 300, 300, 301,
        301, 302, 302, 303, 303, 304, 304, 305, 305, 306, 307, 307, 308, 308, 309,
        309, 310, 310, 311, 311, 312, 312, 313, 313, 314, 314, 315, 315, 316, 316,
        317, 317, 318, 318, 319, 319, 320, 320, 321, 321, 322, 322, 322, 323, 323,
        324, 324, 325, 325, 326, 326, 327, 327, 328, 328, 329, 329, 330, 330, 331,
        331, 332, 332, 333, 333, 334, 334, 335, 335, 336, 336, 337, 337, 338, 338,
        339, 339, 340, 340, 340, 341, 341, 342, 342, 343, 343, 344, 344, 345, 345,
        346, 346, 347, 347, 348, 348, 349, 349, 349, 350, 350, 351, 351, 352, 352,
        353, 353, 354, 354, 355, 355, 356, 356, 356, 357, 357, 358, 358, 359, 359,
        360, 360, 361, 361, 362, 362, 362, 363, 363, 364, 364, 365, 365, 366, 366,
        367, 367, 368, 368, 368, 369, 369, 370, 370, 371, 371, 372, 372, 372, 373,
        373, 374, 374, 375, 375, 376, 376, 377, 377, 377, 378, 378, 379, 379, 380,
        380, 381, 381, 381, 382, 382, 383, 383, 384, 384, 385, 385, 385, 386, 386,
        387, 387, 388, 388, 388, 389, 389, 390, 390, 391, 391, 391, 392, 392, 393,
        393, 394, 394, 395, 395, 395, 396, 396, 397, 397, 398, 398, 398, 399, 399,
        400, 400, 401, 401, 401, 402, 402, 403, 403, 403, 404, 404, 405, 405, 406,
        406, 406, 407, 407, 408, 408, 409, 409, 409, 410, 410, 411, 411, 411, 412,
        412, 413, 413, 413, 414, 414, 415, 415, 416, 416, 416, 417, 417, 418, 418,
        418, 419, 419, 420, 420, 420, 421, 421, 422, 422, 422, 423, 423, 424, 424,
        425, 425, 425, 426, 426, 427, 427, 427, 428, 428, 429, 429, 429, 430, 430,
        431, 431, 431, 432, 432, 432, 433, 433, 434, 434, 434, 435, 435, 436, 436,
        436, 437, 437, 438, 438, 438, 439, 439, 440, 440, 440, 441, 441, 441, 442,
        442, 443, 443, 443, 444, 444, 445, 445, 445, 446, 446, 446, 447, 447, 448,
        448, 448, 449, 449, 450, 450, 450, 451, 451, 451, 452, 452, 453, 453, 453,
        454, 454, 454, 455, 455, 456, 456, 456, 457, 457, 457, 458, 458, 459, 459,
        459, 460, 460, 460, 461, 461, 461, 462, 462, 463, 463, 463, 464, 464, 464,
        465, 465, 465, 466, 466, 467, 467, 467, 468, 468, 468, 469, 469, 469, 470,
        470, 471, 471, 471, 472, 472, 472, 473, 473, 473, 474, 474, 474, 475, 475,
        476, 476, 476, 477, 477, 477, 478, 478, 478, 479, 479, 479, 480, 480, 480,
        481, 481, 481, 482, 482, 483, 483, 483, 484, 484, 484, 485, 485, 485, 486,
        486, 486, 487, 487, 487, 488, 488, 488, 489, 489, 489, 490, 490, 490, 491,
        491, 491, 492, 492, 492, 493, 493, 493, 494, 494, 494, 495, 495, 495, 496,
        496, 496, 497, 497, 497, 498, 498, 498, 499, 499, 499, 500, 500, 500, 501,
        501, 501, 502, 502, 502, 503, 503, 503, 504, 504, 504, 505, 505, 505, 506,
        506, 506, 507, 507, 507, 508, 508, 508, 509, 509, 509, 510, 510, 510, 511,
        511, 511, 511, 512, 512
    };

    public static uint[,] DAT_637DC = 
        { { 0, 0, 0xA8563412, 0x123800, 0xA8563412, 0xA8563412 }, 
        { 0, 0, 0xA8563412, 0x123800, 0xA8563412, 0xA8563412 } };
    public static uint[,] DAT_637E0 = 
        { { 0, 0, 0xB9C81007, 0x1000, 0xB9C81007, 0xB9C81D07 }, 
        { 0, 0, 0xB9C81007, 0x1000, 0xB9C81007, 0xB9C81D07 } };

    public static Vector3Int[] DAT_63970 = { new Vector3Int(-2048, -1472, 0), new Vector3Int(2048, -1472, 0), new Vector3Int(6144, -1472, 0),
                                             new Vector3Int(-2048, 0, 0), new Vector3Int(2048, 0, 0), new Vector3Int(6144, 0, 0) }; //tmp
    public static byte[] DAT_639A0 = { 0, 4, 1, 4, 2, 4, 3, 4, 0, 1, 0, 2, 1, 3, 2, 3 };
    public static uint[] DAT_639EC = { 0x004c0940, 0x0000530a, 0x00470a80, 0x0000530e, 0x00470940, 0x00076154, 0x018b1140,
                                       0x000052ca, 0x00012ad4, 0x000c5882, 0x00470940, 0x01875954, 0x00470940, 0x01875954,
                                       0x004702d4, 0x00005b0e, 0x00470940, 0x01875954, 0x018b3844, 0x000b5040, 0x00470940,
                                       0x01875954, 0x014559d8, 0x00072880, 0x00470940, 0x01875954, 0x00470940, 0x01875954,
                                       0x00470940, 0x01875954 };

    public static uint DAT_63A64 = 0x31415926;
    public static uint DAT_63A68 = 0;
    public static uint[] DAT_63A6C = { 0x02000000, 0x04000000, 0x08000000, 0x10000000 };
    public static byte[] DAT_63A7C = { 90, 89, 91, 91 };

    /*public static _VEHICLE_INIT[] DAT_63DE0 = new _VEHICLE_INIT[]
    {
        new _VEHICLE_INIT(LoadWonderwagon),
        new _VEHICLE_INIT(LoadThunderbolt),
        new _VEHICLE_INIT(LoadDakota),
        new _VEHICLE_INIT(LoadSamson),
        new _VEHICLE_INIT(LoadLivingston),
        new _VEHICLE_INIT(LoadXanadu),
        new _VEHICLE_INIT(LoadPalomino),
        new _VEHICLE_INIT(LoadGuerrero),
        new _VEHICLE_INIT(LoadBurro),
        new _VEHICLE_INIT(LoadExcelsior),
        new _VEHICLE_INIT(LoadTsunami),
        new _VEHICLE_INIT(LoadMarathon),
        new _VEHICLE_INIT(LoadTrekker),
        new _VEHICLE_INIT(LoadLoader),
        new _VEHICLE_INIT(LoadStinger),
        new _VEHICLE_INIT(LoadVertigo),
        new _VEHICLE_INIT(LoadGoliath),
        new _VEHICLE_INIT(LoadWapiti)
    };*/

    public static short[] DAT_63F58 = { 16, 17, 18, 19 };
    public static byte[] DAT_63F60 = { 0, 0, 0, 0, 1, 1, 2, 3 };
    public static ushort[] DAT_63F68 = { 2048, 0, 2048, 819, 655 };
    public static ushort[] DAT_63F74 = { 0, 0, 0, 0, 0, 0, 56, 72, 56, 72, 56, 72, 63, 70, 59, 77, 63, 70, 67, 81, 65, 75, 65, 75 };

    public static short[] DAT_63FA4 = { 9, 3, 4, 2, 0, 7, 8, 12, 10, 11, 14, 13, 15, 6, 20, 21, 22, 23 };
    public static int[] DAT_63FC8 = { 211, 212, 213 };

    public static short[] DAT_63FE4 = { 39, -1, -1, -1, -1, -1, 33, 35, -1, -1, -1, 36, -1, -1, -1, -1,
                                        37, 38, -1, -1, -1, -1, -1, -1, -1, -1, 42, 44, 43, 45, -1, -1,
                                        -1, -1, -1, -1, 13, 20, -1, -1, -1, -1, -1, -1, -1, -1, 138,
                                        136, -1, -1, -1, -1, -1, -1, -1, -1, 29, 25, 31, 27 };
    public static short[] DAT_6405C = { 116, 123, -1, -1, -1, -1, -1, -1, -1, -1, 49, 48, 50, 47, -1,
                                        -1, -1, -1, -1, -1 };
    public static short[] DAT_64084 = { 53, 55, 57, 53, -1, -1, -1, -1, 59, -1, -1, -1, -1, -1, -1,
                                        -1, -1, -1, 79, 81 };
    public static int[] DAT_640C8 = { 24, 12, 8, 0 };
    public static Color32[] DAT_640AC = { new Color32(0x80, 0x80, 0x80, 8), new Color32(0x80, 0x80, 0x00, 8),
                                          new Color32(0xb4, 0x80, 0x50, 8), new Color32(0x80, 0x00, 0x00, 8),
                                          new Color32(0x80, 0x00, 0x80, 8), new Color32(0x1e, 0x80, 0xc8, 8),
                                          new Color32(0x00, 0x80, 0x00, 8) };

    //0x80063A80
    public static VehicleData[] vehicleConfigs =
    {
        new VehicleData //tmp
        {
            DAT_00 = new short[6] { 16, 12, 48, 152, 64, 128 },
            DAT_0C=12,
            vehicleID=_VEHICLE.Wonderwagon,
            DAT_0E=16,
            DAT_0F=-6,
            DAT_10=22,
            DAT_11=38,
            DAT_12=67,
            DAT_13=112,
            DAT_15=28,
            maxHalfHealth=683,
            lightness=5103,
            DAT_24=new Vector3Int(64, 64, 64),
            DAT_2A=0x1800,
            DAT_2C=new byte[4] { 174, 88, 43, 155 }
        },
        new VehicleData
        {
            DAT_00 = new short[6] { 4, 8, 48, 56, 92, 92 },
            DAT_0C=12,
            vehicleID=_VEHICLE.Thunderbolt,
            DAT_0E=18,
            DAT_0F=-2,
            DAT_10=19,
            DAT_11=32,
            DAT_12=57,
            DAT_13=148,
            DAT_15=50,
            maxHalfHealth=903,
            lightness=4206,
            DAT_24=new Vector3Int(64, 64, 64),
            DAT_2A=0x2999,
            DAT_2C=new byte[4] { 200, 172, 91, 52 }
        },
        new VehicleData
        {
            DAT_00 = new short[6] { 0, 0, 156, 156, 255, 255 },
            DAT_0C=12,
            vehicleID=_VEHICLE.DakotaCycle,
            DAT_0E=40,
            DAT_0F=-2,
            DAT_10=25,
            DAT_11=32,
            DAT_12=64,
            DAT_13=112,
            DAT_15=24,
            maxHalfHealth=1200,
            lightness=4323,
            DAT_24=new Vector3Int(64, 64, 64),
            DAT_2A=0x800,
            DAT_2C=new byte[4] { 168, 102, 25, 174 }
        },
        new VehicleData
        {
            DAT_00=new short[6] { 8, 8, 64, 64, 92, 92 },
            DAT_0C=15,
            vehicleID=_VEHICLE.SamsonTow,
            DAT_0E=9,
            DAT_0F=-2,
            DAT_10=48,
            DAT_11=67,
            DAT_12=131,
            DAT_13=44,
            DAT_15=49,
            maxHalfHealth=1069,
            lightness=3705,
            DAT_24=new Vector3Int(64, 64, 64),
            DAT_2A=0x3266,
            DAT_2C=new byte[4] { 155, 102, 128, 55 }
        },
        new VehicleData
        {
            DAT_00=new short[7] { 24, 28, 40, 40, 32, 32, 1039 }, 
            DAT_0C=15, 
            vehicleID=_VEHICLE.Livingston, 
            DAT_0E=4, 
            DAT_0F=-1, 
            DAT_10=57, 
            DAT_11=73, 
            DAT_12=147, 
            DAT_13=20, 
            DAT_15=55, 
            maxHalfHealth=1400, 
            lightness=2061, 
            DAT_24=new Vector3Int(64, 64, 64), 
            DAT_2A=0x4800, 
            DAT_2C=new byte[4] { 25, 74, 200, 31 }
        },
        new VehicleData
        {
            DAT_00=new short[6] { 0, 0, 40, 40, 92, 40 },
            DAT_0C=3, 
            vehicleID=_VEHICLE.Xanadu, 
            DAT_0E=1, 
            DAT_0F=0, 
            DAT_10=32, 
            DAT_11=38, 
            DAT_12=70, 
            DAT_13=34, 
            DAT_15=46, 
            maxHalfHealth=1179, 
            lightness=1541,
            DAT_24=new Vector3Int(64, 64, 64), 
            DAT_2A=0x3800,
            DAT_2C=new byte[4] { 57, 88, 152, 71 }
        },
        new VehicleData //tmp
        {
            DAT_00 = new short[6] { 0, 0, 28, 28, 16, 28 },
            DAT_0C=15,
            vehicleID=_VEHICLE.Palomino,
            DAT_0E=6,
            DAT_0F=-2,
            DAT_10=41,
            DAT_11=67,
            DAT_12=124,
            DAT_13=58,
            DAT_15=54,
            maxHalfHealth=1014,
            lightness=3537,
            DAT_24=new Vector3Int(64, 64, 64),
            DAT_2A=0x3000,
            DAT_2C=new byte[4] { 181, 158, 116, 36 }
        },
        new VehicleData
        {
            DAT_00=new short[6] { 20, 40, 56, 64, 128, 96 },
            DAT_0C=12,
            vehicleID=_VEHICLE.ElGuerrero,
            DAT_0E=8,
            DAT_0F=-3,
            DAT_10=22,
            DAT_11=35,
            DAT_12=67,
            DAT_13=101,
            DAT_15=47,
            maxHalfHealth=959,
            lightness=3940,
            DAT_24=new Vector3Int(64, 64, 64),
            DAT_2A=0x2C00,
            DAT_2C=new byte[4] { 168, 130, 103, 68 }
        },
        new VehicleData
        {
            DAT_00=new short[7]{ 32, 32, 40, 40, 48, 48, 0x803 }, //game stores 7th element for a wheel?
            DAT_0C=3,
            vehicleID=_VEHICLE.BlueBurro,
            DAT_0E=0,
            DAT_0F=0,
            DAT_10=28,
            DAT_11=38,
            DAT_12=80,
            DAT_13=34,
            DAT_15=49,
            maxHalfHealth=1290,
            lightness=1945,
            DAT_24=new Vector3Int(64, 64, 64),
            DAT_2A=0x4000,
            DAT_2C=new byte[4]{ 64, 46, 176, 56 }
        },
        new VehicleData
        {
            DAT_00=new short[6] { 20, 20, 64, 64, 128, 128 },
            DAT_0C=3,
            vehicleID=_VEHICLE.Excelsior,
            DAT_0E=0,
            DAT_0F=0,
            DAT_10=22,
            DAT_11=35,
            DAT_12=64,
            DAT_13=72,
            DAT_15=53,
            maxHalfHealth=1124,
            lightness=2754,
            DAT_24=new Vector3Int(64, 64, 64),
            DAT_2A=0x34CC,
            DAT_2C=new byte[4]{ 135, 130, 140, 37 }
        },
        new VehicleData
        {
            DAT_00=new short[6] { 0, 0, 72, 96, 96, 160 }, 
            DAT_0C=15, 
            vehicleID=_VEHICLE.Tsunami, 
            DAT_0E=12, 
            DAT_0F=-2, 
            DAT_10=22, 
            DAT_11=54, 
            DAT_12=99, 
            DAT_13=186, 
            DAT_15=37, 
            maxHalfHealth=628, 
            lightness=3705, 
            DAT_24=new Vector3Int(64, 64, 64), 
            DAT_2A=0xC00, 
            DAT_2C=new byte[4] { 200, 200, 31, 114 }
        },
        new VehicleData
        {
            DAT_00=new short[6] { 36, 36, 90, 90, 200, 200 }, 
            DAT_0C=3, 
            vehicleID=_VEHICLE.Marathon, 
            DAT_0E=8, 
            DAT_0F=-4, 
            DAT_10=6, 
            DAT_11=12, 
            DAT_12=25, 
            DAT_13=191, 
            DAT_15=18, 
            maxHalfHealth=655, 
            lightness=3176, 
            DAT_24=new Vector3Int(64, 64, 64), 
            DAT_2A=0x1000, 
            DAT_2C=new byte[4] { 109, 60, 37, 200 }
        },
        new VehicleData
        {
            DAT_00=new short[7]{ 0, 0, 24, 32, 72, 72, 3327 }, //game stores 7th element for a wheel?
            DAT_0C=255,
            vehicleID=_VEHICLE.Trekker,
            DAT_0E=0,
            DAT_0F=0,
            DAT_10=38,
            DAT_11=60,
            DAT_12=115,
            DAT_13=58,
            DAT_15=28,
            maxHalfHealth=793,
            lightness=5764,
            DAT_24=new Vector3Int(64, 64, 64),
            DAT_2A=0x2666,
            DAT_2C=new byte[4]{ 161, 32, 67, 154 }
        },
        new VehicleData //tmp
        {
            DAT_00=new short[7]{ 24, 28, 32, 32, 16, 16, 0xD03 }, //game stores 7th element for a wheel?
            DAT_0C=3,
            vehicleID=_VEHICLE.Loader,
            DAT_0E=0,
            DAT_0F=0,
            DAT_10=22,
            DAT_11=38,
            DAT_12=67,
            DAT_13=48,
            DAT_15=53,
            maxHalfHealth=1345,
            lightness=2936,
            DAT_24=new Vector3Int(64, 64, 64),
            DAT_2A=0x4400,
            DAT_2C=new byte[4]{ 90, 25, 188, 39 }
        },
        new VehicleData
        {
            DAT_00=new short[6] { 48, 44, 64, 64, 200, 200 },
            DAT_0C=12,
            vehicleID=_VEHICLE.Stinger,
            DAT_0E=16,
            DAT_0F=-1,
            DAT_10=12,
            DAT_11=22,
            DAT_12=44,
            DAT_13=186,
            DAT_15=37,
            maxHalfHealth=710,
            lightness=3891,
            DAT_24=new Vector3Int(64, 64, 64),
            DAT_2A=0x1CCC,
            DAT_2C=new byte[4] { 187, 165, 49, 112 }
        },
        new VehicleData
        {
            DAT_00=new short[6] { 48, 48, 88, 88, 224, 224 },
            DAT_0C=12,
            vehicleID=_VEHICLE.Vertigo,
            DAT_0E=24,
            DAT_0F=-3,
            DAT_10=16,
            DAT_11=25,
            DAT_12=51,
            DAT_13=158,
            DAT_15=41,
            maxHalfHealth=738,
            lightness=3705, 
            DAT_24=new Vector3Int(64, 64, 64), 
            DAT_2A=0x2400, 
            DAT_2C=new byte[4] { 194, 186, 55, 93 }
        },
        new VehicleData
        {
            DAT_00=new short[6] { 0, 0, 72, 64, 160, 200 }, 
            DAT_0C=15, 
            vehicleID=_VEHICLE.Goliath, 
            DAT_0E=6, 
            DAT_0F=-1, 
            DAT_10=48, 
            DAT_11=67, 
            DAT_12=131, 
            DAT_13=49, 
            DAT_15=56, 
            maxHalfHealth=1234, 
            lightness=4716, 
            DAT_24=new Vector3Int(64, 64, 64), 
            DAT_2A=0x3C00, 
            DAT_2C=new byte[4] { 161, 60, 164, 25 }
        },
        new VehicleData
        {
            DAT_00=new short[6] { 52, 52, 64, 64, 128, 128 }, 
            DAT_0C=15, 
            vehicleID=_VEHICLE.Wapiti, 
            DAT_0E=8, 
            DAT_0F=-1, 
            DAT_10=38, 
            DAT_11=57, 
            DAT_12=112, 
            DAT_13=65, 
            DAT_15=80, 
            maxHalfHealth=848, 
            lightness=4511, 
            DAT_24=new Vector3Int(64, 64, 64), 
            DAT_2A=0x2800, 
            DAT_2C=new byte[4] { 187, 116, 79, 95 }
        },
    };
    
    public struct TerrainJob : IJob
    {
        public NativeArray<Vector2Int> param1;
        public int param2;

        //FUN_1BECC
        public void Execute()
        {
            int piVar1;
            int iVar2;
            int iVar3;
            int iVar4;
            int piVar5;
            int iVar6;
            int in_t0;
            int in_t1;
            int iVar7;
            bool unaff_s0;
            int iVar8;
            int piVar9;
            int unaff_s4;
            int unaff_s5;
            int iVar10;
            int iVar11;
            int iVar12;
            int index = 0;

            iVar8 = 0;
            iVar11 = 0;
            iVar10 = param1[0].x;
            iVar2 = param1[0].y;

            if (iVar2 < 0)
                iVar2 += 1023;

            iVar7 = (iVar2 >> 10) << 2;
            iVar2 = (iVar2 >> 10) * 1024;
            piVar9 = 0;
            iVar12 = iVar10;
            unaff_s0 = false; //not in the original code
            unaff_s4 = 0; //not in the original code
            unaff_s5 = 0; //not in the original code
            in_t0 = 0; //not in the original code
            in_t1 = 0; //not in the original code

            do
            {
                iVar2 += 1024;
                iVar3 = param1[iVar8].y;
                iVar4 = iVar12;

                do
                {
                    if (iVar2 <= iVar3) break;

                    unaff_s4 = param1[iVar8].x;
                    in_t0 = param1[iVar8].y;

                    if (unaff_s4 < iVar4)
                        iVar4 = unaff_s4;

                    if (iVar8 == 0)
                        iVar8 = param2;

                    iVar8--;
                    iVar3 = param1[iVar8].y;
                    unaff_s0 = iVar3 < in_t0;
                } while (!unaff_s0);

                if (in_t0 == 0 || unaff_s4 == 0)
                    Debug.Log("!");

                iVar3 = iVar10;

                if (param1[piVar9].y < iVar2)
                {
                    piVar5 = iVar11;

                    do
                    {
                        unaff_s5 = param1[piVar5].x;
                        in_t1 = param1[piVar5].y;

                        if (iVar3 < unaff_s5)
                            iVar3 = unaff_s5;

                        piVar9++;
                        iVar11++;
                        unaff_s0 = false;

                        if (iVar11 == param2 || param1[piVar5 + 1].y < in_t1) //other way around in original code
                            unaff_s0 = true;

                        if (unaff_s0) goto LAB_1C0A4;

                        piVar1 = piVar5 + 1;
                        piVar5++;
                    } while (param1[piVar1].y < iVar2);
                }

                if (in_t1 == 0 || unaff_s5 == 0)
                    Debug.Log("!");

                if (!unaff_s0)
                {
                    iVar12 = unaff_s4 +
                            (param1[iVar8].x - unaff_s4) * (iVar2 - in_t0) /
                            (param1[iVar8].y - in_t0);
                    iVar10 = unaff_s5 + (param1[piVar9].x - unaff_s5) * (iVar2 - in_t1) / (param1[piVar9].y - in_t1);

                    if (iVar12 < iVar4)
                        iVar4 = iVar12;

                    if (iVar3 < iVar10)
                        iVar3 = iVar10;
                }

                LAB_1C0A4:
                iVar6 = iVar3 + 1023;

                if (iVar4 < 0)
                    iVar4 += 1023;

                if (iVar6 < 0)
                    iVar6 = iVar3 + 2046;

                VigTerrain.FUN_1BE68((iVar4 >> 10) << 2, (iVar6 >> 10) << 2, iVar7);

                iVar7 += 4;

                if (unaff_s0)
                    return;
            } while (true);
        }
    }

    public static Color32[] DAT_1f800000 = new Color32[32];
    public static HitDetection hit;
    public static int DAT_1f800080;
    public static Vector3Int DAT_1f800084;
    public static short DAT_1f800094;
    public static short DAT_1f800096;
    public static short DAT_1f800098;
    public static short DAT_1f80009a;
    public static TerrainScreen[] terrainScreen = new TerrainScreen[40];
    /*public static int DAT_1f80009c;
    public static int DAT_1f8000a0;
    public static uint DAT_1f8000a4;
    public static Color32 DAT_1f8000a8;
    public static int DAT_1f8000c0;
    public static uint DAT_1f8000c4;
    public static Color32 DAT_1f8000c8;
    public static int DAT_1f8000dc;
    public static int DAT_1f8000e0;
    public static uint DAT_1f8000e4;
    public static Color32 DAT_1f8000e8;
    public static int DAT_1f800140;
    public static uint DAT_1f800144;
    public static Color32 DAT_1f800148;
    public static int DAT_1f800160;
    public static uint DAT_1f800164;
    public static Color32 DAT_1f800168;
    public static int DAT_1f800180;
    public static uint DAT_1f800184;
    public static Color32 DAT_1f800188;
    public static int DAT_1f8001dc;
    public static int DAT_1f8001e0;
    public static uint DAT_1f8001e4;
    public static Color32 DAT_1f8001e8;
    public static int DAT_1f800200;
    public static uint DAT_1f800204;
    public static Color32 DAT_1f800208;
    public static int DAT_1f80021c;
    public static int DAT_1f800220;
    public static uint DAT_1f800224;
    public static Color32 DAT_1f800228;*/

    //DAT_1F801C00
    public static AudioSource[] voices = new AudioSource[24];

    //gp+718h
    public static Matrix3x3 DAT_718 = new Matrix3x3()
    {
        V00 = 0x1000,
        V01 = 0,
        V02 = 0,
        V10 = 0,
        V11 = 0,
        V12 = 0,
        V20 = 0,
        V21 = 0,
        V22 = 0
    };
    public static byte[] DAT_854 = { 12, 32, 20, 32, 12, 24, 12, 24, 16, 28, 12, 28, 24, 24, 0, 24 };
    //gp+878h
    public static VigTransform defaultTransform = new VigTransform
    {
        rotation = new Matrix3x3
        {
            V00 = 0x1000,
            V01 = 0,
            V02 = 0,
            V10 = 0,
            V11 = 0x1000,
            V12 = 0,
            V20 = 0,
            V21 = 0,
            V22 = 0x1000
        },
        position = new Vector3Int(0, 0, 0)
    };
    public static Vector3Int DAT_9C4 = new Vector3Int(0, 0, 0);
    public static byte[] DAT_A14 = { 0, 1, 2, 3 };
    public static Vector3Int DAT_A18 = new Vector3Int(0, 0, 0x30000);
    public static Vector3Int DAT_A24 = new Vector3Int(0, 0x6800, 0);
    public static Vector3Int DAT_A30 = new Vector3Int(0, 0, -0x8000);
    public static Vector3Int DAT_A3C = new Vector3Int(0, 0, -0x20000);
    public static Vector3Int DAT_A4C = new Vector3Int(0, 0x20000, 0);
    public static Vector3Int DAT_A5C = new Vector3Int(0, -0x20000, 0);
    public static Vector3Int DAT_A68 = new Vector3Int(0, 0x8000, 0);
    public static short[] DAT_BC0 = { 2, 3, 4, 5, 6, 7, 8, 9, 24, 25, 31, 0, 10, 11, 12, 13, 14, 15, 16,
                                        17, 18, 19, 20, 58, 63, 64, 65, 66, 75, 0, 75, 67, 68, 71, 72, 73, 74 };

    public static List<Junction> updateJunc = new List<Junction>();

    public VigTerrain terrain;
    public LevelManager levelManager;
    public VigConfig commonWheelConfiguration;
    public Vehicle[] playerObjects; //gp+FF8h
    public VigCamera[] cameraObjects; //gp+10E8h
    public byte[] vehicles; //gp+1104; 
    public BSP bspTree; //gp+102Ch
    public List<VigTuple> worldObjs; //gp+1040h
    public List<VigTuple> interObjs; //gp+10B8h
    public int translateFactor = 10000;
    public int translateFactor2 = 1000;
    public float pixelSnapMin = 0.002f;
    public float pixelSnapMax = 0.998f;
    private NativeArray<Vector2Int> nativeArray;
    private TerrainJob terrainJob;
    private JobHandle terrainHandle;

    public Queue<ScreenPoly> DAT_610; //gp+610h
    public bool DAT_83B; //gp+83Bh
    public byte DAT_C6E; //gp+C6Eh - difficulty
    public sbyte[] DAT_C80; //gp+C80h - damage
    public Color32[] DAT_CE0; //gp+CE0h
    public ushort[] DAT_CF0; //gp+CF0h
    public byte[,] DAT_CF4; //gp+CF4h
    public byte DAT_CF8; //gp+CF8h
    public byte[] DAT_CFC; //gp+CFCh
    public byte DAT_D08; //gp+D08h
    public int DAT_D0C; //gp+D0Ch
    public byte[] DAT_D18; //gp+D18h
    public byte[] DAT_D19; //gp+D19h
    public byte[] DAT_D1A; //gp+D1Ah
    public byte[] DAT_D1B; //gp+D1Bh
    public byte[,] DAT_D28; //gp+D28h
    public int DAT_DA0; //gp+DA0h
    public ushort DAT_DA8; //gp+DA8h
    public int DAT_DB0; //gp+DB0h
    public short DAT_DB4; //gp+DB4h
    public short DAT_DB6; //gp+DB6h
    public short DAT_DB8; //gp+DB8h
    public VigTransform DAT_F00; //gp+F00h
    public int DAT_F20; //gp+F20h
    public VigTransform DAT_F28; //gp+F28h
    public Matrix3x3 DAT_F48; //gp+F48h
    public Matrix3x3 DAT_F68; //gp+F68h
    public VigTransform DAT_F88; //gp+F88h
    public Matrix3x3 DAT_FA8; //gp+FA8h
    public Vector2Int DAT_FC8; //gp+FC8h
    public Matrix3x3 DAT_FD8; //gp+FD8h
    public short DAT_E1C; //gp+E1Ch
    public VigTransform DAT_EA8; //gp+EA8h
    public Vector3Int DAT_EC8; //gp+EC8h
    public int DAT_ED8; //gp+ED8h
    public int DAT_EDC; //gp+EDCh
    public VigTransform DAT_EE0; //gp+EE0h
    public byte DAT_1000; //gp+1000h
    public byte DAT_1002; //gp+1002h
    public byte DAT_1004; //gp+1004h
    public int DAT_101C; //gp+101Ch
    public int DAT_1028; //gp+1028h
    public sbyte[] DAT_1030; //gp+1030h
    public int DAT_1038; //gp+1038h
    public List<VigTuple> DAT_1068; //gp+1068h
    public List<VigTuple> DAT_1078; //gp+1078h
    public int DAT_1084; //gp+1084h
    public List<VigTuple> DAT_1088; //gp+1088h
    public List<VigTuple> DAT_1098; //gp+1098h
    public List<VigTuple> DAT_10A8; //gp+10A8h
    public List<VigTuple> DAT_10C8; //gp+10C8h
    public List<VigTuple2> DAT_10D8; //gp+10D8h
    public int DAT_10F0; //gp+10F0h
    public List<VigTuple> DAT_1110; //gp+1110h
    public sbyte DAT_111C; //gp+111Ch
    public SunLensFlare DAT_1124; //gp+1124h
    public sbyte[] DAT_1128; //gp+1128h
    public int DAT_1130; //gp+1130h
    public Navigation DAT_1138; //gp+1138h
    public VigMesh[] DAT_1150; //gp+1150h
    public uint DAT_E44; //gp+E44h
    public int DAT_C74; //gp+C74h
    public int DAT_CC4; //gp+CC4h
    public List<AudioClip> DAT_C2C; //gp+C2C
    public ushort timer; //gp+EA0h
    public ushort[,] DAT_08; //gp+08h
    public int DAT_20; //gp+20h
    public int DAT_24; //gp+24h
    public int DAT_28; //gp+28h
    public _SCREEN_MODE screenMode; //gp+2Ch;
    public _GAME_MODE gameMode; //gp+31h
    public bool gameEnded; //gp+33h
    public bool DAT_36; //gp+36h
    public int gravityFactor; //gp+3Ch
    public int DAT_40; //gp+40h
    public int map;
    public Material targetHUD;
    public _DITHERING ditheringMethod;
    public bool drawPlayer;
    public bool drawObjects;
    public bool drawTerrain;
    public bool drawRoads;
    public bool playMusic;
    public bool inDebug;
    public bool autoTarget;
    public float max;
    public float terrainHeight;
    public float offsetFactor;
    public float offsetStart;
    public float angleOffset;
    public Dropdown driverDropdown;
    public Dropdown stageDropdown;
    public Dropdown ditheringDropdown;
    public Dropdown gameModeDropdown;
    public Dropdown damageDropdown;
    public Dropdown difficultyDropdown;
    public Toggle drawPlayerToggle;
    public Toggle drawObjectsToggle;
    public Toggle drawTerrainToggle;
    public Toggle drawRoadsToggle;
    public Toggle[] spawnEnemiesToggle;
    public Toggle disableDpadToggle;
    public Toggle disableAutoTarget;
    public RectTransform spawnsRect;
    public List<int> playable;
    public List<int> survival;
    public int currentSpawn;
    public int wrenchCount;
    public int totalSpawns;
    public int aiMin, aiMax;

    #region DEBUG_MENU
    public void SetDriver()
    {
        int index = driverDropdown.value;

        switch (index)
        {
            case 0:
                vehicles[0] = 0;
                break;
            case 1:
                vehicles[0] = 1;
                break;
            case 2:
                vehicles[0] = 2;
                break;
            case 3:
                vehicles[0] = 3;
                break;
            case 4:
                vehicles[0] = 4;
                break;
            case 5:
                vehicles[0] = 5;
                break;
            case 6:
                vehicles[0] = 6;
                break;
            case 7:
                vehicles[0] = 7;
                break;
            case 8:
                vehicles[0] = 8;
                break;
            case 9:
                vehicles[0] = 9;
                break;
            case 10:
                vehicles[0] = 10;
                break;
            case 11:
                vehicles[0] = 11;
                break;
            case 12:
                vehicles[0] = 12;
                break;
            case 13:
                vehicles[0] = 13;
                break;
            case 14:
                vehicles[0] = 14;
                break;
            case 15:
                vehicles[0] = 15;
                break;
            case 16:
                vehicles[0] = 16;
                break;
            case 17:
                vehicles[0] = 17;
                break;
        }
    }

    public void SetStage()
    {
        map = stageDropdown.value + 1;
    }

    public void SetDithering()
    {
        int index = ditheringDropdown.value;

        switch (index)
        {
            case 0:
                ditheringMethod = _DITHERING.None;
                break;
            case 1:
                ditheringMethod = _DITHERING.Standard;
                break;
            case 2:
                ditheringMethod = _DITHERING.PSX;
                break;
        }
    }

    public void SetGameMode()
    {
        int index = gameModeDropdown.value;

        switch (index)
        {
            case 0:
                gameMode = _GAME_MODE.Arcade;
                spawnsRect.gameObject.SetActive(true);
                break;
            case 1:
                gameMode = _GAME_MODE.Survival;
                spawnsRect.gameObject.SetActive(false);
                DAT_1030[0] = 1;
                DAT_1030[1] = 0;
                DAT_1030[2] = 0;
                DAT_1030[3] = 0;
                break;
        }
    }

    public void SetDamage()
    {
        int index = damageDropdown.value;
        DAT_C80[0] = (sbyte)index;
    }

    public void SetDifficulty()
    {
        int index = difficultyDropdown.value;
        DAT_C6E = (byte)index;
    }

    public void SetDrawPlayer()
    {
        drawPlayer = drawPlayerToggle.isOn;
    }

    public void SetDrawObjects()
    {
        drawObjects = drawObjectsToggle.isOn;
    }

    public void SetDrawTerrain()
    {
        drawTerrain = drawTerrainToggle.isOn;
    }

    public void SetDrawRoads()
    {
        drawRoads = drawRoadsToggle.isOn;
    }

    public void SetEnemySpawn(int index)
    {
        DAT_1030[index] = (sbyte)(spawnEnemiesToggle[index].isOn ? 1 : 0);
    }

    public void SetDPAD()
    {
        DAT_637E0[0, 5] = disableDpadToggle.isOn ? 0x00001D07 : 0xB9C81D07;
    }

    public void SetAutoTarget()
    {
        autoTarget = disableAutoTarget.isOn ? true : false;
    }

    public void LoadLevel()
    {
        SetDriver();
        SetStage();
        SetDithering();
        SetGameMode();
        SetDamage();
        SetDifficulty();
        SetDrawPlayer();
        SetDrawObjects();
        SetDrawTerrain();
        SetDrawRoads();
        SetDPAD();
        SetAutoTarget();

        List<int> prev = new List<int>(playable);
        survival = new List<int>();
        int count = playable.Count - 1;

        for (int i = 0; i < count; i++)
        {
            do
            {
                int random = UnityEngine.Random.Range(0, prev.Count);

                if (prev[random] != vehicles[0])
                {
                    survival.Add(prev[random]);
                    prev.RemoveAt(random);
                    break;
                }
            } while (true);
        }

        for (int i = 0; i < 4; i++)
        {
            if (gameMode == _GAME_MODE.Arcade)
                SetEnemySpawn(i);

            do
            {
                int random = UnityEngine.Random.Range(0, playable.Count);

                if (playable[random] != vehicles[0])
                {
                    vehicles[i + 2] = (byte)playable[random];
                    playable.RemoveAt(random);
                    break;
                }
            } while (true);
        }
        
        totalSpawns = DAT_1030[0] + DAT_1030[1] + DAT_1030[2] + DAT_1030[3];
        DontDestroyOnLoad(this.gameObject);
        SceneManager.LoadScene(map, LoadSceneMode.Single);
    }

    public void LoadDebug()
    {
        inDebug = true;
        Destroy(this.gameObject);
        SceneManager.LoadScene(0, LoadSceneMode.Single);
		//        SceneManager.LoadScene(9, LoadSceneMode.Single);

	}
    #endregion

    public void FUN_17F34(int param1, int param2)
    {
        DAT_DA0 = param2;
        DAT_DB0 = 0x2ff800 - param1;
    }

    public void FUN_17EB8()
    {
        uint uVar1;
        uint uVar2;
        Vector3Int local_rec0;

        uVar1 = (uint)(DAT_DB0 - DAT_F28.position.y);
        local_rec0 = new Vector3Int(DAT_F28.rotation.V10, DAT_F28.rotation.V11, DAT_F28.rotation.V12);
        Water.instance.FUN_15F28(DAT_F28, DAT_DB0);
        uVar2 = (uint)local_rec0.z;

        if ((int)(uVar1 ^ uVar2) < 1)
        {
            if ((int)uVar2 < 0)
                uVar2 = (uint)-(int)uVar2;

            if (0x665 < (int)uVar2)
                return;
        }

        Water.instance.FUN_16664(local_rec0, (int)uVar1);
    }

    public void FUN_1C134()
    {
        terrain.ClearTerrainData();
        FUN_1C158();
    }

    public void FUN_1DC0C(bool param1, int param2, bool param3 = false)
    {
        if (param1)
        {
            voices[param2].loop = param3;
            voices[param2].Play();
            return;
        }

        voices[param2].Pause();
    }

    public int FUN_1DD9C()
    {
        int iVar1;
        uint uVar2;
        AudioSource[] pdVar3;

        iVar1 = 0;
        pdVar3 = voices;
        uVar2 = DAT_E44;

        while((uVar2 & 1) != 0 || pdVar3[iVar1].isPlaying)
        {
            iVar1++;
            uVar2 = (uint)((int)uVar2 >> 1);

            if (23 < iVar1)
                return 0;
        }

        return iVar1 + 1;
    }

    public void FUN_1DE78(int param1)
    {
        if (param1 != 0)
            FUN_1DC0C(false, param1 - 1 & 31);
    }

    public void FUN_1E098(int param1, List<AudioClip> param2, int param3, uint param4, bool param5 = false)
    {
        int pitch;
        int vNum;
        AudioClip puVar1;

        if (param1 != 0)
        {
            puVar1 = param2[param3];
            pitch = 4096;
            vNum = param1 - 1;

            if (puVar1 != null)
            {
                SpuSetVoicePitch(vNum, pitch);
                SpuSetVoiceVolume(vNum, (short)param4, (short)(param4 >> 16));
                SpuSetVoiceStartAddr(vNum, puVar1);
                FUN_1DC0C(true, vNum & 31, param5);
            }
        }
    }

    public void FUN_1E14C(int param1, List<AudioClip> param2, int param3, bool param4 = false)
    {
        int iVar1;
        uint uVar2;

        iVar1 = DAT_E1C;
        uVar2 = (uint)(ushort)DAT_E1C << 16 >> 31;
        iVar1 += (int)uVar2;
        iVar1 >>= 1;
        uVar2 = (uint)iVar1 << 16;
        uVar2 += (uint)iVar1;
        FUN_1E098(param1, param2, param3, uVar2, param4);
    }

    public void FUN_1E188(int param1, List<AudioClip> param2, int param3, bool param4 = false)
    {
        uint uVar1;

        uVar1 = (uint)(int)DAT_E1C << 16;
        uVar1 = (uint)(int)DAT_E1C + uVar1;
        FUN_1E098(param1, param2, param3, uVar1, param4);
    }

    public void FUN_1E2E8(int source, int sampleRate)
    {
        if (source != 0)
            voices[source - 1].pitch = (float)sampleRate / 3072;
    }

    //FUN_1E30C (may not be accurate)
    public void FUN_1E30C(int source, int sampleRate)
    {
        if (source != 0)
            voices[source - 1].pitch = (float)sampleRate / 4096;
    }

    public void FUN_1E580(int param1, List<AudioClip> param2, int param3, Vector3Int param4, bool param5 = false)
    {
        uint uVar1;

        uVar1 = FUN_1E478(param4);
        FUN_1E098(param1, param2, param3, uVar1, param5);
    }

    public void FUN_1E5D4(int param1, List<AudioClip> param2, int param3, Vector3Int param4, bool param5 = false)
    {
        uint uVar1;

        uVar1 = FUN_1E478(param4);
        FUN_1E098(param1, param2, param3, uVar1 << 1, param5);
    }

    public static void SpuSetVoicePitch(int vNum, int sampleRate)
    {
        voices[vNum].pitch = (float)sampleRate / 4096;
    }

    //FUN_1E2C8
    public void FUN_1E2C8(int source, uint volume)
    {
        if (source != 0)
        {
            int volL = (short)volume;
            int volR = (short)(volume >> 16);

            volL = (volL & 0x7fff);

            if (volL > 0x3fff)
                volL = -volL & 0x7fff;

            volR = (volR & 0x7fff);

            if (volR > 0x3fff)
                volR = -volR & 0x7fff;

            float _volL = (float)volL / 0x4000;
            float _volR = (float)volR / 0x4000;
            voices[source - 1].volume = Mathf.Max(_volL, _volR);
            voices[source - 1].panStereo = _volR - _volL;
        }
    }

    public static void SpuSetVoiceVolume(int vNum, int volL, int volR)
    {
        volL = (volL & 0x7fff);

        if (volL > 0x3fff)
            volL = -volL & 0x7fff;

        volR = (volR & 0x7fff);

        if (volR > 0x3fff)
            volR = -volR & 0x7fff;

        float _volL = (float)volL / 0x4000;
        float _volR = (float)volR / 0x4000;
        voices[vNum].volume = Mathf.Max(_volL, _volR);
        voices[vNum].panStereo = _volR - _volL;
    }

    public static void SpuSetVoiceStartAddr(int vNum, AudioClip startAddr)
    {
        voices[vNum].clip = startAddr;
    }

    public void FUN_1E1B0(int param1, List<AudioClip> param2, int param3, uint param4, bool param5 = false)
    {
        int pitch;
        int iVar1;
        int vNum;
        AudioClip puVar2;

        if (param1 != 0)
        {
            puVar2 = param2[param3];

            if (puVar2 != null)
            {
                vNum = param1 - 1;
                iVar1 = (int)FUN_2AC5C();
                pitch = iVar1 + 0x1C000 >> 5;
                SpuSetVoicePitch(vNum, pitch);
                SpuSetVoiceVolume(vNum, (short)param4, (short)(param4 >> 16));
                SpuSetVoiceStartAddr(vNum, puVar2);
                FUN_1DC0C(true, vNum & 31, param5);
            }
        }
    }

    public void FUN_1E628(int param1, List<AudioClip> param2, int param3, Vector3Int param4, bool param5 = false)
    {
        uint uVar1;

        uVar1 = FUN_1E478(param4);
        FUN_1E1B0(param1, param2, param3, uVar1, param5);
    }

    public void FUN_1FEB8(VigMesh param1)
    {
        if (param1 != null)
        {
            if (param1.DAT_14 != null)
                param1.DAT_14 = null;

            Destroy(param1);
        }
    }

    public void FUN_2C0A0(VigObject param1)
    {
        ushort uVar1;
        int iVar2;
        BufferedBinaryReader brVar3;

        if (param1 != null)
        {
            do
            {
                uVar1 = timer;
                brVar3 = param1.vAnim;

                if (brVar3 == null)
                {
                    brVar3 = new BufferedBinaryReader(param1.vData.animations);

                    if (brVar3.GetBuffer() != null)
                    {
                        iVar2 = brVar3.ReadInt32((ushort)param1.DAT_1A * 4 + 4);

                        if (iVar2 != 0)
                            brVar3.Seek(iVar2, SeekOrigin.Begin);
                        else
                            brVar3 = null;
                    }
                    else
                        brVar3 = null;
                }
                else
                {
                    brVar3.Seek(0, SeekOrigin.Begin);
                    iVar2 = brVar3.ReadInt32((ushort)param1.DAT_1A * 4 + 4);

                    if (iVar2 != 0)
                        brVar3.Seek(iVar2, SeekOrigin.Begin);
                    else
                        brVar3 = null;
                }

                param1.vAnim = brVar3;
                param1.DAT_4A = uVar1;

                if (param1.child2 != null)
                    FUN_2C0A0(param1.child2);

                param1 = param1.child;
            } while (param1 != null);
        }
    }

    public void FUN_2C4B4(VigObject param1)
    {
        VigObject oVar1;

        if (param1 != null)
        {
            do
            {
                if (param1.vLOD != null && param1.vLOD != param1.vMesh)
                    FUN_1FEB8(param1.vLOD);

                FUN_1FEB8(param1.vMesh);
                FUN_2C4B4(param1.child2);
                oVar1 = param1.child;
                Destroy(param1.gameObject);
                param1 = oVar1;
            } while (oVar1 != null);
        }
    }

    public void FUN_2DE18()
    {
        Utilities.SetColorMatrix(DAT_FA8);
        Utilities.SetBackColor(64, 64, 64);
        Utilities.SetFogNearFar(2048, 8192, DAT_ED8);
        Utilities.SetColorMatrix2(DAT_FA8);
        Utilities.SetBackColor2(64, 64, 64);
        Utilities.SetFogNearFar2(2048, 8192, DAT_ED8);
    }

    public void FUN_2DE84(int param1, Vector3Int param2, Color32 param3)
    {
        int iVar1;

        iVar1 = param1;
        param1 = iVar1 * 3;
        DAT_F68.SetValue16(param1, param2.x);
        DAT_F68.SetValue16(param1 + 1, param2.y);
        DAT_F68.SetValue16(param1 + 2, param2.z);
        DAT_FA8.SetValue16(iVar1, param3.r << 4);
        DAT_FA8.SetValue16(iVar1 + 3, param3.g << 4);
        DAT_FA8.SetValue16(iVar1 + 6, param3.b << 4);
    }

    public void FUN_2FB70(VigObject param1, HitDetection param2, HitDetection param3)
    {
        param3.self = param1;
        param3.collider1 = param2.collider2;
        param3.collider2 = param2.collider1;
        param3.object1 = param2.object2;
        param3.object2 = param2.object1;
        FUN_2F798(param2.self, param3);
    }

    public int FUN_2FE58(VigObject param1, ushort param2)
    {
        int iVar1;
        VigObject oVar2;

        do
        {
            oVar2 = param1.child;

            if ((param1.flags & 4) == 0)
            {
                iVar1 = param1.FUN_2FBC8(param2);

                if (-1 < iVar1)
                {
                    if (param1.child2 == null) goto LAB_2FEC8;

                    iVar1 = FUN_2FE58(param1.child2, param2);
                }

                if (iVar1 < -1)
                    return iVar1;
            }

            LAB_2FEC8:
            param1 = oVar2;

            if (oVar2 == null)
                return 0;
        } while (true);
    }

    public void FUN_2FEE8(VigObject param1, ushort param2)
    {
        int iVar1;

        iVar1 = param1.FUN_2FBC8(param2);

        if (-1 < iVar1 && param1.child2 != null)
            FUN_2FE58(param1.child2, param2);
    }

    public VigTuple2 FUN_2FF3C(uint param1, uint param2)
    {
        VigTuple2 ppiVar2;
        List<VigTuple2> ppiVar3;

        ppiVar3 = DAT_10D8;
        ppiVar2 = null;

        for (int i = 0; i < ppiVar3.Count; i++)
        {
            ppiVar2 = ppiVar3[i];

            if ((uint)(int)ppiVar2.array[0] <= param1 >> 16 &&
                (uint)(int)ppiVar2.array[1] <= param2 >> 16 &&
                param1 >> 16 <= (uint)(ppiVar2.array[0] + ppiVar2.array[2]) &&
                param2 >> 16 <= (uint)(ppiVar2.array[1] + ppiVar2.array[3]))
                break;

            ppiVar2 = null;
        }

        return ppiVar2;
    }

    public VigTuple2 FUN_2FFD0(int param1)
    {
        VigTuple2 ppiVar2;
        List<VigTuple2> ppiVar3;

        ppiVar3 = DAT_10D8;
        ppiVar2 = null;

        for (int i = 0; i < ppiVar3.Count; i++)
        {
            ppiVar2 = ppiVar3[i];

            if (ppiVar2.id == param1) break;

            ppiVar2 = null;
        }

        return ppiVar2;
    }

    public void FUN_3001C(List<VigTuple> param1)
    {
        VigTuple piVar1;

        param1 = new List<VigTuple>();
    }

    public VigTuple FUN_30080(List<VigTuple> param1, VigObject param2)
    {
        VigTuple newTuple = new VigTuple(param2, 0);
        param1.Add(newTuple);
        return newTuple;
    }

    public bool FUN_300B8(List<VigTuple> param1, VigObject param2)
    {
        List<VigTuple> ppiVar1;
        VigTuple ppiVar2;
        VigObject piVar4;

        ppiVar1 = param1;
        int i = 0;

        while (true)
        {
            if (i == ppiVar1.Count) return false;

            ppiVar2 = ppiVar1[i++];

            if (ppiVar2.vObject == param2) break;
        }

        ppiVar1.Remove(ppiVar2);
        //DAT_1098.Add(ppiVar2);
        ppiVar2.vObject = null;
        return true;
    }

    public VigTuple FUN_30134(List<VigTuple> param1, VigObject param2)
    {
        VigTuple ppiVar1;
        int ppiVar2;

        if (param1 == null)
            param1 = new List<VigTuple>();

        ppiVar2 = 0;

        while (true)
        {
            if (ppiVar2 == param1.Count)
                return null;

            ppiVar1 = param1[ppiVar2];

            if (ppiVar1.vObject == param2)
                break;

            ppiVar2++;
        }

        return ppiVar1;
    }

    public VigTuple FUN_301DC(List<VigTuple> param1, int param2)
    {
        return FUN_30180(param1, param2, null);
    }

    public VigTuple FUN_301FC(List<VigTuple> param1, Type param2)
    {
        List<VigTuple> ppiVar1;
        VigTuple ppiVar2;

        ppiVar1 = param1;
        ppiVar2 = null;

        for (int i = 0; i < ppiVar1.Count; i++)
        {
            ppiVar2 = ppiVar1[i];

            if (ppiVar2.vObject.GetType() == param2)
                break;

            ppiVar2 = null;
        }

        return ppiVar2;
    }

    public VigObject FUN_3027C(List<VigTuple> param1, int param2, VigObject param3)
    {
        VigTuple tVar1;
        VigObject oVar2;

        tVar1 = FUN_30180(param1, param2, param3);
        oVar2 = null;

        if (tVar1 != null)
            oVar2 = tVar1.vObject;

        return oVar2;
    }

    public VigObject FUN_302A8(List<VigTuple> param1, Type param2)
    {
        VigTuple tVar1;
        VigObject oVar2;

        tVar1 = FUN_301FC(param1, param2);
        oVar2 = null;

        if (tVar1 != null)
            oVar2 = tVar1.vObject;

        return oVar2;
    }

    public VigObject FUN_302D4(List<VigTuple> param1, uint param2, int param3)
    {
        List<VigTuple> ppiVar1;
        VigTuple ppiVar2;
        VigObject oVar3;
        
        ppiVar1 = param1;

        for (int i = 0; i < ppiVar1.Count; i++)
        {
            ppiVar2 = ppiVar1[i];
            oVar3 = ppiVar2.vObject;

            if (oVar3.id == param3 && oVar3.type == param2)
                return oVar3;
        }

        return null;
    }

    public void FUN_30334(List<VigTuple> param1, int param2, VigObject param3)
    {
        List<VigTuple> ppiVar1;
        VigTuple ppiVar2;
        VigObject pcVar3;
        uint uVar4;

        ppiVar1 = param1;

        for (int i = 0; i < ppiVar1.Count; i++)
        {
            ppiVar2 = ppiVar1[i];
            pcVar3 = ppiVar2.vObject;

            if (!pcVar3.GetType().IsSubclassOf(typeof(VigObject)))
                uVar4 = 0;
            else
                uVar4 = pcVar3.UpdateW(param2, param3);

            if (uVar4 != 0) break;
        }
    }

    public int FUN_30428(List<VigTuple> param1, uint param2)
    {
        List<VigTuple> ppiVar1;
        VigTuple ppiVar2;
        uint uVar3;
        int iVar4;

        iVar4 = 0;
        ppiVar1 = param1;

        for (int i = 0; i < ppiVar1.Count; i++)
        {
            ppiVar2 = ppiVar1[i];
            uVar3 = ppiVar2.vObject.flags;

            if (31 < ppiVar2.vObject.id && (uVar3 & param2) != 0 &&
                (uVar3 & 0x8002) == 0)
                iVar4++;
        }

        return iVar4;
    }

    public VigObject FUN_30498(List<VigTuple> param1, uint param2, int param3)
    {
        List<VigTuple> ppiVar1;
        VigTuple ppiVar2;
        VigObject oVar3;

        oVar3 = null;
        ppiVar1 = param1;
        
        for (int i = 0; i < ppiVar1.Count; i++)
        {
            ppiVar2 = ppiVar1[i];
            oVar3 = ppiVar2.vObject;

            if (31 < oVar3.id && (oVar3.flags & param2) != 0 &&
                (oVar3.flags & 0x8002) == 0 && --param3 == -1)
                break;
        }

        return oVar3;
    }

    public void FUN_307CC(VigObject param1)
    {
        VigObject ppcVar1;
        List<VigTuple> piVar3;
        VigTuple piVar4;
        VigObject oVar5;

        if (param1 != null)
        {
            do
            {
                param1.FUN_306FC();

                if (param1.vLOD != null && param1.vLOD != param1.vMesh)
                    FUN_1FEB8(param1.vLOD);

                FUN_1FEB8(param1.vMesh);
                FUN_307CC(param1.child2);
                oVar5 = param1.child;
                Destroy(param1.gameObject);

                if (DAT_1068.Count > 0)
                {
                    piVar3 = DAT_1068;

                    for (int i = 0; i < piVar3.Count; i++)
                    {
                        piVar4 = piVar3[i];
                        ppcVar1 = piVar4.vObject;

                        if (ppcVar1.GetType().IsSubclassOf(typeof(VigObject)))
                            ppcVar1.UpdateW(10, param1);
                    }
                }

                param1 = oVar5;
            } while (oVar5 != null);
        }
    }

    public void FUN_308C4(VigObject param1)
    {
        if (param1.vShadow != null)
            FUN_4C4BC(param1.vShadow);

        FUN_307CC(param1);
    }

    public void FUN_30904(VigObject param1)
    {
        VigObject oVar1;

        if (param1.type == 255)
        {
            oVar1 = param1.FUN_306FC();
            Destroy(oVar1.gameObject);
        }
        else
            FUN_308C4(param1);
    }

    public void FUN_3094C(Tuple<List<VigTuple>, VigTuple> param1)
    {
        if (param1.Item2 != null)
        {
            param1.Item1.Remove(param1.Item2);
            FUN_308C4(param1.Item2.vObject);
        }
    }

    public void FUN_309A0(VigObject param1)
    {
        Tuple<List<VigTuple>, VigTuple> tVar1;

        tVar1 = FUN_31868(param1);
        FUN_3094C(tVar1);
    }

    public void FUN_30B24(List<VigTuple> param1)
    {
        for (int i = 0; i < param1.Count; i++)
            FUN_2D9E0(param1[i].vObject);
    }

    public void FUN_30CB0(VigObject param1, int param2)
    {
        VigTuple ppiVar2;
        int iVar3;
        VigTuple ppiVar4;
        List<VigTuple> ppiVar5;

        if ((param1.flags & 1U) != 0)
            FUN_300B8(DAT_1110, param1);

        //ppiVar4 = DAT_1098[0];
        ppiVar4 = new VigTuple(null, 0);
        //DAT_1098.RemoveAt(0);
        ppiVar4.vObject = param1;
        iVar3 = DAT_28;
        param1.flags |= 1;
        ppiVar4.flag = (uint)(param2 + iVar3);
        ppiVar5 = DAT_1110;

        for (int i = 0; i < ppiVar5.Count; i++)
        {
            ppiVar2 = ppiVar5[i];

            if (!((int)ppiVar2.flag < param2 + iVar3)) break;
        }

        //DAT_1110.Add(ppiVar4);
        DAT_1110.Insert(0, ppiVar4);
    }

    public void FUN_30DE8(BSP param1, int param2, int param3, int param4, int param5)
    {
        int iVar1;

        iVar1 = param1.DAT_00;

        if (iVar1 == 1)
        {
            iVar1 = param1.DAT_04;

            if (param2 < iVar1)
                FUN_30DE8(param1.DAT_08, param2, param3, param4, param5);

            if (param3 <= iVar1)
                return;
        }
        else
        {
            if (iVar1 == 0)
            {
                FUN_30B24(param1.LDAT_04);
                return;
            }

            if (iVar1 == 2)
            {
                iVar1 = param1.DAT_04;

                //if (param4 < iVar1)
                    FUN_30DE8(param1.DAT_08, param2, param3, param4, param5);

                if (param5 <= iVar1)
                    return;
            }
            else
            {
                if (iVar1 != 3)
                    return;

                FUN_30DE8(param1.DAT_08, param2, param3, param4, param5);
            }
        }

        FUN_30DE8(param1.DAT_0C, param2, param3, param4, param5);
    }

    public Tuple<List<VigTuple>, VigTuple> FUN_310F4(BSP param1, VigObject param2)
    {
        Tuple<List<VigTuple>, VigTuple> tVar1;

        while (true)
        {
            if (param1.DAT_00 == 0)
                return new Tuple<List<VigTuple>, VigTuple>
                    (param1.LDAT_04, FUN_30134(param1.LDAT_04, param2));

            tVar1 = FUN_310F4(param1.DAT_08, param2);

            if (tVar1.Item2 != null) break;

            param1 = param1.DAT_0C;
        }

        return tVar1;
    }

    public VigObject FUN_31160(BSP param1, int param2, VigObject param3)
    {
        VigObject oVar1;

        while (true)
        {
            if (param1.DAT_00 == 0)
                return FUN_3027C(param1.LDAT_04, param2, param3);

            oVar1 = FUN_31160(param1.DAT_08, param2, param3);

            if (oVar1 != null) return oVar1;

            param1 = param1.DAT_0C;
        }
    }

    public VigObject FUN_318D0(int param1)
    {
        return FUN_31160(bspTree, param1, null);
    }

    public VigObject FUN_311DC(BSP param1, Type param2)
    {
        VigObject oVar1;

        while (true)
        {
            if (param1.DAT_00 == 0)
            {
                return FUN_302A8(param1.LDAT_04, param2);
            }

            oVar1 = FUN_311DC(param1.DAT_08, param2);

            if (oVar1 != null) return oVar1;

            param1 = param1.DAT_0C;
        }
    }

    public VigObject FUN_318F8(int param1, VigObject param2)
    {
        return FUN_31160(bspTree, param1, param2);
    }

    public VigObject FUN_31C98(int param1, int param2, Vector2Int param3, Vector2Int param4)
    {
        return FUN_31B30(bspTree, param1, param2, param3, param4);
    }

    public VigObject FUN_31B30(BSP param1, int param2, int param3, Vector2Int param4, Vector2Int param5)
    {
        bool bVar1;
        VigObject oVar2;
        int iVar3;
        VigObject oVar3;

        iVar3 = param1.DAT_00;

        if (iVar3 == 1)
        {
            iVar3 = param1.DAT_04;

            if (param4.x < iVar3)
            {
                oVar2 = FUN_31B30(param1.DAT_08, param2, param3, param4, param5);

                if (oVar2 != null)
                    return oVar2;
            }

            bVar1 = iVar3 < param4.y;
        }
        else
        {
            if (iVar3 == 0)
            {
                oVar3 = FUN_31A74(param1.LDAT_04, param2, param3, param4, param5);
                return oVar3;
            }

            if (iVar3 != 2)
            {
                if (iVar3 != 3)
                    return null; //originally 3? a bug?

                oVar3 = FUN_31B30(param1.DAT_08, param2, param3, param4, param5);

                if (oVar3 != null)
                    return oVar3;

                oVar3 = FUN_31B30(param1.DAT_0C, param2, param3, param4, param5);

                if (oVar3 != null)
                    return oVar3;

                return null;
            }

            iVar3 = param1.DAT_04;

            if (param5.x < iVar3)
            {
                oVar2 = FUN_31B30(param1.DAT_08, param2, param3, param4, param5);

                if (oVar2 != null)
                    return oVar2;
            }

            bVar1 = iVar3 < param5.y;
        }

        if (!bVar1)
            return null;
        else
        {
            oVar3 = FUN_31B30(param1.DAT_0C, param2, param3, param4, param5);

            if (oVar3 == null)
                oVar3 = null;
        }

        return oVar3;
    }

    public VigObject FUN_31A74(List<VigTuple> param1, int param2, int param3, Vector2Int param4, Vector2Int param5)
    {
        List<VigTuple> ppiVar1;
        VigTuple ppiVar2;
        VigObject oVar3;
        int iVar4;

        ppiVar1 = param1;
        ppiVar2 = null;

        for (int i = 0; i < ppiVar1.Count; i++)
        {
            ppiVar2 = ppiVar1[i];
            oVar3 = ppiVar2.vObject;

            if (param2 <= oVar3.id && oVar3.id <= param3)
            {
                iVar4 = oVar3.DAT_58;

                if (param4.x < oVar3.screen.x + iVar4 &&
                    oVar3.screen.x - iVar4 < param4.y &&
                    param5.x < oVar3.screen.z + iVar4 &&
                    oVar3.screen.z - iVar4 < param5.y)
                    return oVar3;
            }
        }

        return null;
    }

    public void FUN_3150C()
    {
        int iVar1;
        int iVar2;
        int iVar3;
        int iVar4;
        int iVar5;
        int iVar6;
        Vector3Int local_10;
        Vector3Int local_8;

        if (bspTree != null)
        {
            local_10 = new Vector3Int();
            local_10.x = -GameManager.instance.DAT_EDC / 2;
            local_10.y = 0;
            local_10.z = GameManager.instance.DAT_ED8;
            local_8 = new Vector3Int();
            local_8.x = GameManager.instance.DAT_EDC / 2;
            local_8.y = 0;
            local_8.z = GameManager.instance.DAT_ED8;
            local_10 = Utilities.VectorNormal(local_10);
            local_8 = Utilities.VectorNormal(local_8);
            Utilities.SetRotMatrix(GameManager.instance.DAT_F28.rotation);
            local_10 = Utilities.FUN_23EA0(local_10);
            local_8 = Utilities.FUN_23EA0(local_8);
            iVar4 = local_8.x;
            iVar5 = local_10.x;
            iVar2 = iVar4;

            if (iVar5 < iVar4)
                iVar2 = iVar5;

            iVar1 = 0;

            if (iVar2 < 0)
                iVar1 = iVar2;

            if (iVar4 < iVar5)
                iVar4 = iVar5;

            iVar2 = 0;

            if (0 < iVar4)
                iVar2 = iVar4;

            iVar4 = local_8.z;
            iVar6 = local_10.z;
            iVar5 = iVar4;

            if (iVar6 < iVar4)
                iVar5 = iVar6;

            iVar3 = 0;

            if (iVar5 < 0)
                iVar3 = iVar5;

            if (iVar4 < iVar6)
                iVar4 = iVar6;

            iVar5 = 0;

            if (0 < iVar4)
                iVar5 = iVar4;

            FUN_30DE8(bspTree, GameManager.instance.DAT_F28.position.x + iVar1 * 0x400,
                               GameManager.instance.DAT_F28.position.x + iVar2 * 0x400,
                               GameManager.instance.DAT_F28.position.z + iVar3 * 0x400,
                               GameManager.instance.DAT_F28.position.z + iVar5 * 0x400);
        }
    }

    public void FUN_31360(ushort param1)
    {
        VigTuple ppiVar2;
        List<VigTuple> ppiVar3;

        ppiVar3 = DAT_10A8;

        for (int i = 0; i < ppiVar3.Count; i++)
        {
            ppiVar2 = ppiVar3[i];

            if (ppiVar2.vObject != null)
                FUN_2FEE8(ppiVar2.vObject, param1);
        }
    }

    public void FUN_313C8(int param1)
    {
        for (int i = 0; i < DAT_1088.Count; i++)
            if (DAT_1088[i].vObject != null)
                if (DAT_1088[i].vObject.GetType().IsSubclassOf(typeof(VigObject)))
                    DAT_1088[i].vObject.UpdateW(0, param1);
                        //Debug.Log("Test" + param1 + "-" + DAT_1088);
    }

    public void FUN_31440(uint param1)
    {
        VigTuple ppiVar2;
        VigObject ppcVar5;
        
        for (int i = 0; i < DAT_1110.Count; i++)
        {
            ppiVar2 = DAT_1110[i];

            if (param1 < ppiVar2.flag)
                continue;

            ppcVar5 = ppiVar2.vObject;

            if (ppcVar5 == null)
                return;

            ppcVar5.flags &= 0xfffffffe;
            DAT_1110.RemoveAt(i--);

            if (ppcVar5.GetType().IsSubclassOf(typeof(VigObject)))
                ppcVar5.UpdateW(2, 0);
        }
    }

    public void FUN_31678()
    {
        Profiler.BeginSample("Terrain");

        if (drawTerrain)
            FUN_1C134();

        Profiler.EndSample();

        FUN_2DE18();

        Profiler.BeginSample("Roads");

        if (drawRoads)
            FUN_50B38();

        JobHandle.ScheduleBatchedJobs();
        Profiler.EndSample();
        Profiler.BeginSample("Player");

        if (drawPlayer)
        {
            FUN_30B24(worldObjs);
            FUN_30B24(interObjs);
        }

        Profiler.EndSample();
        Profiler.BeginSample("Objects");

        if (drawObjects)
            FUN_3150C();

        Profiler.EndSample();

        Profiler.BeginSample("Terrain");
        terrainHandle.Complete();
        nativeArray.Dispose();
        terrain.CreateTerrainMesh();
        Profiler.EndSample();

        Profiler.BeginSample("Roads");
        Junction.junctionHandle.Complete();

        for (int i = 0; i < updateJunc.Count; i++)
            updateJunc[i].CreateRoadData();

        updateJunc.Clear();
        Profiler.EndSample();

        Profiler.BeginSample("Skybox");

        if (drawTerrain)
            terrain.FUN_1C910();

        Profiler.EndSample();

        LevelManager.instance.level.UpdateW(17, 0);

        Profiler.BeginSample("SunLensFlare");

        if (DAT_1124 != null)
            FUN_33728(DAT_1124, LevelManager.instance.DAT_10F8);

        Profiler.EndSample();
    }

    public void FUN_31728()
    {
        FUN_3174C();
    }

    public Tuple<List<VigTuple>, VigTuple> FUN_31868(VigObject param1)
    {
        Tuple<List<VigTuple>, VigTuple> tVar1;

        tVar1 = new Tuple<List<VigTuple>, VigTuple>(worldObjs, FUN_30134(worldObjs, param1));

        if (tVar1.Item2 == null)
            return FUN_310F4(bspTree, param1);

        return tVar1;
    }

    public VigObject FUN_31950(int param1)
    {
        VigObject oVar1;

        oVar1 = FUN_3027C(worldObjs, param1, null);

        if (oVar1 == null)
            oVar1 = FUN_31160(bspTree, param1, null);

        return oVar1;
    }

    public VigObject FUN_31994(Type param1)
    {
        VigObject oVar1;

        oVar1 = FUN_302A8(worldObjs, param1);

        if (oVar1 == null)
            oVar1 = FUN_311DC(bspTree, param1);

        return oVar1;
    }

    public VigObject FUN_31EDC(int param1)
    {
        VigObject oVar1;
        VigObject oVar2;

        oVar1 = FUN_30250(DAT_1078, param1);

        if (oVar1 == null)
            oVar2 = null;
        else
            oVar2 = oVar1.FUN_31DDC();

        return oVar2;
    }

    public VigObject FUN_31F1C(Vector3Int param1)
    {
        VigTuple ppiVar2;
        List<VigTuple> ppiVar3;
        uint uVar4;
        VigObject oVar5;
        uint uVar6;
        VigObject oVar7;

        uVar6 = 0xffffffff;
        oVar7 = null;
        ppiVar3 = DAT_1078;

        for (int i = 0; i < ppiVar3.Count; i++)
        {
            ppiVar2 = ppiVar3[i];
            oVar5 = ppiVar2.vObject;

            if (oVar5.id - 1 < 31)
            {
                uVar4 = (uint)Utilities.FUN_29F6C(param1, oVar5.screen);

                if (uVar4 < uVar6)
                {
                    uVar6 = uVar4;
                    oVar7 = oVar5;
                }
            }
        }

        return oVar7;
    }

    public Vehicle FUN_3208C(int param1)
    {
        Placeholder oVar1;
        int iVar2;

        oVar1 = (Placeholder)FUN_30250(DAT_1078, param1);
        iVar2 = param1 + 1;

        if (param1 < 0)
            iVar2 = ~param1;

        return FUN_36C2C(oVar1, vehicles[iVar2], param1);
    }

    public VigObject FUN_320DC(Vector3Int param1, int param2)
    {
        VigTuple ppiVar2;
        List<VigTuple> ppiVar3;
        sbyte sVar4;
        int iVar5;
        int iVar6;
        VigObject oVar7;
        int iVar8;
        int iVar9;
        int iVar10;
        VigObject oVar11;
        VigObject oVar12;
        VigObject oVar13;
        VigObject oVar14;

        oVar13 = null;
        oVar11 = null;
        iVar9 = -1;
        iVar8 = -1;

        if (param2 < 0)
            sVar4 = DAT_1128[~param2];
        else
            sVar4 = -1;

        ppiVar3 = worldObjs;

        for (int i = 0; i < ppiVar3.Count; i++)
        {
            ppiVar2 = ppiVar3[i];
            oVar7 = ppiVar2.vObject;

            if (oVar7.type == 2 && oVar7.maxHalfHealth != 0)
            {
                iVar5 = Utilities.FUN_29F6C(param1, oVar7.screen);
                iVar6 = oVar7.id;

                if (iVar6 != param2 && (0 < iVar6 || sVar4 != DAT_1128[~iVar6]))
                {
                    iVar6 = iVar5;
                    iVar10 = iVar9;
                    oVar12 = oVar7;
                    oVar14 = oVar13;

                    if ((uint)iVar5 < (uint)iVar8) goto LAB_321E8;

                    iVar6 = iVar8;
                    iVar10 = iVar5;
                    oVar12 = oVar11;
                    oVar14 = oVar7;

                    if (!((uint)iVar5 < (uint)iVar9)) continue;

                    LAB_321E8:
                    iVar8 = iVar6;
                    iVar9 = iVar10;
                    oVar11 = oVar12;
                    oVar13 = oVar14;
                }
            }
        }

        if (oVar11 == null)
            oVar11 = oVar13;

        return oVar11;
    }

    public void FUN_327CC(VigObject param1)
    {
        short sVar1;
        int iVar2;
        int iVar3;
        VigTuple ppcVar3;
        List<VigTuple> ppcVar4;
        VigTuple tVar5;
        VigObject oVar6;
        uint uVar7;
        Vector3Int local_18;

        sVar1 = param1.id;

        if (param1.parent == null && 
            param1.type == 0)
        {
            ppcVar4 = worldObjs;

            for (int i = 0; i < ppcVar4.Count; i++)
            {
                ppcVar3 = ppcVar4[i];

                if (ppcVar3.vObject.id == sVar1 &&
                    ppcVar3.vObject.type == 3)
                    FUN_3094C(new Tuple<List<VigTuple>, VigTuple>(ppcVar4, ppcVar3));
            }

            tVar5 = FUN_301DC(DAT_1078, sVar1);

            if (tVar5 == null)
            {
                if (120 < param1.maxHalfHealth)
                {
                    uVar7 = FUN_2AC5C();

                    if ((uVar7 & 3) == 0)
                    {
                        iVar2 = (int)FUN_2AC5C();
                        iVar3 = (iVar2 << 1) + iVar2;
                        iVar3 = (iVar3 << 6) - iVar2;
                        iVar3 = (iVar3 << 2) - iVar2;
                        iVar3 = (iVar3 << 2) - iVar2;
                        iVar3 >>= 15;
                        iVar3 -= 1525;
                        local_18 = new Vector3Int();
                        local_18.x = iVar3;
                        local_18.y = -4577;
                        iVar2 = (int)FUN_2AC5C();
                        iVar3 = (iVar2 << 1) + iVar2;
                        iVar3 = (iVar3 << 6) - iVar2;
                        iVar3 = (iVar3 << 2) - iVar2;
                        iVar3 = (iVar3 << 2) - iVar2;
                        iVar3 >>= 15;
                        iVar3 -= 1525;
                        local_18.z = iVar3;
                        LevelManager.instance.FUN_4AAC0(0xfe780000, param1.screen, local_18);
                    }
                }
            }
            else
            {
                uVar7 = tVar5.vObject.flags;

                if ((uVar7 & 2) == 0)
                {
                    if ((uVar7 & 0x200) != 0)
                        return;
                }
                else
                {
                    oVar6 = GameManager.instance.FUN_4AC1C(0xfffc0000, tVar5.vObject);
                    oVar6.flags &= 0xfefffffd;
                    uVar7 = tVar5.vObject.flags;

                    if ((uVar7 & 0x200) == 0)
                    {
                        tVar5.vObject.flags = uVar7 & 0xfffffffd | 0x200;
                        return;
                    }
                }

                FUN_3094C(new Tuple<List<VigTuple>, VigTuple>(DAT_1078, tVar5));
            }
        }
    }

    public VigTuple FUN_335FC(VigObject param1)
    {
        VigTuple tVar1;

        tVar1 = new VigTuple(param1, 0);
        DAT_1098.Add(tVar1);
        return tVar1;
    }

    public void FUN_33728(SunLensFlare param1, Vector3Int param2)
    {
        param1.vTransform.position = Utilities.ApplyMatrixSV(DAT_F00.rotation, param1.vr);
        param1.vTransform.position.x <<= 6;
        param1.vTransform.position.y <<= 6;
        param1.vTransform.position.z <<= 6;
        param1.vMesh.FUN_21F70(param1.vTransform);
    }

    public VigObject FUN_34120(List<VigTuple> param1, uint param2, Vector3Int param3)
    {
        List<VigTuple> ppiVar1;
        VigTuple ppiVar2;
        uint uVar3;
        VigObject oVar4;
        uint uVar5;
        VigObject oVar6;

        uVar5 = 0xffffffff;
        oVar6 = null;
        ppiVar1 = param1;

        for (int i = 0; i < ppiVar1.Count; i++)
        {
            ppiVar2 = ppiVar1[i];
            oVar4 = ppiVar2.vObject;

            if (31 < oVar4.id && (oVar4.flags & 0x4000) != 0 && 
                (oVar4.flags & param2) != 0)
            {
                uVar3 = (uint)Utilities.FUN_29F6C(param3, oVar4.screen);

                if (uVar3 < uVar5)
                {
                    uVar5 = uVar3;
                    oVar6 = oVar4;
                }
            }
        }

        return oVar6;
    }

    private void FUN_347A8(uint param1)
    {
        uint uVar1;
        uint uVar2;
        int iVar3;
        int iVar4;
        VigObject oVar5;

        uVar1 = levelManager.DAT_C18[1];
        uVar2 = (uint)DAT_1038;

        if (uVar2 < uVar1)
        {
            do
            {
                iVar4 = (int)FUN_2AC5C();
                iVar3 = FUN_30428(DAT_1078, param1);
                iVar3 = iVar4 * iVar3;
                oVar5 = FUN_30498(DAT_1078, param1, iVar3 >> 15);
                oVar5 = FUN_4AC6C(param1, oVar5);

                if (oVar5 == null) break;

                uVar1 = levelManager.DAT_C18[1];
                uVar2 = (uint)++DAT_1038;
            } while (uVar2 < uVar1);
        }
    }

    private void FUN_349A0()
    {
        VigObject oVar1;
        int iVar2;
        int iVar3;
        int iVar5;

        iVar5 = 0;

        do
        {
            if (-1 < (sbyte)vehicles[2 + iVar5] && DAT_1030[iVar5] != 0)
            {
                oVar1 = FUN_302D4(worldObjs, 2, iVar5 + 1);

                if (oVar1 == null)
                {
                    if (gameMode == _GAME_MODE.Survival)
                    {
                        for (int i = 0; i < vehicles.Length - 2; i++)
                        {
                            if (vehicles[i + 2] == survival[currentSpawn])
                            {
                                currentSpawn++;

                                if (currentSpawn >= survival.Count)
                                    currentSpawn = 0;

                                i = -1;
                            }
                        }

                        vehicles[2 + iVar5] = (byte)survival[currentSpawn];
                    }

                    oVar1 = FUN_3208C(iVar5 + 1);

                    if (oVar1 != null)
                    {
                        iVar3 = 0;
                        oVar1.tags = 1;
                        oVar1.flags &= 0x1ffffff;

                        do
                        {
                            do
                            {
                                iVar2 = (int)FUN_2AC5C();
                            } while ((oVar1.flags & DAT_63A6C[(uint)(iVar2 << 2) >> 15]) != 0);

                            oVar1.flags |= DAT_63A6C[(uint)(iVar2 << 2) >> 15];
                            iVar3++;
                        } while (iVar3 < 3);

                        oVar1.FUN_3066C();
                        iVar3 = oVar1.vTransform.rotation.V02 * 4577;

                        if (iVar3 < 0)
                            iVar3 += 31;

                        oVar1.physics1.X = iVar3 >> 5;
                        oVar1.physics1.Y = 0;
                        iVar3 = oVar1.vTransform.rotation.V22 * 4577;

                        if (iVar3 < 0)
                            iVar3 += 31;

                        oVar1.physics1.Z = iVar3 >> 5;
                        DAT_1030[iVar5]--;
                    }
                }
            }

            iVar5++;
        } while (iVar5 < 4);
    }

    public void FUN_34B34()
    {
        bool bVar1;
        uint uVar3;
        VigTuple ppiVar5;
        int iVar6;
        TileData tVar6;
        VigObject oVar6;
        int iVar7;
        uint uVar8;
        int iVar9;
        VigObject oVar9;
        List<VigTuple> ppiVar10;
        uint uVar12;
        VigObject piVar12;
        Vehicle pivVar12;
        int iVar13;
        int iVar14;
        int iVar15;
        uint uVar16;
        int iVar17;
        VigTuple ppiVar18;
        VigTuple[] local_f8 = new VigTuple[32];
        VigObject local_78;
        uint local_74;
        uint local_30;
        int local_2c;
        uint local_28;
        VigObject local_24;
        int local_20;

        iVar15 = 0;
        iVar13 = 0;
        iVar14 = 0;

        if ((DAT_40 & 0x1000) == 0)
        {
            iVar17 = 1;

            if (DAT_C6E != 0)
                iVar17 = 2;
        }
        else
            iVar17 = 3;

        local_30 = 0;
        local_2c = 0;
        local_28 = 0xffffffff;
        local_24 = null;
        local_20 = 0;
        DAT_1130++;
        uVar16 = 0xfe000000;

        if (gameMode == _GAME_MODE.Arcade || gameMode == _GAME_MODE.Survival
            || gameMode == _GAME_MODE.Coop || gameMode == _GAME_MODE.Demo)
            FUN_349A0();

        if (gameMode == _GAME_MODE.Survival)
            iVar17 += DAT_CC4 / 25;

        ppiVar10 = worldObjs;

        for (int i = 0; i < ppiVar10.Count; i++)
        {
            ppiVar5 = ppiVar10[i];
            piVar12 = ppiVar5.vObject;

            if (piVar12.type == 2)
            {
                pivVar12 = (Vehicle)piVar12;

                if (piVar12.id < 0 && gameMode != _GAME_MODE.Demo)
                {
                    if (piVar12.maxHalfHealth != 0)
                    {
                        local_2c++;
                        local_30 |= 1U << (DAT_1128[~piVar12.id] & 31);

                        if (pivVar12.weapons[2] == null)
                            local_20 = 1;

                        for (iVar6 = 0; iVar6 < 3; iVar6++)
                        {
                            oVar9 = pivVar12.weapons[iVar6];

                            if (oVar9 != null)
                                if (oVar9.maxFullHealth << 1 <= oVar9.maxHalfHealth)
                                    uVar16 &= ~(0x1000000U << (oVar9.tags & 31));
                        }
                    }
                }
                else
                {
                    if (pivVar12.maxHalfHealth != 0)
                    {
                        uVar8 = piVar12.flags;

                        if ((uVar8 & 0x4000000) == 0)
                        {
                            if (piVar12.vTransform.rotation.V11 < 0)
                            {
                                if (pivVar12.wheelsType == _WHEELS.Sea && (uVar8 & 0x10000000) == 0)
                                    pivVar12.FUN_391AC();
                                else
                                    pivVar12.physics2.Z += 0x10000;
                            }
                            else
                            {
                                tVar6 = terrain.GetTileByPosition((uint)piVar12.vTransform.position.x, (uint)piVar12.vTransform.position.z);

                                if (((uVar8 & 0x20000000) == 0 ||
                                    (terrain.DAT_DE4 <= pivVar12.vTransform.position.x && piVar12.vTransform.position.x <= terrain.DAT_DE8 &&
                                    terrain.DAT_DEC <= pivVar12.vTransform.position.z && pivVar12.vTransform.position.z <= terrain.DAT_DF0 &&
                                    tVar6.DAT_10[3] != 7)) ||
                                    (pivVar12.tags == 1 && (DAT_1130 & 3) != 0))
                                {
                                    if (pivVar12.tags != 1 && pivVar12.tags != 4)
                                    {
                                        if (pivVar12.DAT_B3 * 3 >> 2 < pivVar12.acceleration && pivVar12.physics1.W < 457)
                                        {
                                            pivVar12.direction = -1;
                                            pivVar12.turning = 0;
                                            pivVar12.tags = 0;
                                            pivVar12.acceleration = (short)((uint)pivVar12.DAT_B3 >> 2);
                                        }
                                        else
                                        {
                                            if (pivVar12.id < 0)
                                            {
                                                if (pivVar12.target == null)
                                                {
                                                    pivVar12.tags = 3;
                                                    pivVar12.DAT_F4 = 0;
                                                }
                                                else
                                                    pivVar12.tags = 2;
                                            }
                                            else
                                            {
                                                uVar3 = (uint)Utilities.FUN_29F6C(playerObjects[0].vTransform.position, pivVar12.vTransform.position);

                                                if (gameMode == _GAME_MODE.Demo && uVar3 < local_28)
                                                {
                                                    local_28 = uVar3;
                                                    local_24 = piVar12;
                                                }

                                                //two-player

                                                pivVar12.target = playerObjects[0]; //tmp

                                                if (pivVar12.tags == 0)
                                                {
                                                    pivVar12.tags = 3;
                                                    pivVar12.DAT_F4 = 0;
                                                    local_f8[iVar13++] = new VigTuple(piVar12, uVar3);
                                                }
                                                else
                                                {
                                                    if (pivVar12.tags == 2)
                                                    {
                                                        if (0x1f4000 < uVar3)
                                                        {
                                                            pivVar12.tags = 3;
                                                            pivVar12.DAT_F4 = 0;
                                                            local_f8[iVar13++] = new VigTuple(piVar12, uVar3);
                                                        }
                                                        else
                                                        {
                                                            if (pivVar12.weapons[1] == null)
                                                                pivVar12.tags = 3;
                                                            else
                                                            {
                                                                if (pivVar12.body[0] == null)
                                                                {
                                                                    if (pivVar12.maxFullHealth < pivVar12.maxHalfHealth * 3)
                                                                    {
                                                                        iVar6 = Utilities.FUN_29F6C(pivVar12.target.vTransform.position, pivVar12.vTransform.position);

                                                                        if (2287 < pivVar12.target.physics1.W || 0x31fff < iVar6)
                                                                        {
                                                                            iVar14++;
                                                                            goto LAB_35128;
                                                                        }

                                                                        pivVar12.tags = 3;
                                                                    }
                                                                }
                                                                else if (pivVar12.maxFullHealth <
                                                                    (pivVar12.body[0].maxHalfHealth + pivVar12.body[1].maxHalfHealth) * 3)
                                                                {
                                                                    iVar6 = Utilities.FUN_29F6C(pivVar12.target.vTransform.position, pivVar12.vTransform.position);

                                                                    if (2287 < pivVar12.target.physics1.W || 0x31fff < iVar6)
                                                                    {
                                                                        iVar14++;
                                                                        goto LAB_35128;
                                                                    }
                                                                }

                                                                pivVar12.tags = 3;
                                                            }

                                                            pivVar12.DAT_F4 = 0;
                                                        }
                                                    }
                                                    else
                                                    {
                                                        if (pivVar12.weapons[1] != null)
                                                        {
                                                            if (pivVar12.body[0] == null)
                                                                uVar8 = pivVar12.maxHalfHealth;
                                                            else
                                                                uVar8 = (uint)(pivVar12.body[0].maxHalfHealth +
                                                                               pivVar12.body[1].maxHalfHealth);

                                                            if (pivVar12.maxFullHealth < (int)uVar8 * 3)
                                                                local_f8[iVar13++] = new VigTuple(piVar12, uVar3);
                                                        }
                                                    }
                                                }
                                            }
                                        }

                                        LAB_35128:
                                        if (pivVar12.weapons[0] == null)
                                            local_20 = 1;
                                    }
                                }
                                else
                                {
                                    oVar6 = FUN_31F1C(pivVar12.vTransform.position);
                                    pivVar12.vTransform = oVar6.vTransform;
                                    pivVar12.tags = 1;
                                    iVar6 = piVar12.vTransform.rotation.V02 * 4577;
                                    pivVar12.vTransform.position.y -= 0x8000;
                                    pivVar12.flags |= 0x20;

                                    if (iVar6 < 0)
                                        iVar6 += 31;

                                    pivVar12.physics1.X = iVar6 >> 5;
                                    pivVar12.physics1.Y = 0;
                                    iVar6 = pivVar12.vTransform.rotation.V22 * 4577;

                                    if (iVar6 < 0)
                                        iVar6 += 31;

                                    pivVar12.physics1.Z = iVar6 >> 5;
                                    pivVar12.physics2.X = 0;
                                    pivVar12.physics2.Y = 0;
                                    pivVar12.physics2.Z = 0;
                                }
                            }
                        }
                    }

                    if (piVar12.id != 0)
                        iVar15++;
                }
            }
        }

        if (local_20 != 0)
        {
            if (uVar16 == 0)
                uVar16 = 0xfe000000;
            
            FUN_347A8(uVar16);
        }

        FUN_34840();
        FUN_34914();

        if (gameMode == _GAME_MODE.Alone)
            return;

        if (gameMode == _GAME_MODE.Versus)
            return;

        if (DAT_C74 != 0)
            return;

        if (_GAME_MODE.Unk1 < gameMode)
        {
            if (gameMode == _GAME_MODE.Unk2)
            {
                if (1 < local_2c)
                    return;
            }
            else
            {
                if (local_30 == 3)
                    return;
            }

            DAT_C74 = 1;
            return;
        }

        if (gameMode == _GAME_MODE.Survival)
        {
            iVar9 = DAT_CC4 * 2;
            iVar6 = iVar9;

            if (iVar9 < 0)
                iVar6 = iVar9 + 3;

            iVar9 += (iVar6 >> 2) * -4;

            while (true)
            {
                bVar1 = iVar15 < DAT_CC4 + 1;

                if (4 < DAT_CC4 + 1)
                    bVar1 = iVar15 < 4;

                iVar6 = 0;

                if (!bVar1) break;

                do
                {
                    if (DAT_1030[iVar9] == 0)
                    {
                        DAT_1030[iVar9] = 1;
                        break;
                    }

                    iVar7 = 3;

                    if (iVar9 != 0)
                        iVar7 = iVar9 - 1;

                    iVar6++;
                    iVar9 = iVar7;
                } while (iVar6 < 4);

                iVar15++;
            }
        }

        if (iVar14 < iVar17)
        {
            do
            {
                bVar1 = false;
                iVar6 = 0;

                if (0 < iVar13 - 1)
                {
                    iVar9 = 0;

                    do
                    {
                        ppiVar18 = local_f8[iVar9];
                        ppiVar5 = local_f8[++iVar6];

                        if (local_f8[iVar6].flag < local_f8[iVar9].flag)
                        {
                            local_78 = ppiVar18.vObject;
                            local_74 = local_f8[iVar9].flag;
                            uVar12 = local_f8[iVar6].flag;
                            ppiVar18.vObject = ppiVar5.vObject;
                            local_f8[iVar9].flag = uVar12;
                            uVar12 = local_74;
                            ppiVar5.vObject = local_78;
                            local_f8[iVar6].flag = uVar12;
                            bVar1 = true;
                            break;
                        }

                        iVar9 = iVar6;
                    } while (iVar6 < iVar13 - 1);
                }
            } while (bVar1);

            iVar6 = 0;

            if (iVar14 < iVar17)
            {
                do
                {
                    if (iVar13 <= iVar6) break;

                    iVar14++;
                    piVar12 = local_f8[iVar6].vObject;
                    piVar12.tags = 2;
                    iVar6++;
                } while (iVar14 < iVar17);
            }
        }

        if (iVar15 == 0)
        {
            if (gameMode == _GAME_MODE.Quest || gameMode == _GAME_MODE.Quest2)
            {
                //quest
            }

            if (!gameEnded)
                UIManager.instance.WinScreen();

            gameEnded = true;
            DAT_C74 = 1;
            playerObjects[0].vCamera.flags |= 0x2000000;
        }

        if (gameMode == _GAME_MODE.Demo)
        {
            //demo
        }
    }

    private Navigation FUN_35A6C(Navigation param1, Navigation param2)
    {
        Navigation ppiVar1;
        Navigation ppiVar2;
        Navigation ppiVar3;

        ppiVar2 = param1;
        ppiVar3 = null;

        if (param1 != null)
        {
            do
            {
                ppiVar1 = ppiVar2;
                ppiVar2 = ppiVar1;

                if (param2.DAT_14 <= ppiVar1.DAT_14) break;

                ppiVar2 = ppiVar1.next;
                ppiVar3 = ppiVar1;
            } while (ppiVar2 != null);
        }

        param2.next = ppiVar2;

        if (ppiVar3 == null)
            return param2;

        ppiVar3.next = param2;
        return param1;
    }

    private void FUN_35AC0(Navigation param1)
    {
        int iVar1;

        if (param1 != null)
        {
            do
            {
                iVar1 = param1.aimpIndex + param1.DAT_10;
                levelManager.aimpData[iVar1 + 1] &= 0x9fff;
                param1 = param1.next;
            } while (param1 != null);
        }
    }

    private Navigation FUN_35B00(int param1, int param2)
    {
        ushort uVar1;
        Navigation piVar2;
        uint uVar3;
        int iVar4;
        int iVar5;
        uint uVar6;
        uint uVar7;

        piVar2 = DAT_1138;

        if (DAT_1138 != null)
            DAT_1138 = DAT_1138.next;

        uVar7 = 11;

        if (piVar2 != null)
        {
            uVar6 = (uint)param1 << 21;
            iVar5 = param2 << 21;
            iVar4 = 0;

            while (true)
            {
                uVar7--;
                uVar3 = uVar6 >> 31;

                if (iVar5 < 0)
                    uVar3 |= 2;

                uVar1 = levelManager.aimpData[iVar4 + (int)uVar3 + 1];
                
                if (uVar1 == 0) break;

                uVar6 <<= 1;

                if ((uVar1 & 0x8000) != 0) break;

                iVar5 <<= 1;
                iVar4 += uVar1 * 5;
            }

            uVar1 = (ushort)(-1 << (int)(uVar7 & 31));
            piVar2.aimpIndex = iVar4;
            piVar2.DAT_10 = (byte)uVar3;
            piVar2.DAT_11 = (byte)uVar7;
            piVar2.DAT_0C = (ushort)(param1 & uVar1);
            piVar2.DAT_0E = (ushort)(param2 & uVar1);
        }

        return piVar2;
    }

    private Navigation FUN_35BAC(Navigation param1, uint param2, uint param3)
    {
        ushort uVar2;
        Navigation piVar3;
        uint uVar4;
        int iVar5;
        uint uVar6;
        int puVar7;
        uint uVar8;

        piVar3 = DAT_1138;

        if (DAT_1138 != null)
        {
            puVar7 = param1.aimpIndex;
            uVar8 = param1.DAT_11;
            iVar5 = (int)(param1.DAT_0C ^ param2 | param1.DAT_0E ^ param3) >>
                    (int)(uVar8 & 31);

            while (true)
            {
                iVar5 >>= 1;
                uVar8++;

                if (iVar5 == 0) break;

                if (levelManager.aimpData[puVar7] == 0)
                {
                    DAT_1138 = DAT_1138.next;
                    return null;
                }

                puVar7 += levelManager.aimpData[puVar7] * -5;
            }

            uVar6 = param2 << (int)(32 - uVar8 & 31);
            iVar5 = (int)param3 << (int)(32 - uVar8 & 31);

            while (true)
            {
                uVar8--;
                uVar4 = uVar6 >> 31;

                if (iVar5 < 0)
                    uVar4 |= 2;

                uVar2 = levelManager.aimpData[puVar7 + uVar4 + 1];

                if (uVar2 == 0) break;

                uVar6 <<= 1;

                if ((uVar2 & 0x8000) != 0) break;

                iVar5 <<= 1;
                puVar7 += uVar2 * 5;
            }

            uVar2 = (ushort)(-1 << (int)(uVar8 & 31));
            DAT_1138 = DAT_1138.next;
            piVar3.aimpIndex = puVar7;
            piVar3.DAT_10 = (byte)uVar4;
            piVar3.DAT_11 = (byte)uVar8;
            piVar3.DAT_0C = (ushort)(param2 & uVar2);
            piVar3.DAT_0E = (ushort)(param3 & uVar2);
        }

        return piVar3;
    }

    private Navigation FUN_35CBC(Navigation param1)
    {
        ushort uVar1;
        Navigation puVar2;
        int iVar3;
        Navigation puVar4;
        int iVar5;
        ushort uVar6;

        puVar4 = null;
        uVar1 = levelManager.aimpData[param1.aimpIndex + param1.DAT_10 + 1];
        uVar6 = 0xf00;

        if (uVar1 != 0)
            uVar6 = uVar1;

        iVar5 = param1.DAT_0E + (1 << (param1.DAT_11 & 31));

        if ((uVar6 & 0x100) != 0)
        {
            puVar2 = FUN_35BAC(param1, (uint)param1.DAT_0C - 1, param1.DAT_0E);

            while(puVar2 != null)
            {
                if (levelManager.aimpData[puVar2.aimpIndex + puVar2.DAT_10 + 1] != 0)
                {
                    puVar2.next = puVar4;
                    puVar4 = puVar2;
                }

                if (iVar5 <= puVar2.DAT_0E + (1 << (puVar2.DAT_11 & 31))) break;

                puVar2 = FUN_35BAC(puVar2, (uint)param1.DAT_0C - 1, (uint)puVar2.DAT_0E + (uint)(1 << (puVar2.DAT_11 & 31)));
            }
        }

        if ((uVar6 & 0x200) != 0)
        {
            puVar2 = FUN_35BAC(param1, param1.DAT_0C + (uint)(1 << (param1.DAT_11 & 31)), param1.DAT_0E);

            while (puVar2 != null)
            {
                if (levelManager.aimpData[puVar2.aimpIndex + puVar2.DAT_10 + 1] != 0)
                {
                    puVar2.next = puVar4;
                    puVar4 = puVar2;
                }

                if (iVar5 <= puVar2.DAT_0E + (1 << (puVar2.DAT_11 & 31))) break;

                puVar2 = FUN_35BAC(puVar2, puVar2.DAT_0C, puVar2.DAT_0E + (uint)(1 << (puVar2.DAT_11 & 31)));
            }
        }

        iVar5 = param1.DAT_0C + (1 << (param1.DAT_11 & 31));

        if ((uVar6 & 0x800) != 0)
        {
            puVar2 = FUN_35BAC(param1, param1.DAT_0C, (uint)param1.DAT_0E - 1);

            while (puVar2 != null)
            {
                if (levelManager.aimpData[puVar2.aimpIndex + puVar2.DAT_10 + 1] != 0)
                {
                    puVar2.next = puVar4;
                    puVar4 = puVar2;
                }

                iVar3 = puVar2.DAT_0C + (1 << (puVar2.DAT_11 & 31));

                if (iVar5 <= iVar3) break;

                puVar2 = FUN_35BAC(puVar2, (uint)iVar3, (uint)param1.DAT_0E - 1);
            }
        }

        if ((uVar6 & 0x400) != 0)
        {
            puVar2 = FUN_35BAC(param1, param1.DAT_0C, param1.DAT_0E + (uint)(1 << (param1.DAT_11 & 31)));

            while (puVar2 != null)
            {
                if (levelManager.aimpData[puVar2.aimpIndex + puVar2.DAT_10 + 1] != 0)
                {
                    puVar2.next = puVar4;
                    puVar4 = puVar2;
                }

                iVar3 = puVar2.DAT_0C + (1 << (puVar2.DAT_11 & 31));

                if (iVar5 <= iVar3) break;

                puVar2 = FUN_35BAC(puVar2, (uint)iVar3, puVar2.DAT_0E);
            }
        }

        if ((uVar6 & 0x1000) != 0)
        {
            iVar5 = param1.aimpIndex + 5 + param1.DAT_10;
            puVar2 = FUN_35BAC(param1, param1.DAT_0C + (uint)(sbyte)levelManager.aimpData[iVar5 + 1],
                               param1.DAT_0E + (uint)(sbyte)(levelManager.aimpData[iVar5 + 1] >> 8));

            if (puVar2 != null)
            {
                if (levelManager.aimpData[puVar2.aimpIndex + puVar2.DAT_10 + 1] != 0)
                {
                    puVar2.next = puVar4;
                    puVar4 = puVar2;
                }
            }
        }

        return puVar4;
    }

    public int FUN_35FF0(Navigation param1, short param2, short param3)
    {
        int iVar1;
        long lVar2;
        int iVar3;

        iVar3 = (1 << (param1.DAT_11 & 31)) / 2;
        iVar1 = (param1.DAT_0C + iVar3) - param2;
        iVar3 = (param1.DAT_0E + iVar3) - param3;
        lVar2 = Utilities.SquareRoot(iVar1 * iVar1 + iVar3 * iVar3);
        return (int)lVar2 << 7;
    }

    public short[] FUN_36060(Vector3Int param1, Vector3Int param2, uint param3, uint param4)
    {
        return FUN_36084(param1, param2, param3, param4);
    }

    private short[] FUN_36084(Vector3Int param1, Vector3Int param2, uint param3, uint param4)
    {
        ushort uVar1;
        bool bVar2;
        Navigation puVar3;
        int iVar4;
        short[] aVar4;
        Navigation puVar4;
        Navigation puVar5;
        Navigation puVar6;
        Navigation puVar7;
        int iVar8;
        Navigation puVar9;
        int puVar10;
        int iVar11;
        int psVar12;
        Navigation puVar13;
        Navigation puVar14;
        Navigation puVar16;
        int iVar15;
        int iVar17;

        iVar4 = (int)Utilities.FUN_14A54();
        iVar17 = iVar4;
        iVar15 = 0x3fe;
        DAT_1138 = levelManager.ainav;
        puVar6 = levelManager.ainav;

        do
        {
            puVar16 = new Navigation();
            puVar6.next = puVar16;
            iVar15--;
            puVar6 = puVar16;
        } while (-1 < iVar15);

        puVar16.next = null;

        puVar5 = FUN_35B00(param2.x >> 16, param2.z >> 16);
        puVar6 = puVar5;

        if (levelManager.aimpData[puVar5.aimpIndex + puVar5.DAT_10 + 1] == 0)
        {
            puVar6 = FUN_35CBC(puVar5);

            if (puVar6 == null)
                return null;

            puVar5.next = DAT_1138;
            DAT_1138 = puVar5;
        }

        puVar7 = FUN_35B00(param1.x >> 16, param1.z >> 16);
        puVar5 = puVar7;

        if (levelManager.aimpData[puVar7.aimpIndex + puVar7.DAT_10 + 1] == 0)
        {
            puVar5 = FUN_35CBC(puVar7);

            if (puVar5 == null)
                return null;

            puVar7.next = DAT_1138;
            DAT_1138 = puVar7;
        }

        puVar5.DAT_18 = 0;
        iVar8 = FUN_35FF0(puVar16, (short)puVar6.DAT_0C, (short)puVar6.DAT_0E);
        puVar5.DAT_14 = iVar8;
        puVar5.next = null;
        puVar5.DAT_04 = null;
        puVar16 = null;

        while (puVar5 != null)
        {
            if ((param4 & 2) == 0)
            {
                iVar15 = (int)Utilities.FUN_14A54();
                iVar17 += UnityEngine.Random.Range(aiMin, aiMax);
                bVar2 = iVar17 > 1000;
                //bVar2 = param3 < (uint)(iVar15 - iVar4);
                bVar2 = false;
            }
            else
            {
                param3--;
                bVar2 = param3 == 0;
            }

            if (bVar2 && (param4 & 1) != 0) break;

            puVar7 = puVar5.next;

            if (bVar2 || (puVar5.aimpIndex == puVar6.aimpIndex && puVar5.DAT_10 == puVar6.DAT_10))
            {
                iVar4 = puVar5.aimpIndex + puVar5.DAT_10;
                levelManager.aimpData[iVar4 + 1] &= 0x9fff;
                puVar4 = puVar5.DAT_04;
                iVar15 = 0;

                while(puVar4 != null)
                {
                    puVar4 = puVar4.DAT_04;
                    iVar15++;
                }

                iVar15 = iVar15 - (iVar15 != 0 ? 1 : 0);
                aVar4 = new short[(iVar15 + 2) * 2];
                puVar10 = iVar15 * 2;
                aVar4[puVar10 + 3] = 0;
                aVar4[puVar10 + 2] = 0;
                aVar4[puVar10] = (short)(param2.x >> 16);
                iVar15--;
                aVar4[puVar10 + 1] = (short)(param2.z >> 16);

                if (iVar15 != -1)
                {
                    psVar12 = iVar15 * 2;

                    do
                    {
                        puVar5 = puVar5.DAT_04;
                        aVar4[psVar12] = (short)(puVar5.DAT_0C + ((1 << (puVar5.DAT_11 & 31)) / 2));
                        iVar15--;
                        aVar4[psVar12 + 1] = (short)(puVar5.DAT_0E + ((1 << (puVar5.DAT_11 & 31)) / 2));
                        psVar12 -= 2;
                    } while (iVar15 != -1);
                }

                FUN_35AC0(puVar7);
                FUN_35AC0(puVar16);
                return aVar4;
            }

            puVar9 = FUN_35CBC(puVar5);
            puVar3 = puVar9;

            while (puVar3 != null)
            {
                puVar9 = puVar3.next;
                puVar3.DAT_18 = puVar5.DAT_18 + ((byte)levelManager.aimpData[puVar3.aimpIndex + puVar3.DAT_10 + 1] << (puVar3.DAT_11 & 31));
                iVar15 = puVar3.aimpIndex + puVar3.DAT_10;
                uVar1 = levelManager.aimpData[iVar15 + 1];
                puVar14 = null;

                if ((uVar1 & 0x4000) != 0)
                {
                    puVar13 = puVar7;

                    if ((uVar1 & 0x2000) != 0)
                        puVar13 = puVar16;

                    if (puVar3.aimpIndex != puVar13.aimpIndex ||
                        puVar3.DAT_10 != puVar13.DAT_10)
                    {
                        do
                        {
                            do
                            {
                                puVar14 = puVar13;
                                puVar13 = puVar14.next;
                            } while (puVar3.aimpIndex != puVar13.aimpIndex);
                        } while (puVar3.DAT_10 != puVar13.DAT_10);
                    }

                    puVar3.next = DAT_1138;
                    iVar11 = puVar13.DAT_18;
                    iVar15 = puVar3.DAT_18;
                    DAT_1138 = puVar3;

                    if (0 < iVar11 - iVar15)
                    {
                        if (puVar14 == null)
                        {
                            if ((uVar1 & 0x2000) == 0)
                                puVar7 = puVar13.next;
                            else
                                puVar16 = puVar13.next;
                        }
                        else
                            puVar14.next = puVar13.next;

                        levelManager.aimpData[puVar13.aimpIndex + puVar13.DAT_10 + 1] = (ushort)(uVar1 & 0xdfff);
                        iVar8 = puVar3.DAT_18;
                        puVar13.DAT_04 = puVar5;
                        puVar13.DAT_18 = iVar8;
                        puVar13.DAT_14 -= iVar11 - iVar15;
                        puVar7 = FUN_35A6C(puVar7, puVar13);
                    }
                }
                else
                {
                    levelManager.aimpData[iVar15 + 1] = (ushort)(uVar1 | 0x4000);
                    iVar15 = FUN_35FF0(puVar3, (short)puVar6.DAT_0C, (short)puVar6.DAT_0E);
                    puVar3.DAT_04 = puVar5;
                    puVar3.DAT_14 = puVar3.DAT_18 + iVar15;
                    puVar7 = FUN_35A6C(puVar7, puVar3);
                }

                puVar3 = puVar9;
            }

            puVar5.next = puVar16;
            iVar15 = puVar5.aimpIndex + puVar5.DAT_10;
            levelManager.aimpData[iVar15 + 1] |= 0x6000;
            puVar16 = puVar5;
            puVar5 = puVar7;
        }

        FUN_35AC0(puVar5);
        FUN_35AC0(puVar16);
        return null;
    }

    private void FUN_380D8(Vector3Int param1, int param2, VigMesh param3, VigTransform param4, int param5)
    {
        int iVar1;
        int iVar2;
        Matrix3x3 local_30;
        Vector3Int local_1c;
        VigTransform vTransform;

        local_1c = Utilities.FUN_24148(param4, param1);
        local_1c.x = (local_1c.x * param5) >> 8;
        local_1c.y = (local_1c.y * param5) >> 8;
        local_1c.z = (local_1c.z * param5) >> 8;

        if ((local_1c.x - param2) * 0x100 < local_1c.z * 0xa0 && 
            local_1c.z * -0xa0 < (local_1c.x + param2) * 0x100 && 
            (local_1c.y - param2) * 0x100 < local_1c.z * 0x78 && 
            local_1c.z * -0x78 < (local_1c.y + param2) * 0x100)
        {
            iVar1 = (param5 & 0x1ff) * 32;
            iVar2 = DAT_65C90[iVar1 / 2 + 1] * param2;
            local_30 = new Matrix3x3();
            local_30.V00 = (short)(iVar2 >> 16);

            if (iVar2 < 0)
                local_30.V00 = (short)((iVar2 + 0xfffff) >> 16);

            local_30.V00 >>= 4;
            param2 = DAT_65C90[iVar1 / 2] * param2;

            if (param2 < 0)
                param2 += 0xfffff;

            local_30.V10 = (short)(param2 >> 20);
            local_30.V01 = (short)-local_30.V10;
            local_30.V22 = 0x1000;
            local_30.V21 = 0;
            local_30.V20 = 0;
            local_30.V12 = 0;
            local_30.V02 = 0;
            local_30.V11 = local_30.V00;
            vTransform = new VigTransform();
            vTransform.rotation = local_30;
            vTransform.position = param1;
            param3.FUN_21F70(vTransform);
            Vector3 position = new Vector3(
                (float)vTransform.position.x / translateFactor,
                (float)-vTransform.position.y / translateFactor,
                (float)vTransform.position.z / translateFactor);
            Vector3 relativePos = position - LevelManager.instance.defaultCamera.transform.position;
            Quaternion rotation = Quaternion.LookRotation(relativePos, Vector3.up);
            Vector3 euler = rotation.eulerAngles;
            rotation = Quaternion.Euler(euler.x, euler.y, param5 * 180f / 256f);
            Vector3 scale = vTransform.rotation.Scale;
            Vector3 interpolatedPosition = Vector3.Lerp(LevelManager.instance.defaultCamera.transform.position, position, param5 / 256f);
            Matrix4x4 matrix = Matrix4x4.TRS(interpolatedPosition, rotation, scale);
            Graphics.DrawMesh(param3.GetMesh(), matrix, targetHUD, 8);
        }
    }

    public void FUN_3827C(Vehicle param1, VigTransform param2)
    {
        short sVar1;
        VigObject oVar2;
        int iVar3;
        Vector3Int v3Var4;
        Vehicle vVar5;
        int iVar6;
        VigMesh mVar7;

        vVar5 = (Vehicle)param1.target;

        if (vVar5 != null)
        {
            oVar2 = param1.weapons[param1.weaponSlot];
            v3Var4 = vVar5.screen;

            if (vVar5.jammer == 0)
            {
                iVar3 = 0;
                v3Var4 = vVar5.vTransform.position;

                if (oVar2 != null)
                    iVar3 = (oVar2.flags & 0x4000) != 0 ? 1 : 0;

                sVar1 = param1.DAT_C6;
                iVar6 = vVar5.DAT_58;
                mVar7 = DAT_1150[iVar3];
            }
            else
            {
                sVar1 = param1.DAT_C6;
                iVar6 = vVar5.DAT_58;
                mVar7 = DAT_1150[2];
            }

            FUN_380D8(v3Var4, iVar6, mVar7, param2, sVar1);
        }

        if (param1.jammer != 0 || (DAT_40 & 0x200000) != 0)
            FUN_380D8(param1.screen, param1.DAT_58, DAT_1150[3], param2, 0x100);
    }

    public uint FUN_4A970(uint param1, uint param2)
    {
        int iVar1;
        int iVar2;
        
        iVar2 = ~DAT_C6E + 3;

        while (true)
        {
            if (iVar2 == -1)
                return param2;

            do
            {
                do
                {
                    iVar1 = (int)FUN_2AC5C();
                    param2 = (uint)(iVar1 * 0x12) >> 0xf;
                } while (DAT_63FA4[param2] < 0);
            } while ((param1 & 0x40000 << (int)(param2 & 0x1f)) == 0);

            if (param2 == 13) break;

            iVar2--;

            if (-1 < (int)param1)
                return param2;
        }

        return 13;
    }

    public VigObject FUN_4AB18(uint param1, VigObject param2)
    {
        bool bVar1;
        short sVar2;
        VigObject oVar3;
        int iVar4;

        if (param2 == null)
            oVar3 = null;
        else
        {
            oVar3 = null;

            if ((param1 & param2.flags) != 0)
            {
                iVar4 = (int)FUN_4A970(param1 & param2.flags, 0);

                if (iVar4 == 3)
                    DAT_101C++;

                bVar1 = false;

                if (7 < iVar4 && (int)param2.flags < 0)
                    bVar1 = (param2.flags & 0x7e000000) != 0;

                param2.tags = (sbyte)(bVar1 ? 1 : 0);

                if (bVar1)
                    sVar2 = 5;
                else
                    sVar2 = DAT_63FA4[iVar4];

                param2.DAT_1A = sVar2;
                oVar3 = param2.FUN_31DDC();
                oVar3.flags |= 0x1000000;
                oVar3.DAT_1A = DAT_63FA4[iVar4];
            }
        }

        return oVar3;
    }

    public VigObject FUN_4AC1C(uint param1, VigObject param2)
    {
        VigObject oVar1;

        oVar1 = FUN_4AB18(param1, param2);

        if (oVar1 != null)
        {
            param2.flags |= 0x8000;
            oVar1.FUN_3066C();
        }

        return oVar1;
    }

    public VigObject FUN_4AC6C(uint param1, VigObject param2)
    {
        VigObject oVar1;
        int iVar1;
        VigObject oVar2;
        int iVar2;

        iVar1 = 0;
        oVar2 = param2;

        if (param2 != null)
        {
            do
            {
                oVar2 = oVar2.child;
                iVar1++;
            } while (oVar2 != null);
        }

        iVar2 = (int)FUN_2AC5C();
        iVar2 = iVar2 * iVar1 >> 15;
        oVar1 = param2;

        for (iVar2--; iVar2 != -1; iVar2--)
            oVar1 = oVar1.child;

        oVar2 = FUN_4AB18(param1, oVar1);

        if (oVar2 != null)
        {
            param2.flags |= 0x8000;
            oVar2.FUN_3066C();
        }

        return oVar2;
    }

    public VigCamera FUN_4B914(Vehicle param1, ushort param2, Camera cam)
    {
        VigCamera ppcVar1;

        GameObject obj = new GameObject();
        ppcVar1 = obj.AddComponent<VigCamera>();
        cam.transform.parent = obj.transform;
        ppcVar1.target = param1;
        ppcVar1.maxHalfHealth = param2;
        ppcVar1.flags |= 0x1000000;
        ppcVar1.FUN_4B898();
        return ppcVar1;
    }

    public void FUN_4C4BC(VigShadow param1)
    {
        if (param1 != null)
        {
            FUN_1FEB8(param1.vMesh);
            Destroy(param1.gameObject);
        }
    }

    public void FUN_50B38()
    {
        bool bVar1;
        int iVar4;
        Vector3Int local_18;
        List<Junction> roadList = levelManager.roadList;

        for (int i = 0; i < roadList.Count; i++)
        {
            bVar1 = FUN_2E22C_2(roadList[i].pos, roadList[i].DAT_18);

            if (bVar1)
            {
                local_18 = Utilities.FUN_24148_2(DAT_F00, roadList[i].pos);

                if (local_18.z < 0x200000)
                {
                    roadList[i].vTransform.position = roadList[i].pos;
                    roadList[i].FUN_4F804(local_18);
                }
                else
                    roadList[i].ClearRoadData();
            }
            else
                roadList[i].ClearRoadData();
        }

        if (0 < levelManager.DAT_1184)
        {
            for (int i = 0; i < levelManager.DAT_1184; i++)
                if (levelManager.juncList[i].DAT_18 != null)
                    FUN_507DC(levelManager.juncList[i]);
        }
    }

    public short[] FUN_51ED4(Vector3Int param1, Vector3Int param2, uint param3, uint param4)
    {
        if (DAT_D0C != 0)
        {
            param3 >>= 11;
            param4 |= 2;
        }

        return FUN_36060(param1, param2, param3, param4);
    }

    // Start is called before the first frame update
    void Awake()
    {
        if (instance == null)
        {
            instance = this;
        }

        DAT_08 = new ushort[,] { { 0, 0, 0, 0x321, 0x2100, 0x2143 }, 
                                 { 0, 0, 0, 0x321, 0x2100, 0x2100 } }; //tmp
        gravityFactor = 11520;
        DAT_36 = true;
        DAT_E1C = 0x1fff;
        vehicles = new byte[8];
        playerObjects = new Vehicle[2];
        cameraObjects = new VigCamera[2];
        DAT_1030 = new sbyte[4];
        DAT_1068 = new List<VigTuple>();
        DAT_1078 = new List<VigTuple>();
        DAT_1088 = new List<VigTuple>();
        DAT_1098 = new List<VigTuple>();
        DAT_10A8 = new List<VigTuple>();
        DAT_10C8 = new List<VigTuple>();
        DAT_10D8 = new List<VigTuple2>();
        DAT_1110 = new List<VigTuple>();
        DAT_1150 = new VigMesh[4];
        worldObjs = new List<VigTuple>();
        interObjs = new List<VigTuple>();
        hit = new HitDetection(new byte[0]);

        DAT_D18 = new byte[2];
        DAT_D19 = new byte[2];
        DAT_D1A = new byte[2];
        DAT_D1B = new byte[2];
        DAT_D28 = new byte[2, 8];
        DAT_C80 = new sbyte[2];
        DAT_CF0 = new ushort[2];
        DAT_CF4 = new byte[2, 2];
        DAT_CFC = new byte[4];
        DAT_1128 = new sbyte[6];

        for (int i = 0; i < 24; i++)
            voices[i] = gameObject.AddComponent<AudioSource>();
    }

    private void Start()
    {
        
    }

    // Update is called once per frame
    void Update()
    {
        if (inDebug) return;

        if (Input.GetKeyDown(KeyCode.Escape))
            LoadDebug();

        FUN_3827C(playerObjects[0], DAT_F00);
    }

    private bool atStart = false;

    //FUN_132CC
    private void FixedUpdate()
    {
        short sVar1;
        int uVar4;
        int uVar10;
        int uVar13;
        int uVar15;
        uint uVar20;
        VigObject oVar7;
        VigCamera cVar7;
        Vehicle vVar12;
        Color32 uVar17;
        uint uVar18;
        uint local_78;

        if (inDebug) return;

        uVar17 = UIManager.instance.flash.color;

        if (uVar17.r != 0 || uVar17.g != 0 ||
            uVar17.b != 0 || uVar17.a != 0)
            UIManager.instance.flash.color = new Color32(0, 0, 0, 0);

        local_78 = 1;

        for (int i = 0; i < local_78; i++)
        {
            DAT_28++;
            timer = (ushort)DAT_28;
            uVar20 = 0;

            if (i == local_78 - 1)
                uVar20 = local_78;

            //terrain.UpdatePosition();
            FUN_313C8((int)uVar20);
            FUN_31440((uint)DAT_28);

            Profiler.BeginSample("Collisions");

            if (drawObjects)
                 FUN_31728();

            Profiler.EndSample();
        }

        Profiler.BeginSample("Animation");
        FUN_31360((ushort)(DAT_28 & 0xffff));
        Profiler.EndSample();

        DAT_24 = 1 - DAT_24;

        if (screenMode == _SCREEN_MODE.Horizontal)
        {
            uVar4 = 320;
            uVar13 = 160;
            uVar10 = 120;
            uVar15 = 60;
            FUN_2DF30(uVar4, uVar10, uVar13, uVar15);
        }
        else
        {
            if (screenMode < _SCREEN_MODE.Vertical)
            {
                uVar4 = 320;

                if (screenMode == _SCREEN_MODE.Whole)
                {
                    uVar10 = 240;
                    uVar13 = 160;
                    uVar15 = 120;
                    FUN_2DF30(uVar4, uVar10, uVar13, uVar15);
                }
            }
            else
            {
                if (screenMode == _SCREEN_MODE.Vertical)
                {
                    uVar4 = 160;
                    uVar10 = 240;
                    uVar13 = 80;
                    uVar15 = 120;
                    FUN_2DF30(uVar4, uVar10, uVar13, uVar15);
                }

                uVar4 = 160;

                if (screenMode == _SCREEN_MODE.Unknown)
                {
                    uVar13 = 80;
                    uVar10 = 120;
                    uVar15 = 60;
                    FUN_2DF30(uVar4, uVar10, uVar13, uVar15);
                }
            }
        }

        if (screenMode == _SCREEN_MODE.Whole)
        {
            if (gameMode < _GAME_MODE.Versus || playerObjects[0].maxHalfHealth != 0)
            {
                vVar12 = playerObjects[0];

                if (playerObjects[1] != null)
                {
                    uVar18 = playerObjects[1].flags;
                    oVar7 = playerObjects[1];

                    if ((uVar18 & 0x2000000) == 0)
                        oVar7.flags = uVar18 & 0xfffffffd;
                }
            }
            else
            {
                uVar18 = playerObjects[0].flags;
                oVar7 = playerObjects[0];
                vVar12 = playerObjects[1];

                if ((uVar18 & 0x2000000) == 0)
                    oVar7.flags = uVar18 & 0xfffffffd;
            }

            if (vVar12.view == _CAR_VIEW.Close)
            {
                if ((vVar12.flags & 0x2000000) != 0)
                {
                    cVar7 = vVar12.vCamera;
                    sVar1 = cVar7.fieldOfView;
                    oVar7 = cVar7;
                }
                else
                {
                    oVar7 = vVar12.closeViewer;
                    vVar12.flags |= 2;
                    sVar1 = vVar12.vCamera.fieldOfView;
                }
            }
            else
            {
                if ((vVar12.flags & 0x2000000) == 0)
                    vVar12.flags &= 0xfffffffd;

                cVar7 = vVar12.vCamera;
                sVar1 = cVar7.fieldOfView;
                oVar7 = cVar7;
            }

            FUN_2D278(oVar7, sVar1);
            terrain.DAT_BDFF0[0] = DAT_F00;
            //FUN_14B3C

            //if (!atStart)
            //{
                FUN_31678();
                atStart = true;
            //}

            if (DAT_1084 < 0) DAT_1084 = 0;

            if (vVar12.view != _CAR_VIEW.NoHUD)
                UIManager.instance.UpdateHUD(playerObjects[0], DAT_28);

            UIManager.instance.RefreshFlares(DAT_28);
            UIManager.instance.RefreshCameras();
            UIManager.instance.RefreshDestroyed(DAT_CC4);
        }
    }

    private void FUN_1C158()
    {
        bool bVar1;
        bool bVar3;
        uint uVar4;
        int iVar5;
        int iVar6;
        int piVar7;
        int iVar8;
        int iVar9;
        int piVar11;
        int iVar13;
        int iVar14;
        int piVar17;
        int iVar18;
        int iVar19;
        int iVar21;
        int iVar22;
        uint uVar23;
        int iVar24;
        int iVar25;
        int iVar26;
        int iVar27;
        int unaff_s6;
        Vector3Int local_c0;
        List<Vector2Int> local_b0;
        Vector3Int local_30;
        int local_28;
        List<Vector3Int> aiStack240;

        if (gameMode < _GAME_MODE.Coop)
        {
            DAT_DB4 = 80;
            DAT_DB6 = 40;
            DAT_DB8 = 20;
        }
        else
        {
            DAT_DB4 = 48;
            DAT_DB6 = 24;
            DAT_DB8 = 12;
        }

        Utilities.SetRotMatrix(DAT_F28.rotation);
        local_c0 = new Vector3Int();
        local_c0.x = DAT_F28.position.x;

        if (DAT_F28.position.x < 0)
            local_c0.x = DAT_F28.position.x + 255;

        local_c0.x = local_c0.x >> 8;
        local_c0.y = DAT_F28.position.y;

        if (DAT_F28.position.y < 0)
            local_c0.y = DAT_F28.position.y + 255;

        local_c0.y = local_c0.y >> 8;
        local_c0.z = DAT_F28.position.z;

        if (DAT_F28.position.z < 0)
            local_c0.z = DAT_F28.position.z + 255;

        local_c0.z = local_c0.z >> 8;
        terrain.UpdatePosition((Vector3)DAT_F28.position / translateFactor);
        DAT_1f800084 = new Vector3Int(-local_c0.x, -local_c0.y, -local_c0.z);
        Coprocessor.translationVector._trx = local_c0.x;
        Coprocessor.translationVector._try = local_c0.y;
        Coprocessor.translationVector._trz = local_c0.z;
        iVar26 = (DAT_DB4 * (DAT_EDC / 2) * 256) / DAT_ED8;
        uVar23 = 0;
        iVar24 = 0;
        iVar27 = (DAT_DB4 * (DAT_F20 / 2) * 256) / DAT_ED8;
        //iVar27 = 0; //not in the original code
        uVar4 = 0;
        local_30 = new Vector3Int();
        aiStack240 = new List<Vector3Int>();

        do
        {
            local_30.x = iVar26;

            if (uVar4 == 0)
                local_30.x = -local_30.x;

            local_30.y = iVar27;

            if ((uVar23 & 2) == 0)
                local_30.y = -local_30.y;

            uVar23++;
            local_30.z = DAT_DB4 << 8;
            aiStack240.Add(Utilities.FUN_23F58(local_30));
            uVar4 = uVar23 & 1;
        } while ((int)uVar23 < 4);

        iVar24 = 0;
        iVar26 = 0;
        local_b0 = new List<Vector2Int>();
        aiStack240.Add(local_c0);

        do
        {
            if ((uint)aiStack240[iVar26].y + 8 < 0x3001)
            {
                local_b0.Add(new Vector2Int(aiStack240[iVar26].x, aiStack240[iVar26].z));
                iVar24++;
            }

            iVar26++;
        } while (iVar26 < 5);

        iVar26 = 0;

        do
        {
            uVar4 = DAT_639A0[iVar26 * 2];
            uVar23 = DAT_639A0[iVar26 * 2 + 1];
            piVar17 = (int)uVar4;
            piVar7 = (int)uVar23;

            if (aiStack240[piVar7].y < -8)
            {
                if (-9 < aiStack240[piVar17].y)
                {
                    iVar27 = aiStack240[piVar17].x;
                    local_b0.Add(new Vector2Int(
                        iVar27 + (aiStack240[piVar7].x - iVar27) * (-8 - aiStack240[piVar17].y) /
                                 (aiStack240[piVar7].y - aiStack240[piVar17].y),
                        aiStack240[piVar17].z +
                        ((aiStack240[piVar7].z - aiStack240[piVar17].z) *
                        (-8 - aiStack240[piVar17].y)) /
                        (aiStack240[piVar7].y - aiStack240[piVar17].y)));
                    iVar24++;
                }
            }
            else
            {
                if (-9 >= aiStack240[piVar17].y)
                {
                    iVar27 = aiStack240[piVar17].x;
                    local_b0.Add(new Vector2Int(
                        iVar27 + (aiStack240[piVar7].x - iVar27) * (-8 - aiStack240[piVar17].y) /
                                 (aiStack240[piVar7].y - aiStack240[piVar17].y),
                        aiStack240[piVar17].z +
                        ((aiStack240[piVar7].z - aiStack240[piVar17].z) *
                        (-8 - aiStack240[piVar17].y)) /
                        (aiStack240[piVar7].y - aiStack240[piVar17].y)));
                    iVar24++;
                }
            }

            if (aiStack240[piVar7].y < 0x2ff9)
            {
                if (aiStack240[piVar17].y >= 0x2ff9)
                {
                    iVar27 = aiStack240[piVar17].x;
                    local_b0.Add(new Vector2Int(
                          iVar27 + (aiStack240[piVar7].x - iVar27) * (0x2ff8 - aiStack240[piVar17].y) /
                                    (aiStack240[piVar7].y - aiStack240[piVar17].y),
                          aiStack240[piVar17].z +
                          ((aiStack240[piVar7].z - aiStack240[piVar17].z) *
                          (0x2ff8 - aiStack240[piVar17].y)) /
                          (aiStack240[piVar7].y - aiStack240[piVar17].y)));
                    iVar24++;
                }
            }
            else
            {
                if (aiStack240[piVar17].y < 0x2ff9)
                {
                    iVar27 = aiStack240[piVar17].x;
                    local_b0.Add(new Vector2Int(
                          iVar27 + (aiStack240[piVar7].x - iVar27) * (0x2ff8 - aiStack240[piVar17].y) /
                                    (aiStack240[piVar7].y - aiStack240[piVar17].y),
                          aiStack240[piVar17].z +
                          ((aiStack240[piVar7].z - aiStack240[piVar17].z) *
                          (0x2ff8 - aiStack240[piVar17].y)) /
                          (aiStack240[piVar7].y - aiStack240[piVar17].y)));
                    iVar24++;
                }
            }

            iVar26++;
            unaff_s6 = 0; //not in the original code

            if (7 < iVar26)
            {
                if (iVar24 != 0)
                {
                    iVar26 = 0x7fffffff;
                    iVar13 = 0x7fffffff;
                    iVar27 = 0;

                    if (0 < iVar24)
                    {
                        do
                        {
                            iVar8 = local_b0[iVar27].y;

                            if (iVar8 < iVar26 || (iVar8 == iVar26 && local_b0[iVar27].x < iVar13))
                            {
                                iVar13 = local_b0[iVar27].x;
                                iVar26 = iVar8;
                                unaff_s6 = iVar27;
                            }
                            iVar27++;
                        } while (iVar27 < iVar24);
                    }

                    local_b0[unaff_s6] = new Vector2Int(local_b0[0].x, local_b0[0].y);
                    local_b0[0] = new Vector2Int(iVar13, iVar26);
                    iVar27 = iVar24 - 1;
                    iVar8 = 1;

                    do
                    {
                        bVar3 = false;
                        iVar25 = iVar8;
                        local_28 = 0; //not in the original code

                        if (iVar8 < iVar27)
                        {
                            do
                            {
                                piVar7 = iVar8;
                                iVar5 = iVar8 + 1;
                                piVar11 = iVar5;
                                iVar14 = local_b0[piVar7].x;
                                iVar22 = local_b0[piVar11].y;
                                iVar9 = iVar14 - iVar13;
                                iVar21 = local_b0[piVar7].y;
                                iVar18 = local_b0[piVar11].x;
                                iVar19 = iVar18 - iVar13;
                                iVar6 = iVar9 * (iVar22 - iVar26) - (iVar21 - iVar26) * iVar19;

                                if (iVar6 == 0)
                                {
                                    iVar24--;
                                    iVar27--;

                                    if (iVar21 == iVar22)
                                    {
                                        if (iVar9 < 0)
                                            iVar9 = -iVar9;

                                        if (iVar19 < 0)
                                            iVar19 = -iVar19;

                                        bVar1 = iVar19 < iVar9;
                                    }
                                    else
                                        bVar1 = iVar22 < iVar21;

                                    iVar9 = iVar8 + (bVar1 ? 1 : 0);

                                    while (iVar9 < iVar24)
                                    {
                                        iVar19 = iVar9 + 1;
                                        iVar5 = local_b0[iVar19].y;
                                        local_b0[iVar9] = new Vector2Int(local_b0[iVar19].x, iVar5);
                                        iVar9 = iVar19;
                                    }

                                    iVar8--;
                                }
                                else
                                {
                                    if (iVar6 < 0)
                                    {
                                        local_b0[piVar7] = new Vector2Int(iVar18, local_b0[piVar11].y);
                                        local_b0[piVar11] = new Vector2Int(iVar14, iVar21);

                                        if (!bVar3)
                                        {
                                            iVar25 = 1;

                                            if (2 < iVar8)
                                                iVar25 = iVar8 - 1;

                                            bVar3 = true;
                                        }

                                        local_28 = iVar8;
                                    }
                                }

                                iVar8++;
                            } while (iVar8 < iVar27);
                        }

                        iVar27 = local_28;
                        iVar8 = iVar25;
                    } while (bVar3);

                    iVar27 = 0;
                    iVar26 = 0;

                    if (0 < iVar24)
                    {
                        piVar11 = 0;

                        do
                        {
                            if (1 < iVar26)
                            {
                                do
                                {
                                    iVar8 = iVar26 - 1;
                                    iVar13 = local_b0[iVar8].x;

                                    if ((local_b0[iVar8].y - local_b0[iVar26 - 2].y) *
                                        (local_b0[piVar11].x - iVar13) <=
                                        (iVar13 - local_b0[iVar26 - 2].x) * (local_b0[piVar11].y - local_b0[iVar8].y))
                                        break;

                                    iVar26 = iVar8;
                                } while (1 < iVar8);
                            }

                            iVar13 = local_b0[piVar11].y;
                            local_b0[iVar26] = new Vector2Int(local_b0[piVar11].x, iVar13);
                            iVar26++;
                            iVar27++;
                            piVar11++;
                        } while (iVar27 < iVar24);
                    }

                    Utilities.SetRotMatrix(DAT_F00.rotation);
                    Utilities.SetRotMatrix3(DAT_F00.rotation);
                    Coprocessor.translationVector._trx = 0;
                    Coprocessor.translationVector._try = 0;
                    Coprocessor.translationVector._trz = 0;
                    Coprocessor3.translationVector._trx = 0;
                    Coprocessor3.translationVector._try = 0;
                    Coprocessor3.translationVector._trz = 0;
                    iVar24 = 0;
                    Utilities.SetColorMatrix(levelManager.DAT_738);
                    Utilities.SetColorMatrix3(levelManager.DAT_738);
                    Utilities.SetLightMatrix(DAT_718);
                    Utilities.SetLightMatrix3(DAT_718);
                    Utilities.SetBackColor(levelManager.DAT_E04.r, levelManager.DAT_E04.g, levelManager.DAT_E04.b);
                    Utilities.SetBackColor3(levelManager.DAT_E04.r, levelManager.DAT_E04.g, levelManager.DAT_E04.b);
                    Utilities.SetFarColor(levelManager.DAT_DA4.r, levelManager.DAT_DA4.g, levelManager.DAT_DA4.b);
                    Utilities.SetFarColor3(levelManager.DAT_DA4.r, levelManager.DAT_DA4.g, levelManager.DAT_DA4.b);
                    DAT_1f800080 = 0x100; //DAT_CE0 + 0x100
                    Utilities.SetFogNearFar(DAT_DB6 << 8, DAT_DB4 << 8, DAT_ED8);
                    Utilities.SetFogNearFar3(DAT_DB6 << 8, DAT_DB4 << 8, DAT_ED8);
                    Coprocessor.colorCode.r = levelManager.DAT_DDC.r;
                    Coprocessor.colorCode.g = levelManager.DAT_DDC.g;
                    Coprocessor.colorCode.b = levelManager.DAT_DDC.b;
                    Coprocessor.colorCode.code = levelManager.DAT_DDC.a;

                    for (iVar24 = 0; iVar24 < 32; iVar24++)
                    {
                        Coprocessor.accumulator.ir1 = (short)(iVar24 << 7);
                        Coprocessor.ExecuteCC(12, true);
                        VigTerrain.DAT_BA4F0[iVar24] = new Color32
                            (Coprocessor.colorFIFO.r2, Coprocessor.colorFIFO.g2, Coprocessor.colorFIFO.b2, Coprocessor.colorFIFO.cd2);
                        DAT_1f800000[iVar24] = new Color32
                            (terrain.DAT_B9370[iVar24].r, terrain.DAT_B9370[iVar24].g, terrain.DAT_B9370[iVar24].b, 52);
                    }

                    DAT_1f800094 = (short)(ushort)DAT_EDC;
                    DAT_1f800096 = (short)(ushort)DAT_F20;
                    DAT_1f800098 = (short)(DAT_DB6 << 8);
                    DAT_1f80009a = (short)(DAT_DB8 << 8);
                    nativeArray = new NativeArray<Vector2Int>(local_b0.Count, Allocator.Persistent);

                    for (int i = 0; i < nativeArray.Length; i++)
                        nativeArray[i] = local_b0[i];

                    terrainJob = new TerrainJob()
                    {
                        param1 = nativeArray,
                        param2 = iVar26
                    };

                    terrainHandle = terrainJob.Schedule();

                    //FUN_1BECC(local_b0, iVar26);
                }

                return;
            }
        } while (true);
    }

    private int FUN_1E354(Vector3Int v3)
    {
        int iVar1;
        int iVar2;

        iVar1 = Utilities.FUN_29E84(v3);
        iVar2 = iVar1 + 0x200000;

        if (iVar2 < 0)
            iVar2 = iVar1 + 0x200fff;

        return (DAT_E1C << 9) / (iVar2 >> 12);
    }

    private int FUN_1E39C(Vector3Int v3)
    {
        int iVar1;
        int iVar2;
        uint uVar3;
        int iVar4;

        iVar1 = Utilities.FUN_29E84(v3);
        iVar2 = iVar1 + 0x200000;

        if (iVar2 < 0)
            iVar2 = iVar1 + 0x200fff;

        iVar4 = (DAT_E1C << 9) / (iVar2 >> 12);
        iVar2 = Utilities.LeadingZeros(iVar1);
        uVar3 = 12;

        if ((int)(iVar2 - 1U) < 12)
            uVar3 = (uint)(iVar2 - 1U);

        if (iVar1 == 0)
            iVar1 = 0;
        else
            iVar1 = (v3.x << (int)(uVar3 & 31)) / (iVar1 >> (int)(12 - uVar3 & 31));

        iVar2 = (4096 - iVar1) * iVar4;

        if (iVar2 < 0)
            iVar2 += 8191;

        iVar4 = (iVar1 + 4096) * iVar4;

        if (iVar4 < 0)
            iVar4 += 8191;

        return iVar2 >> 13 | (iVar4 >> 13) << 16;
    }

    public uint FUN_1E478(Vector3Int pos)
    {
        short sVar1;
        short sVar2;
        int iVar3;
        uint uVar4;
        Vector3Int auStack24;
        Vector3Int auStack8;

        auStack24 = Utilities.FUN_24148(DAT_F00, pos);

        if (screenMode == _SCREEN_MODE.Whole)
        {
            if (!DAT_83B)
                uVar4 = (uint)FUN_1E39C(auStack24);
            else
            {
                iVar3 = FUN_1E354(auStack24);
                uVar4 = (uint)((iVar3 * 0x10000 >> 16) + iVar3 * 0x10000);
            }
        }
        else
        {
            auStack8 = Utilities.FUN_24148(terrain.DAT_BDFF0[0], pos);

            if (!DAT_83B) 
            {
                iVar3 = FUN_1E354(auStack24);
                sVar1 = (short)FUN_1E354(auStack8);
                uVar4 = (uint)(iVar3 << 16 | (int)sVar1);
            }
            else
            {
                sVar1 = (short)FUN_1E354(auStack24);
                sVar2 = (short)FUN_1E354(auStack8);
                iVar3 = DAT_E1C;

                if (sVar1 + sVar2 < DAT_E1C)
                    iVar3 = sVar1 + sVar2;

                uVar4 = (uint)(iVar3 * 0x10001);
            }
        }

        return uVar4;
    }

    public int FUN_1E67C(Vector3Int param1)
    {
        int iVar1;
        int iVar2;

        iVar2 = Utilities.FUN_29E84(param1);

        if (0x200000 - iVar2 < 0)
            iVar1 = 0;
        else
        {
            iVar1 = (0x200000 - iVar2 >> 12) * DAT_E1C;

            if (iVar1 < 0)
                iVar1 += 511;

            iVar1 = (iVar1 << 7) >> 16;
        }

        return iVar1;
    }

    public uint FUN_1E6D8(Vector3Int param1)
    {
        uint uVar1;
        int iVar2;
        int iVar3;
        int iVar4;
        int iVar5;

        iVar5 = Utilities.FUN_29E84(param1);
        uVar1 = 0;

        if (iVar5 < 0x200000)
        {
            iVar2 = -iVar5 + 0x200000;

            if (iVar2 < 0)
                iVar2 = -iVar5 + 0x200fff;

            iVar2 = (iVar2 >> 12) * DAT_E1C;

            if (iVar2 < 0)
                iVar2 += 511;

            if (iVar5 == 0)
                iVar3 = 0;
            else
                iVar3 = (param1.x << 12) / iVar5;

            iVar4 = (0x1000 - iVar3) * (iVar2 >> 9);

            if (iVar2 < 0)
                iVar2 += 0x1fff;

            uVar1 = (uint)(iVar4 >> 13 | (iVar2 >> 13) << 16);
        }

        return uVar1;
    }

    public uint FUN_1E7A8(Vector3Int param1)
    {
        short sVar1;
        uint uVar2;
        int iVar3;
        Vector3Int auStack24;
        Vector3Int auStack8;

        auStack24 = Utilities.FUN_24148(DAT_F00, param1);

        if (screenMode == _SCREEN_MODE.Whole)
            uVar2 = FUN_1E6D8(auStack24);
        else
        {
            auStack8 = Utilities.FUN_24148(terrain.DAT_BDFF0[0], param1);
            iVar3 = FUN_1E67C(auStack24);
            sVar1 = (short)FUN_1E67C(auStack8);
            uVar2 = (uint)(iVar3 << 16 | (int)sVar1);
        }

        return uVar2;
    }

    public void FUN_15B00(int param1, byte param2, byte param3, byte param4)
    {
        if (gameMode != _GAME_MODE.Demo)
        {
            DAT_D28[param1, 5] = param2;
            DAT_D28[param1, 6] = param3;
            DAT_D28[param1, 7] = param4;
        }
    }

    public void FUN_15ADC(int param1, byte param2)
    {
        if (gameMode != _GAME_MODE.Demo)
            DAT_D28[param1, 4] = param2;
    }

    public void FUN_15AA8(int param1, byte param2, byte param3, byte param4, byte param5)
    {
        if (gameMode != _GAME_MODE.Demo)
        {
            DAT_D28[param1, 4] = param2;
            DAT_D28[param1, 5] = param3;
            DAT_D28[param1, 6] = param4;
            DAT_D28[param1, 7] = param5;
        }
    }

    public void FUN_2D278(VigObject param1, int param2)
    {
        VigTransform tVar1;

        tVar1 = FUN_2CDF4(param1);
        FUN_2E0E8(tVar1, param2);
    }

    public void FUN_2DFF0(VigTransform param1)
    {
        VigTransform local_20;
        Vector3Int local_40;
        Vector3Int local_3c;
        Vector3Int local_34;

        local_20 = new VigTransform();
        local_20.rotation.V00 = (short)DAT_ED8;
        local_20.rotation.V02 = (short)(-DAT_EDC + (int)((uint)-DAT_EDC >> 31) >> 1);
        local_20.rotation.V10 = (short)-local_20.rotation.V00;
        local_20.rotation.V12 = local_20.rotation.V02;
        local_20.rotation.V21 = (short)-local_20.rotation.V00;
        local_20.rotation.V22 = (short)(-DAT_F20 + (int)((uint)-DAT_F20 >> 31) >> 1);
        local_40 = new Vector3Int(local_20.rotation.V00, local_20.rotation.V01, local_20.rotation.V02);
        local_3c = new Vector3Int(local_20.rotation.V10, local_20.rotation.V11, local_20.rotation.V12);
        local_34 = new Vector3Int(local_20.rotation.V20, local_20.rotation.V21, local_20.rotation.V22);
        local_40 = Utilities.VectorNormal(local_40);
        local_3c = Utilities.VectorNormal(local_3c);
        local_34 = Utilities.VectorNormal(local_34);
        local_20.rotation = new Matrix3x3()
        {
            V00 = (short)local_40.x,
            V01 = (short)local_40.y,
            V02 = (short)local_40.z,
            V10 = (short)local_3c.x,
            V11 = (short)local_3c.y,
            V12 = (short)local_3c.z,
            V20 = (short)local_34.x,
            V21 = (short)local_34.y,
            V22 = (short)local_34.z
        };
        DAT_FD8 = Utilities.FUN_247C4(local_20.rotation, param1.rotation);
    }

    public HitDetection FUN_2F798(VigObject obj, HitDetection hit)
    {
        VigTransform t;
        uint uVar1;
        int iVar2;
        BufferedBinaryReader brVar3;
        BufferedBinaryReader brVar4;
        int iVar5;
        int iVar6;
        int iVar7;
        BoundingBox puVar8;
        uint uVar9;
        Vector3Int local_30;
        Radius local_28;
        long c1_pos;
        long c2_pos;

        t = FUN_2CDF4(hit.object2);
        brVar3 = hit.collider1;
        c1_pos = hit.collider1.Position;
        c2_pos = hit.collider2.Position;

        if (brVar3.ReadUInt16(0) == 1)
        {
            brVar4 = hit.collider2;
            puVar8 = new BoundingBox()
            {
                min = new Vector3Int(brVar3.ReadInt32(4), brVar3.ReadInt32(8), brVar3.ReadInt32(12)),
                max = new Vector3Int(brVar3.ReadInt32(16), brVar3.ReadInt32(20), brVar3.ReadInt32(24))
            };

            if (brVar4.ReadUInt16(0) == 1)
            {
                iVar7 = 0;
                uVar9 = 0x80000000;
                iVar5 = 0;

                do
                {
                    brVar4.Seek(4, SeekOrigin.Current);
                    local_28 = new Radius();
                    local_28.matrixSV = new Vector3Int();

                    if (iVar5 == 0)
                        local_28.matrixSV.x = ((iVar5 == 3 ? 1 : 0) - 1) * 0x1000;
                    else
                        local_28.matrixSV.x = (iVar5 == 3 ? 1 : 0) << 12;

                    if (iVar5 == 1)
                        local_28.matrixSV.y = ((iVar5 == 4 ? 1 : 0) - 1) * 0x1000;
                    else
                        local_28.matrixSV.y = (iVar5 == 4 ? 1 : 0) << 12;

                    if (iVar5 == 2)
                        local_28.matrixSV.z = ((iVar5 == 5 ? 1 : 0) - 1) * 0x1000;
                    else
                        local_28.matrixSV.z = (iVar5 == 5 ? 1 : 0) << 12;

                    local_28.contactOffset = brVar4.ReadInt32(0);

                    if (iVar5 < 3)
                        local_28.contactOffset = -local_28.contactOffset;

                    iVar6 = Utilities.FUN_2E5B0(puVar8, obj.vTransform, local_28, t);

                    if ((int)uVar9 < iVar6)
                    {
                        iVar7 = iVar5;
                        uVar9 = (uint)iVar6;
                    }

                    iVar5++;
                } while (iVar5 < 6);

                uVar1 = (uint)(iVar7 == 3 ? 1 : 0);

                if (iVar7 == 0)
                    uVar1--;

                local_30 = new Vector3Int();
                local_30.x = (short)(uVar1 << 12);

                if (iVar7 == 1)
                    local_30.y = ((iVar7 == 4 ? 1 : 0) - 1) * 0x1000;
                else
                    local_30.y = (iVar7 == 4 ? 1 : 0) << 12;

                if (iVar7 == 2)
                    local_30.z = ((iVar7 == 5 ? 1 : 0) - 1) * 0x1000;
                else
                    local_30.z = (iVar7 == 5 ? 1 : 0) << 12;

                hit.normal1 = Utilities.ApplyMatrixSV(t.rotation, local_30);
                hit.normal2 = Utilities.FUN_24238(obj.vTransform.rotation, hit.normal1);

                if (hit.normal2.x < 0)
                    hit.position.x = puVar8.max.x;
                else
                    hit.position.x = puVar8.min.x;

                if (hit.normal2.y < 0)
                    hit.position.y = puVar8.max.y;
                else
                    hit.position.y = puVar8.min.y;

                if (hit.normal2.z < 0)
                    hit.position.z = puVar8.max.z;
                else
                    hit.position.z = puVar8.min.z;

                hit.distance = (int)uVar9;
            }
            else
            {
                if (brVar4.ReadUInt16(0) == 2)
                {
                    uVar9 = 0x80000000;
                    iVar5 = 0;
                    iVar7 = 0;

                    if (brVar4.ReadUInt16(2) != 0)
                    {
                        iVar6 = 4;

                        do
                        {
                            Radius radius = new Radius()
                            {
                                matrixSV = new Vector3Int(brVar4.ReadInt16(iVar6), brVar4.ReadInt16(iVar6 + 2), brVar4.ReadInt16(iVar6 + 4)),
                                contactOffset = brVar4.ReadInt32(iVar6 + 8)
                            };
                            iVar2 = Utilities.FUN_2E5B0(puVar8, obj.vTransform, radius, t);

                            if ((int)uVar9 < iVar2)
                            {
                                iVar7 = iVar5;
                                uVar9 = (uint)iVar2;
                            }

                            iVar5++;
                            iVar6 += 12;
                        } while (iVar5 < brVar4.ReadUInt16(2));
                    }

                    iVar7 = iVar7 * 12 + 4;
                    Vector3Int svector = new Vector3Int(brVar4.ReadInt16(iVar7), brVar4.ReadInt16(iVar7 + 2), brVar4.ReadInt16(iVar7 + 4));
                    hit.normal1 = Utilities.ApplyMatrixSV(t.rotation, svector);
                    hit.normal2 = Utilities.FUN_24238(obj.vTransform.rotation, hit.normal1);

                    if (hit.normal2.x < 0)
                        hit.position.x = puVar8.max.x;
                    else
                        hit.position.x = puVar8.min.x;

                    if (hit.normal2.y < 0)
                        hit.position.y = puVar8.max.y;
                    else
                        hit.position.y = puVar8.min.y;

                    if (hit.normal2.z < 0)
                        hit.position.z = puVar8.max.z;
                    else
                        hit.position.z = puVar8.min.z;

                    hit.distance = (int)uVar9;
                }
            }
        }

        hit.collider1.Seek(c1_pos, SeekOrigin.Begin);
        hit.collider2.Seek(c2_pos, SeekOrigin.Begin);
        return hit;
    }

    public void FUN_2D778(VigObject param1, VigTransform param2)
    {
        VigTransform t2;

        do
        {
            if ((param1.flags & 2) == 0)
            {
                t2 = Utilities.CompMatrixLV(param2, param1.vTransform);

                if ((param1.flags & 0x10) != 0)
                {
                    if ((param1.flags & 0x400) == 0)
                        t2.rotation = Utilities.FUN_2A4A4(t2.rotation);
                    else
                        t2.rotation = param1.vTransform.rotation;
                }

                if (param1.vMesh != null)
                    param1.vMesh.FUN_21F70(t2);

                if (param1.child2 != null)
                    FUN_2D778(param1.child2, t2);
            }

            param1 = param1.child;
        } while (param1 != null);
    }

    private void FUN_2D9E0(VigObject param1)
    {
        bool bVar1;
        int iVar1;
        int iVar2;
        Vector3Int v0;
        uint rbk;
        VigTransform t2;
        Vector3Int local_20;

        Utilities.ResetMesh(param1);

        if ((param1.flags & 2) == 0)
        {
            bVar1 = FUN_2E22C(param1.vTransform.position, param1.DAT_58);

            if (bVar1)
            {
                t2 = Utilities.CompMatrixLV(DAT_F00, param1.vTransform);

                if (t2.position.z < 0x400000)
                {
                    if ((param1.flags & 0x10) != 0)
                    {
                        if ((param1.flags & 0x400) == 0)
                        {
                            if (param1.vTransform.padding == 0)
                                t2.rotation = DAT_EE0.rotation;
                            else
                                t2.rotation = Utilities.FUN_2A4A4(t2.rotation);
                        }
                        else
                            t2.rotation = param1.vTransform.rotation;
                    }

                    rbk = 0x40;

                    if ((param1.flags & 0x2000) != 0)
                    {
                        iVar1 = param1.vTransform.position.x;

                        if (iVar1 < 0)
                            iVar1 += 0xffff;

                        iVar2 = param1.vTransform.position.z;

                        if (iVar2 < 0)
                            iVar2 += 0xffff;

                        rbk = (uint)(terrain.vertices[terrain.chunks[((uint)(iVar1 >> 16) >> 6) * 32 + ((uint)(iVar2 >> 16) >> 6)] * 4096
                                        + ((iVar2 >> 16 & 0x3fU) * 2 + (iVar1 >> 16 & 0x3fU) * 128) / 2] & 0xf800) >> 8;
                    }

                    Utilities.SetBackColor((int)rbk, (int)rbk, (int)rbk);

                    if (param1.DAT_6C == 0 || t2.position.z <= param1.DAT_6C)
                    {
                        if ((param1.flags & 0x20000) == 0)
                        {
                            if ((param1.flags & 0x10000) == 0 ||
                                DAT_DA0 <= param1.vTransform.position.z ||
                                param1.vTransform.position.y + param1.DAT_58 <= DAT_DB0)
                            {
                                if (param1.vMesh != null)
                                    param1.vMesh.FUN_21F70(t2);

                                if (param1.child2 != null)
                                    FUN_2D778(param1.child2, t2);
                            }
                            else
                            {
                                if (param1.vMesh != null)
                                    param1.vMesh.FUN_2D2A8(t2);

                                if (param1.child2 != null)
                                    param1.child2.FUN_2D368(t2);
                            }
                        }
                        else
                        {
                            local_20 = new Vector3Int(
                                param1.vTransform.position.x,
                                terrain.FUN_1B750((uint)param1.vTransform.position.x, (uint)param1.vTransform.position.z),
                                param1.vTransform.position.z);
                            v0 = terrain.FUN_1BB50(param1.vTransform.position.x, param1.vTransform.position.z);
                            v0 = Utilities.VectorNormal(v0);

                            if (param1.vMesh != null)
                                param1.vMesh.FUN_2D4D4(t2, v0, local_20);

                            if (param1.child2 != null)
                                param1.child2.FUN_2D5EC(t2, v0, local_20);
                        }
                    }
                    else
                    {
                        if (param1.vLOD != null)
                            t2.rotation = param1.FUN_2D884(t2);
                    }

                    if ((param1.flags & 8) != 0)
                    {
                        if ((param1.flags & 0x200) == 0)
                            param1.FUN_4C4F4();

                        param1.vShadow.FUN_4C73C();
                    }
                }
            }
        }
    }

    private void FUN_2DEE8(int param1, int param2)
    {
        Utilities.SetScreenOffset(param1, param2);
        DAT_FC8 = new Vector2Int(param1, param2);
    }

    private void FUN_2DF30(int param1, int param2, int param3, int param4)
    {
        DAT_EDC = param1;
        DAT_F20 = param2;
        FUN_2DEE8(param3, param4);
    }

    public VigTransform FUN_2CDF4(VigObject obj)
    {
        VigTransform m1 = obj.vTransform;

        while (true)
        {
            obj = Utilities.FUN_2CD78(obj);

            if (obj == null) break;

            DAT_EA8 = Utilities.CompMatrixLV(obj.vTransform, m1);
            m1 = DAT_EA8;
        }

        return m1;
    }

    public Vector3Int FUN_2CE50(VigObject obj)
    {
        Vector3Int puVar1;

        puVar1 = obj.vTransform.position;

        while (true)
        {
            obj = Utilities.FUN_2CD78(obj);

            if (obj == null) break;

            DAT_EC8 = Utilities.FUN_24148(obj.vTransform, puVar1);
            puVar1 = DAT_EC8;
        }

        return puVar1;
    }

    public VigTransform FUN_2CEAC(VigObject param1, ConfigContainer param2)
    {
        VigTransform t0;
        VigTransform t1;

        t0 = FUN_2CDF4(param1);
        t1 = Utilities.FUN_2C77C(param2);
        return Utilities.CompMatrixLV(t0, t1);
    }

    public void FUN_2CF00(out Vector3Int param1, VigObject param2, ConfigContainer param3)
    {
        VigTransform tVar1;

        tVar1 = FUN_2CDF4(param2);
        param1 = Utilities.FUN_24148(tVar1, param3.v3_1);
    }

    private void FUN_2E0E8(VigTransform param1, int param2)
    {
        DAT_F28 = param1;
        DAT_F88 = DAT_F28;
        DAT_F00 = Utilities.FUN_2A3EC(param1);
        DAT_ED8 = param2;
        Utilities.SetProjectionPlane(param2);
        Utilities.SetProjectionPlane3(param2);
        DAT_F48 = Utilities.FUN_247C4(DAT_F68, param1.rotation);
        FUN_2DFF0(DAT_F00);
        DAT_EE0 = DAT_F00;
        DAT_EE0.rotation = Utilities.FUN_2A4A4(DAT_EE0.rotation);
    }

    public bool FUN_2E22C(Vector3Int param1, int param2)
    {
        int iVar1;
        bool bVar2;

        Coprocessor.rotationMatrix.rt11 = DAT_FD8.V00;
        Coprocessor.rotationMatrix.rt12 = DAT_FD8.V01;
        Coprocessor.rotationMatrix.rt13 = DAT_FD8.V02;
        Coprocessor.rotationMatrix.rt21 = DAT_FD8.V10;
        Coprocessor.rotationMatrix.rt22 = DAT_FD8.V11;
        Coprocessor.rotationMatrix.rt23 = DAT_FD8.V12;
        Coprocessor.rotationMatrix.rt31 = DAT_FD8.V20;
        Coprocessor.rotationMatrix.rt32 = DAT_FD8.V21;
        Coprocessor.rotationMatrix.rt33 = DAT_FD8.V22;
        Coprocessor.accumulator.ir1 = (short)(param1.x - DAT_F28.position.x >> 8);
        Coprocessor.accumulator.ir2 = (short)(param1.y - DAT_F28.position.y >> 8);
        Coprocessor.accumulator.ir3 = (short)(param1.z - DAT_F28.position.z >> 8);
        Coprocessor.ExecuteMVMVA(_MVMVA_MULTIPLY_MATRIX.Rotation, _MVMVA_MULTIPLY_VECTOR.IR, _MVMVA_TRANSLATION_VECTOR.None, 12, false);
        param2 >>= 8;
        bVar2 = false;
        iVar1 = Coprocessor.accumulator.ir1;

        if (iVar1 < param2)
        {
            iVar1 = Coprocessor.accumulator.ir2;

            if (iVar1 < param2)
            {
                iVar1 = Coprocessor.accumulator.ir3;
                bVar2 = iVar1 < param2;
            }
        }

        return bVar2;
    }

    private bool FUN_2E22C_2(Vector3Int param1, int param2)
    {
        int iVar1;
        bool bVar2;

        Coprocessor2.rotationMatrix.rt11 = DAT_FD8.V00;
        Coprocessor2.rotationMatrix.rt12 = DAT_FD8.V01;
        Coprocessor2.rotationMatrix.rt13 = DAT_FD8.V02;
        Coprocessor2.rotationMatrix.rt21 = DAT_FD8.V10;
        Coprocessor2.rotationMatrix.rt22 = DAT_FD8.V11;
        Coprocessor2.rotationMatrix.rt23 = DAT_FD8.V12;
        Coprocessor2.rotationMatrix.rt31 = DAT_FD8.V20;
        Coprocessor2.rotationMatrix.rt32 = DAT_FD8.V21;
        Coprocessor2.rotationMatrix.rt33 = DAT_FD8.V22;
        Coprocessor2.accumulator.ir1 = (short)(param1.x - DAT_F28.position.x >> 8);
        Coprocessor2.accumulator.ir2 = (short)(param1.y - DAT_F28.position.y >> 8);
        Coprocessor2.accumulator.ir3 = (short)(param1.z - DAT_F28.position.z >> 8);
        Coprocessor2.ExecuteMVMVA(_MVMVA_MULTIPLY_MATRIX.Rotation, _MVMVA_MULTIPLY_VECTOR.IR, _MVMVA_TRANSLATION_VECTOR.None, 12, false);
        param2 >>= 8;
        bVar2 = false;
        iVar1 = Coprocessor2.accumulator.ir1;

        if (iVar1 < param2)
        {
            iVar1 = Coprocessor2.accumulator.ir2;

            if (iVar1 < param2)
            {
                iVar1 = Coprocessor2.accumulator.ir3;
                bVar2 = iVar1 < param2;
            }
        }

        return bVar2;
    }

    private HitDetection FUN_2E998(VigObject param1, VigObject param2, VigTransform param3, VigTransform param4)
    {
        short sVar1;
        int iVar2;
        bool bVar3;
        int iVar3;
        BufferedBinaryReader brVar4;
        int iVar5;
        BufferedBinaryReader brVar6;

        /*if (param1.gameObject.name == "Oil" || 
            param2.gameObject.name == "Oil")
            Debug.Log("!");*/

        if (param1.vCollider != null)
        {
            if (param2.vCollider == null)
                return null;

            /*brVar6 = new BufferedBinaryReader(new MemoryStream(param1.vCollider.buffer), param1.vCollider.buffer.Length);
            brVar6.FillBuffer();
            brVar4= new BufferedBinaryReader(new MemoryStream(param2.vCollider.buffer), param2.vCollider.buffer.Length);
            brVar4.FillBuffer();*/
            brVar6 = param1.vCollider.reader;
            brVar4 = param2.vCollider.reader;
            sVar1 = brVar6.ReadInt16(0);

            while (sVar1 != 0)
            {
                sVar1 = brVar6.ReadInt16(0);
                brVar4.Seek(0, SeekOrigin.Begin);

                if (sVar1 == 1)
                {
                    if ((brVar6.ReadUInt16(2) & 0x8000U) == 0)
                    {
                        sVar1 = brVar4.ReadInt16(0);

                        joined_r0x8002ea44:
                        if (sVar1 != 0)
                        {
                            sVar1 = brVar4.ReadInt16(0);

                            if (sVar1 != 1)
                            {
                                if (sVar1 == 2)
                                {
                                    iVar3 = 0;

                                    if (brVar4.ReadUInt16(2) == 0)
                                    {
                                        hit.collider1.ChangeBuffer(brVar6);
                                        hit.collider2.ChangeBuffer(brVar4);
                                        hit.object1 = param1;
                                        hit.object2 = param2;
                                        return hit;
                                    }

                                    iVar5 = 4;

                                    while (true)
                                    {
                                        BoundingBox bbox = new BoundingBox()
                                        {
                                            min = new Vector3Int(brVar6.ReadInt32(4), brVar6.ReadInt32(8), brVar6.ReadInt32(12)),
                                            max = new Vector3Int(brVar6.ReadInt32(16), brVar6.ReadInt32(20), brVar6.ReadInt32(24))
                                        };
                                        Radius radius = new Radius()
                                        {
                                            matrixSV = new Vector3Int(brVar4.ReadInt16(iVar5), brVar4.ReadInt16(iVar5 + 2), brVar4.ReadInt16(iVar5 + 4)),
                                            contactOffset = brVar4.ReadInt32(iVar5 + 8)
                                        };
                                        iVar2 = (int)Utilities.FUN_2E2E8(bbox, param3, radius, param4);
                                        iVar3++;

                                        if (iVar2 == 0) break;

                                        iVar5 += 12;

                                        if (brVar4.ReadUInt16(2) <= iVar3)
                                        {
                                            hit.collider1.ChangeBuffer(brVar6);
                                            hit.collider2.ChangeBuffer(brVar4);
                                            hit.object1 = param1;
                                            hit.object2 = param2;
                                            return hit;
                                        }
                                    }

                                    brVar4.Seek(brVar4.ReadUInt16(2) * 12 + 4, SeekOrigin.Current);
                                    sVar1 = brVar4.ReadInt16(0);
                                }

                                goto joined_r0x8002ea44;
                            }

                            if ((brVar4.ReadUInt16(2) & 0x8000U) == 0)
                            {
                                BoundingBox bbox1 = new BoundingBox()
                                {
                                    min = new Vector3Int(brVar6.ReadInt32(4), brVar6.ReadInt32(8), brVar6.ReadInt32(12)),
                                    max = new Vector3Int(brVar6.ReadInt32(16), brVar6.ReadInt32(20), brVar6.ReadInt32(24))
                                };
                                BoundingBox bbox2 = new BoundingBox()
                                {
                                    min = new Vector3Int(brVar4.ReadInt32(4), brVar4.ReadInt32(8), brVar4.ReadInt32(12)),
                                    max = new Vector3Int(brVar4.ReadInt32(16), brVar4.ReadInt32(20), brVar4.ReadInt32(24))
                                };
                                bVar3 = Utilities.FUN_281FC(bbox1, param3, bbox2, param4);

                                if (bVar3)
                                {
                                    bVar3 = Utilities.FUN_281FC(bbox2, param4, bbox1, param3);

                                    if (bVar3)
                                    {
                                        hit.collider1.ChangeBuffer(brVar6);
                                        hit.collider2.ChangeBuffer(brVar4);
                                        hit.object1 = param1;
                                        hit.object2 = param2;
                                        return hit;
                                    }
                                }
                            }

                            brVar4.Seek(28, SeekOrigin.Current);
                            sVar1 = brVar4.ReadInt16(0);
                            goto joined_r0x8002ea44;
                        }
                    }

                    brVar6.Seek(28, SeekOrigin.Current);
                    sVar1 = brVar6.ReadInt16(0);
                }
                else
                {
                    if (sVar1 == 2)
                    {
                        LAB_2EBE0:
                        bool doBreak = false;

                        do
                        {
                            sVar1 = brVar4.ReadInt16(0);

                            while (true)
                            {
                                if (sVar1 == 0)
                                {
                                    brVar6.Seek(brVar6.ReadUInt16(2) * 12 + 4, SeekOrigin.Current);
                                    sVar1 = brVar6.ReadInt16(0);
                                    doBreak = true;
                                    break;
                                }

                                sVar1 = brVar4.ReadInt16(0);

                                if (sVar1 == 1) break;

                                if (sVar1 == 2)
                                {
                                    brVar4.Seek(brVar4.ReadUInt16(2) * 12 + 4, SeekOrigin.Current);
                                    goto LAB_2EBE0;
                                }
                            }

                            if (doBreak) break;

                            if ((brVar4.ReadUInt16(2) & 0x8000U) == 0)
                            {
                                iVar3 = 0;

                                if (brVar6.ReadUInt16(2) == 0)
                                {
                                    hit.collider1.ChangeBuffer(brVar6);
                                    hit.collider2.ChangeBuffer(brVar4);
                                    hit.object1 = param1;
                                    hit.object2 = param2;
                                    return hit;
                                }

                                iVar5 = 4;

                                while (true)
                                {
                                    BoundingBox bbox = new BoundingBox()
                                    {
                                        min = new Vector3Int(brVar4.ReadInt32(4), brVar4.ReadInt32(8), brVar4.ReadInt32(12)),
                                        max = new Vector3Int(brVar4.ReadInt32(16), brVar4.ReadInt32(20), brVar4.ReadInt32(24))
                                    };
                                    Radius radius = new Radius()
                                    {
                                        matrixSV = new Vector3Int(brVar6.ReadInt16(iVar5), brVar6.ReadInt16(iVar5 + 2), brVar6.ReadInt16(iVar5 + 4)),
                                        contactOffset = brVar6.ReadInt32(iVar5 + 8)
                                    };
                                    iVar2 = (int)Utilities.FUN_2E2E8(bbox, param4, radius, param3);
                                    iVar3++;

                                    if (iVar2 == 0) break;

                                    iVar5 += 12;

                                    if (brVar6.ReadUInt16(2) <= iVar3)
                                    {
                                        hit.collider1.ChangeBuffer(brVar6);
                                        hit.collider2.ChangeBuffer(brVar4);
                                        hit.object1 = param1;
                                        hit.object2 = param2;
                                        return hit;
                                    }
                                }
                            }

                            brVar4.Seek(28, SeekOrigin.Current);
                        } while (true);
                    }
                }
            }

            brVar6.Seek(0, SeekOrigin.Begin);
            brVar4.Seek(0, SeekOrigin.Begin);
        }

        return null;
    }

    private HitDetection FUN_2ECF8(VigObject param1, VigObject param2, VigTransform param3)
    {
        HitDetection oVar1;
        VigObject oVar2;
        VigTransform MStack32;

        oVar2 = param1.child2;

        do
        {
            if (oVar2 == null)
                return null;

            if (oVar2.vCollider == null || (oVar2.flags & 0x20) != 0)
            {
                if ((oVar2.flags & 0x800) != 0)
                {
                    MStack32 = Utilities.CompMatrixLV(param3, oVar2.vTransform);
                    oVar1 = FUN_2ECF8(oVar2, param2, MStack32);

                    if (oVar1 != null)
                        return oVar1;
                }
            }
            else
            {
                MStack32 = Utilities.CompMatrixLV(param3, oVar2.vTransform);
                oVar1 = FUN_2E998(oVar2, param2, MStack32, param2.vTransform);

                if (oVar1 != null)
                    return oVar1;

                if ((oVar2.flags & 0x800) != 0)
                {
                    oVar1 = FUN_2ECF8(oVar2, param2, MStack32);

                    if (oVar1 != null)
                        return oVar1;
                }
            }

            oVar2 = oVar2.child;
        } while (true);
    }

    private HitDetection FUN_2EDEC(VigObject param1, VigObject param2, VigTransform param3)
    {
        HitDetection oVar1;
        VigObject oVar2;
        VigTransform MStack32;

        oVar2 = param2.child2;

        do
        {
            if (oVar2 == null)
                return null;

            if (oVar2.vCollider == null || (oVar2.flags & 0x20) != 0)
            {
                if ((oVar2.flags & 0x800) != 0)
                {
                    MStack32 = Utilities.CompMatrixLV(param3, oVar2.vTransform);
                    oVar1 = FUN_2EDEC(param1, oVar2, MStack32);

                    if (oVar1 != null)
                        return oVar1;
                }
            }
            else
            {
                MStack32 = Utilities.CompMatrixLV(param3, oVar2.vTransform);
                oVar1 = FUN_2E998(param1, oVar2, param1.vTransform, MStack32);

                if (oVar1 != null)
                    return oVar1;

                if ((oVar2.flags & 0x800) != 0)
                {
                    oVar1 = FUN_2EDEC(param1, oVar2, MStack32);

                    if (oVar1 != null)
                        return oVar1;
                }
            }

            oVar2 = oVar2.child;
        } while (true);
    }

    private uint FUN_2EEE0(VigObject param1, VigObject param2)
    {
        bool bVar1;
        int iVar2;
        Vector3Int v3Var2;
        BufferedBinaryReader brVar2;
        int iVar3;
        HitDetection hit;
        uint uVar5;
        int iVar6;
        VigObject oVar6;

        bVar1 = false;

        if (param1.id == param2.id)
            return 0;

        iVar6 = param1.DAT_58 + param2.DAT_58;
        iVar2 = param1.vTransform.position.x - param2.vTransform.position.x;

        if (iVar2 < 0)
            iVar2 = -iVar2;

        if (iVar2 < iVar6)
        {
            iVar2 = param1.vTransform.position.y - param2.vTransform.position.y;

            if (iVar2 < 0)
                iVar2 = -iVar2;

            if (iVar2 < iVar6)
            {
                iVar2 = param1.vTransform.position.z - param2.vTransform.position.z;

                if (iVar2 < 0)
                    iVar2 = -iVar2;

                bVar1 = iVar2 < iVar6;
            }
        }

        if (!bVar1) return 0;

        if ((param2.flags & 0x40) == 0) goto LAB_2F05C;

        if (param1.PDAT_74 == null)
            param1.PDAT_74 = param2;
        else
        {
            v3Var2 = param1.vTransform.position;

            if (param1.PDAT_78 != null)
            {
                iVar6 = Utilities.FUN_29F6C(param1.PDAT_74.vTransform.position, v3Var2);
                iVar3 = Utilities.FUN_29F6C(param1.PDAT_78.vTransform.position, v3Var2);

                if (iVar3 <= iVar6)
                {
                    iVar6 = Utilities.FUN_29F6C(param2.vTransform.position, v3Var2);
                    iVar2 = Utilities.FUN_29F6C(param1.PDAT_74.vTransform.position, v3Var2);

                    if (iVar2 <= iVar6) goto LAB_2F05C;
                    else
                    {
                        param1.PDAT_74 = param2;
                        goto LAB_2F05C;
                    }
                }

                iVar6 = Utilities.FUN_29F6C(param2.vTransform.position, v3Var2);
                iVar2 = Utilities.FUN_29F6C(param1.PDAT_78.vTransform.position, v3Var2);

                if (iVar2 <= iVar6) goto LAB_2F05C;
            }

            param1.PDAT_78 = param2;
        }

        LAB_2F05C:
        if ((param1.flags & 0x800) == 0 || (hit = FUN_2ECF8(param1, param2, param1.vTransform)) == null)
        {
            if ((param2.flags & 0x800) == 0 || (hit = FUN_2EDEC(param1, param2, param2.vTransform)) == null)
            {
                hit = FUN_2E998(param1, param2, param1.vTransform, param2.vTransform);

                if (hit == null) return 0;
            }
        }

        hit.self = param2;
        uVar5 = param1.OnCollision(hit);

        if (uVar5 + 1 < 2)
        {
            brVar2 = hit.collider2;
            oVar6 = hit.object2;
            uVar5 >>= 31;
            hit.self = param1;
            hit.collider2 = hit.collider1;
            hit.collider1 = brVar2;
            hit.object2 = hit.object1;
            hit.object1 = oVar6;
            iVar2 = (int)param2.OnCollision(hit);

            if (iVar2 < 0)
                uVar5 |= 2;
        }
        else
            uVar5 >>= 31;

        return uVar5;
    }

    private VigTuple FUN_30180(List<VigTuple> param1, int param2, VigObject param3)
    {
        for (int i = 0; i < param1.Count; i++)
            if (param1[i].vObject != param3)
                if (param1[i].vObject.id == param2)
                    return param1[i];

        return null;
    }

    public VigObject FUN_30250(List<VigTuple> param1, int param2)
    {
        VigTuple tVar1;
        VigObject oVar2;

        tVar1 = FUN_30180(param1, param2, null);
        oVar2 = null;

        if (tVar1 != null)
            oVar2 = tVar1.vObject;

        return oVar2;
    }

    private bool FUN_30F20(BSP param1, VigObject param2)
    {
        VigTuple ppiVar1;
        int iVar3;
        int iVar4;
        int iVar5;
        int iVar6;
        BSP piVar7;
        int iVar8;
        int ppiVar9;
        int iVar10;
        BSP[] local_98 = new BSP[32];

        iVar3 = param2.vTransform.position.x;
        iVar5 = param2.DAT_58;
        iVar8 = param2.vTransform.position.z;
        local_98[0] = param1;
        ppiVar9 = 0;
        iVar4 = 1;

        do
        {
            if (ppiVar9 >= local_98.Length || ppiVar9 < 0)
                return false;

            piVar7 = local_98[ppiVar9];
            iVar6 = piVar7.DAT_00;
            iVar10 = iVar4 - 1;

            if (iVar6 == 1)
            {
                if (iVar3 - iVar5 < piVar7.DAT_04)
                {
                    local_98[ppiVar9] = piVar7.DAT_08;
                    ppiVar9++;
                    iVar10 = iVar4;
                }

                if (piVar7.DAT_04 < iVar3 + iVar5)
                {
                    piVar7 = piVar7.DAT_0C;
                    iVar10++;
                    local_98[ppiVar9] = piVar7;
                    ppiVar9++;
                }
            }
            else
            {
                if (iVar6 == 0)
                {
                    for (int i = 0; i < piVar7.LDAT_04.Count; i++)
                    {
                        ppiVar1 = piVar7.LDAT_04[i];

                        if ((ppiVar1.vObject.flags & 0x20) == 0)
                        {
                            iVar4 = (int)FUN_2EEE0(param2, ppiVar1.vObject);

                            if (iVar4 != 0)
                                return false;
                        }
                    }
                }
                else
                {
                    if (iVar6 == 2)
                    {
                        if (iVar8 - iVar5 < piVar7.DAT_04)
                        {
                            local_98[ppiVar9] = piVar7.DAT_08;
                            ppiVar9++;
                            iVar10 = iVar4;
                        }

                        if (piVar7.DAT_04 < iVar8 + iVar5)
                        {
                            piVar7 = piVar7.DAT_0C;
                            iVar10++;
                            local_98[ppiVar9] = piVar7;
                            ppiVar9++;
                        }
                    }
                    else
                    {
                        if (iVar6 == 3)
                        {
                            iVar10 = iVar4 + 1;
                            local_98[ppiVar9] = piVar7.DAT_08;
                            piVar7 = piVar7.DAT_0C;
                            ppiVar9++;
                            local_98[ppiVar9] = piVar7;
                            ppiVar9++;
                        }
                    }
                }
            }

            ppiVar9--;
            iVar4 = iVar10;

            if (iVar10 == 0)
                return true;
        } while (true);
    }

    private void FUN_3174C()
    {
        int iVar6;
        uint uVar7;
        VigObject oVar8;
        VigObject oVar9;

        for (int i = 0; i < worldObjs.Count; i++)
        {
            oVar8 = worldObjs[i].vObject;

            if (oVar8 != null)
            {
                if ((oVar8.flags & 0x20) == 0)
                {
                    oVar8.IDAT_78 = 0;
                    oVar8.IDAT_74 = 0;
                    oVar8.PDAT_78 = null;
                    oVar8.PDAT_74 = null;

                    for (int j = i + 1; j < worldObjs.Count; j++)
                    {
                        oVar9 = worldObjs[j].vObject;

                        if (oVar9 != null)
                        {
                            uVar7 = oVar9.flags;

                            if ((uVar7 & 0x20) == 0 && 
                                (uVar7 & oVar8.flags & 0x200) == 0)
                            {
                                iVar6 = (int)FUN_2EEE0(oVar8, oVar9);

                                if (iVar6 != 0)
                                    return;
                            }
                        }
                    }

                    if (bspTree != null && (oVar8.flags & 0x100) == 0)
                        FUN_30F20(bspTree, oVar8);
                }
            }
        }
    }

    private void FUN_34840()
    {
        uint uVar1;
        int iVar2;
        VigObject oVar2;
        int iVar3;
        VigObject oVar4;
        uint uVar5;

        if (DAT_10F0 < levelManager.DAT_C18[2])
        {
            do
            {
                uVar5 = 0x380000;

                if (gameMode != _GAME_MODE.Versus || DAT_101C < levelManager.DAT_C18[3])
                {
                    uVar1 = FUN_2AC5C();
                    uVar5 = 0x780000;

                    if ((uVar1 & 3) == 0)
                        uVar5 = 0x380000;
                }

                iVar2 = (int)FUN_2AC5C();
                iVar3 = FUN_30428(DAT_1078, uVar5);
                oVar4 = FUN_30498(DAT_1078, uVar5, iVar2 * iVar3 >> 15);
                oVar2 = FUN_4AC6C(uVar5, oVar4);
            } while (oVar2 != null && ++DAT_10F0 < levelManager.DAT_C18[2]);
        }
    }

    private void FUN_34914()
    {
        int iVar1;
        VigObject oVar1;
        int iVar2;
        VigObject oVar3;

        if (DAT_1028 < levelManager.DAT_C18[4])
        {
            do
            {
                iVar1 = (int)FUN_2AC5C();
                iVar2 = FUN_30428(DAT_1078, 0x1840000);
                oVar3 = FUN_30498(DAT_1078, 0x1840000, iVar1 * iVar2 >> 15);
                oVar1 = FUN_4AC6C(0x1840000, oVar3);

                if (oVar1 == null)
                    return;

                DAT_1028++;
            } while (DAT_1028 < levelManager.DAT_C18[4]);
        }
    }

    private _PLACEHOLDER_TYPE FUN_36B64(ushort param1)
    {
        /*_VEHICLE_INIT puVar1;

        if (20 < param1)
            param1 -= 21;

        puVar1 = Utilities.vehicleComponents[param1];

        if (puVar1 == null)
            return DAT_63DE0[param1];
        else
            return puVar1;*/

        //puVar1 = Utilities.FUN_14DAC(levelManager.components[param1], "Custom");
        //return null;
        return (_PLACEHOLDER_TYPE)param1;
    }

    private Vehicle FUN_36C2C(Placeholder param1, int param2, int param3)
    {
        _PLACEHOLDER_TYPE dVar1;
        XOBF_DB dbVar1;
        Vehicle vVar2;
        int iVar3;
        int iVar4;

        if (param2 < 0 || param1 == null)
            return null;

        dVar1 = FUN_36B64((ushort)param2);
        param1.state = dVar1;

        if (param3 < 0)
        {
            iVar3 = (39 - param3) * 4;

            if (levelManager.xobfList[39 - param3] != null)
                if (levelManager.xobfList[39 - param3].ini != null)
                    goto LAB_36CC8;

            //FUN_36558 (salvage points)
            //...
        }

        iVar3 = param2;
        LAB_36CC8:
        dbVar1 = levelManager.xobfList[iVar3];
        param1.DAT_1A = 0;
        param1.vData = dbVar1;
        vVar2 = (Vehicle)param1.FUN_31DDC();
        iVar4 = 0;

        for (; iVar4 < 2; iVar4++)
            if (vVar2.body[iVar4] != null)
                vVar2.body[iVar4].id = vVar2.id;

        if (0 < param3)
        {
            iVar3 = vVar2.vTransform.rotation.V02 * 4577;

            if (iVar3 < 0)
                iVar3 += 31;

            vVar2.physics1.X = iVar3 >> 5;
            vVar2.physics1.Y = 0;
            iVar3 = vVar2.vTransform.rotation.V22 * 4577;

            if (iVar3 < 0)
                iVar3 += 31;

            vVar2.physics1.Z = iVar3 >> 5;
        }

        return vVar2;
    }

    private void FUN_507DC(JUNC_DB param1)
    {
        bool bVar1;
        Vector3Int local_28;
        VigTransform local_18;

        bVar1 = FUN_2E22C(param1.DAT_00, (int)param1.DAT_18.DAT_18);
        local_28 = Utilities.FUN_24148(DAT_F00, param1.DAT_00);

        if (bVar1 && local_28.z < 0x200000)
        {
            local_18.rotation = new Matrix3x3();
            local_18.rotation.SetValue32(0, 0);
            local_18.rotation.SetValue32(1, 0);
            local_18.rotation.SetValue32(2, 0);
            local_18.rotation.SetValue32(3, 0);
            local_18.rotation.SetValue32(4, 0);
            local_18.padding = 0;
            local_18.position = local_28;
            param1.DAT_18.FUN_21F70(local_18);
        }
    }

    public static VigTransform FUN_2A39C()
    {
        return defaultTransform;
    }

    public static uint FUN_2AC5C()
    {
        uint uVar1 = DAT_63A64; //r8
        uint uVar2 = (uint)(byte)DAT_63A68 << 31; //r9
        DAT_63A68 = (byte)uVar1;
        uint uVar3 = (uVar1 >> 1) + uVar2;
        uVar1 = uVar1 << 12;
        uVar3 = uVar3 ^ uVar1;
        uVar1 = uVar3 >> 20;
        uVar3 = uVar3 ^ uVar1;
        DAT_63A64 = uVar3;
        return uVar3 & 0x7FFF;
    }
}